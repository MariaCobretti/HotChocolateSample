schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

scalar Uuid

type Query {
  node(id: ID!): Node
  dynamicInventory(dynamicInventoryId: Uuid!): DynamicInventory
  dynamicInventories(first: Int after: String last: Int before: String where: DynamicInventoryFilterInput order: [DynamicInventorySortInput!]): DynamicInventoryConnection
  selectionLists(first: Int after: String last: Int before: String where: SelectionListFilterInput order: [SelectionListSortInput!]): SelectionListConnection
  meta(endpoint: String): GraphQlMetaQueryType!
  serverInfo: ServerInfo!
  timeSeriesData(readDataInput: ReadDataInput): Data
  timeSeriesDataCollection(readDataInput: ReadDataInput first: Int after: String last: Int before: String where: TimeSeriesCollectionItemFilterInput order: [TimeSeriesCollectionItemSortInput!]): TimeSeriesCollectionItemConnection
  units(first: Int after: String last: Int before: String where: UnitFilterInput order: [UnitSortInput!]): UnitConnection
  sub0Default(first: Int after: String last: Int before: String where: Sub0DefaultFilterInput order: [Sub0DefaultSortInput!]): Sub0DefaultConnection
  sub0DefaultChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: Sub0DefaultFilterInput order: [Sub0DefaultSortInput!]): Sub0DefaultConnection
  sub0DefaultHistory(first: Int after: String last: Int before: String where: Sub0DefaultHistoryHistoryFilterInput order: [Sub0DefaultHistoryHistorySortInput!]): Sub0DefaultHistoryConnection
  sub0DefaultTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): Sub0DefaultTopicConnection
  hannasInventoryWithProperties(first: Int after: String last: Int before: String where: HannasInventoryWithPropertiesFilterInput order: [HannasInventoryWithPropertiesSortInput!]): HannasInventoryWithPropertiesConnection
  hannasInventoryWithPropertiesChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasInventoryWithPropertiesFilterInput order: [HannasInventoryWithPropertiesSortInput!]): HannasInventoryWithPropertiesConnection
  hannasInventoryWithPropertiesHistory(first: Int after: String last: Int before: String where: HannasInventoryWithPropertiesHistoryHistoryFilterInput order: [HannasInventoryWithPropertiesHistoryHistorySortInput!]): HannasInventoryWithPropertiesHistoryConnection
  hannasInventoryWithPropertiesTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): HannasInventoryWithPropertiesTopicConnection
  wohnung(first: Int after: String last: Int before: String where: WohnungFilterInput order: [WohnungSortInput!]): WohnungConnection
  wohnungChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: WohnungFilterInput order: [WohnungSortInput!]): WohnungConnection
  wohnungHistory(first: Int after: String last: Int before: String where: WohnungHistoryHistoryFilterInput order: [WohnungHistoryHistorySortInput!]): WohnungHistoryConnection
  wohnungTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): WohnungTopicConnection
  inventoryRemoveProps(first: Int after: String last: Int before: String where: InventoryRemovePropsFilterInput order: [InventoryRemovePropsSortInput!]): InventoryRemovePropsConnection
  inventoryRemovePropsChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryRemovePropsFilterInput order: [InventoryRemovePropsSortInput!]): InventoryRemovePropsConnection
  inventoryRemovePropsHistory(first: Int after: String last: Int before: String where: InventoryRemovePropsHistoryHistoryFilterInput order: [InventoryRemovePropsHistoryHistorySortInput!]): InventoryRemovePropsHistoryConnection
  inventoryRemovePropsTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): InventoryRemovePropsTopicConnection
  emTestF(first: Int after: String last: Int before: String where: EmTestFFilterInput order: [EmTestFSortInput!]): EmTestFConnection
  emTestFChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: EmTestFFilterInput order: [EmTestFSortInput!]): EmTestFConnection
  emTestFHistory(first: Int after: String last: Int before: String where: EmTestFHistoryHistoryFilterInput order: [EmTestFHistoryHistorySortInput!]): EmTestFHistoryConnection
  emTestFTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): EmTestFTopicConnection
  emTest1F(first: Int after: String last: Int before: String where: EmTest1FFilterInput order: [EmTest1FSortInput!]): EmTest1FConnection
  emTest1FChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: EmTest1FFilterInput order: [EmTest1FSortInput!]): EmTest1FConnection
  emTest1FHistory(first: Int after: String last: Int before: String where: EmTest1FHistoryHistoryFilterInput order: [EmTest1FHistoryHistorySortInput!]): EmTest1FHistoryConnection
  emTest1FTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): EmTest1FTopicConnection
  emTest4F(first: Int after: String last: Int before: String where: EmTest4FFilterInput order: [EmTest4FSortInput!]): EmTest4FConnection
  emTest4FChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: EmTest4FFilterInput order: [EmTest4FSortInput!]): EmTest4FConnection
  emTest4FHistory(first: Int after: String last: Int before: String where: EmTest4FHistoryHistoryFilterInput order: [EmTest4FHistoryHistorySortInput!]): EmTest4FHistoryConnection
  emTest4FTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): EmTest4FTopicConnection
  inputClearingPositionTransaction(first: Int after: String last: Int before: String where: InputClearingPositionTransactionFilterInput order: [InputClearingPositionTransactionSortInput!]): InputClearingPositionTransactionConnection
  inputClearingPositionTransactionChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InputClearingPositionTransactionFilterInput order: [InputClearingPositionTransactionSortInput!]): InputClearingPositionTransactionConnection
  inputClearingPositionTransactionHistory(first: Int after: String last: Int before: String where: InputClearingPositionTransactionHistoryHistoryFilterInput order: [InputClearingPositionTransactionHistoryHistorySortInput!]): InputClearingPositionTransactionHistoryConnection
  inputClearingPositionTransactionTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): InputClearingPositionTransactionTopicConnection
  inputTransitionTransaction(first: Int after: String last: Int before: String where: InputTransitionTransactionFilterInput order: [InputTransitionTransactionSortInput!]): InputTransitionTransactionConnection
  inputTransitionTransactionChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InputTransitionTransactionFilterInput order: [InputTransitionTransactionSortInput!]): InputTransitionTransactionConnection
  inputTransitionTransactionHistory(first: Int after: String last: Int before: String where: InputTransitionTransactionHistoryHistoryFilterInput order: [InputTransitionTransactionHistoryHistorySortInput!]): InputTransitionTransactionHistoryConnection
  inputTransitionTransactionTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): InputTransitionTransactionTopicConnection
  inputTrade(first: Int after: String last: Int before: String where: InputTradeFilterInput order: [InputTradeSortInput!]): InputTradeConnection
  inputTradeChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InputTradeFilterInput order: [InputTradeSortInput!]): InputTradeConnection
  inputTradeHistory(first: Int after: String last: Int before: String where: InputTradeHistoryHistoryFilterInput order: [InputTradeHistoryHistorySortInput!]): InputTradeHistoryConnection
  inputTradeTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): InputTradeTopicConnection
  remitTrade(first: Int after: String last: Int before: String where: RemitTradeFilterInput order: [RemitTradeSortInput!]): RemitTradeConnection
  remitTradeChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: RemitTradeFilterInput order: [RemitTradeSortInput!]): RemitTradeConnection
  remitTradeHistory(first: Int after: String last: Int before: String where: RemitTradeHistoryHistoryFilterInput order: [RemitTradeHistoryHistorySortInput!]): RemitTradeHistoryConnection
  remitTradeTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): RemitTradeTopicConnection
  internalDataSource(first: Int after: String last: Int before: String where: InternalDataSourceFilterInput order: [InternalDataSourceSortInput!]): InternalDataSourceConnection
  internalDataSourceChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InternalDataSourceFilterInput order: [InternalDataSourceSortInput!]): InternalDataSourceConnection
  internalDataSourceHistory(first: Int after: String last: Int before: String where: InternalDataSourceHistoryHistoryFilterInput order: [InternalDataSourceHistoryHistorySortInput!]): InternalDataSourceHistoryConnection
  internalDataSourceTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): InternalDataSourceTopicConnection
  flats(first: Int after: String last: Int before: String where: FlatsFilterInput order: [FlatsSortInput!]): FlatsConnection
  flatsChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: FlatsFilterInput order: [FlatsSortInput!]): FlatsConnection
  flatsHistory(first: Int after: String last: Int before: String where: FlatsHistoryHistoryFilterInput order: [FlatsHistoryHistorySortInput!]): FlatsHistoryConnection
  flatsTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): FlatsTopicConnection
  test_delete(first: Int after: String last: Int before: String where: Test_deleteFilterInput order: [Test_deleteSortInput!]): Test_deleteConnection
  test_deleteChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: Test_deleteFilterInput order: [Test_deleteSortInput!]): Test_deleteConnection
  test_deleteHistory(first: Int after: String last: Int before: String where: Test_deleteHistoryHistoryFilterInput order: [Test_deleteHistoryHistorySortInput!]): Test_deleteHistoryConnection
  test_deleteTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): Test_deleteTopicConnection
  test_delete2(first: Int after: String last: Int before: String where: Test_delete2FilterInput order: [Test_delete2SortInput!]): Test_delete2Connection
  test_delete2ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: Test_delete2FilterInput order: [Test_delete2SortInput!]): Test_delete2Connection
  test_delete2History(first: Int after: String last: Int before: String where: Test_delete2HistoryHistoryFilterInput order: [Test_delete2HistoryHistorySortInput!]): Test_delete2HistoryConnection
  test_delete2Topics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): Test_delete2TopicConnection
  propertyTest(first: Int after: String last: Int before: String where: PropertyTestFilterInput order: [PropertyTestSortInput!]): PropertyTestConnection
  propertyTestChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PropertyTestFilterInput order: [PropertyTestSortInput!]): PropertyTestConnection
  propertyTestHistory(first: Int after: String last: Int before: String where: PropertyTestHistoryHistoryFilterInput order: [PropertyTestHistoryHistorySortInput!]): PropertyTestHistoryConnection
  propertyTestTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): PropertyTestTopicConnection
  propertyTest2(first: Int after: String last: Int before: String where: PropertyTest2FilterInput order: [PropertyTest2SortInput!]): PropertyTest2Connection
  propertyTest2ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PropertyTest2FilterInput order: [PropertyTest2SortInput!]): PropertyTest2Connection
  propertyTest2History(first: Int after: String last: Int before: String where: PropertyTest2HistoryHistoryFilterInput order: [PropertyTest2HistoryHistorySortInput!]): PropertyTest2HistoryConnection
  propertyTest2Topics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): PropertyTest2TopicConnection
  propertyTest3(first: Int after: String last: Int before: String where: PropertyTest3FilterInput order: [PropertyTest3SortInput!]): PropertyTest3Connection
  propertyTest3ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PropertyTest3FilterInput order: [PropertyTest3SortInput!]): PropertyTest3Connection
  propertyTest3History(first: Int after: String last: Int before: String where: PropertyTest3HistoryHistoryFilterInput order: [PropertyTest3HistoryHistorySortInput!]): PropertyTest3HistoryConnection
  propertyTest3Topics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): PropertyTest3TopicConnection
  propertyTest4(first: Int after: String last: Int before: String where: PropertyTest4FilterInput order: [PropertyTest4SortInput!]): PropertyTest4Connection
  propertyTest4ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PropertyTest4FilterInput order: [PropertyTest4SortInput!]): PropertyTest4Connection
  propertyTest4History(first: Int after: String last: Int before: String where: PropertyTest4HistoryHistoryFilterInput order: [PropertyTest4HistoryHistorySortInput!]): PropertyTest4HistoryConnection
  propertyTest4Topics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): PropertyTest4TopicConnection
  testHanna(first: Int after: String last: Int before: String where: TestHannaFilterInput order: [TestHannaSortInput!]): TestHannaConnection
  testHannaChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TestHannaFilterInput order: [TestHannaSortInput!]): TestHannaConnection
  testHannaHistory(first: Int after: String last: Int before: String where: TestHannaHistoryHistoryFilterInput order: [TestHannaHistoryHistorySortInput!]): TestHannaHistoryConnection
  testHannaTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): TestHannaTopicConnection
  testSelectionList(first: Int after: String last: Int before: String where: TestSelectionListFilterInput order: [TestSelectionListSortInput!]): TestSelectionListConnection
  testSelectionListChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TestSelectionListFilterInput order: [TestSelectionListSortInput!]): TestSelectionListConnection
  testSelectionListHistory(first: Int after: String last: Int before: String where: TestSelectionListHistoryHistoryFilterInput order: [TestSelectionListHistoryHistorySortInput!]): TestSelectionListHistoryConnection
  testSelectionListTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): TestSelectionListTopicConnection
  testSelectionListAgain(first: Int after: String last: Int before: String where: TestSelectionListAgainFilterInput order: [TestSelectionListAgainSortInput!]): TestSelectionListAgainConnection
  testSelectionListAgainChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TestSelectionListAgainFilterInput order: [TestSelectionListAgainSortInput!]): TestSelectionListAgainConnection
  testSelectionListAgainHistory(first: Int after: String last: Int before: String where: TestSelectionListAgainHistoryHistoryFilterInput order: [TestSelectionListAgainHistoryHistorySortInput!]): TestSelectionListAgainHistoryConnection
  testSelectionListAgainTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): TestSelectionListAgainTopicConnection
  testSelectionListAgain3(first: Int after: String last: Int before: String where: TestSelectionListAgain3FilterInput order: [TestSelectionListAgain3SortInput!]): TestSelectionListAgain3Connection
  testSelectionListAgain3ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TestSelectionListAgain3FilterInput order: [TestSelectionListAgain3SortInput!]): TestSelectionListAgain3Connection
  testSelectionListAgain3History(first: Int after: String last: Int before: String where: TestSelectionListAgain3HistoryHistoryFilterInput order: [TestSelectionListAgain3HistoryHistorySortInput!]): TestSelectionListAgain3HistoryConnection
  testSelectionListAgain3Topics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): TestSelectionListAgain3TopicConnection
  testSelectionListAgain4(first: Int after: String last: Int before: String where: TestSelectionListAgain4FilterInput order: [TestSelectionListAgain4SortInput!]): TestSelectionListAgain4Connection
  testSelectionListAgain4ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TestSelectionListAgain4FilterInput order: [TestSelectionListAgain4SortInput!]): TestSelectionListAgain4Connection
  testSelectionListAgain4History(first: Int after: String last: Int before: String where: TestSelectionListAgain4HistoryHistoryFilterInput order: [TestSelectionListAgain4HistoryHistorySortInput!]): TestSelectionListAgain4HistoryConnection
  testSelectionListAgain4Topics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): TestSelectionListAgain4TopicConnection
  basicInventory(first: Int after: String last: Int before: String where: BasicInventoryFilterInput order: [BasicInventorySortInput!]): BasicInventoryConnection
  basicInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: BasicInventoryFilterInput order: [BasicInventorySortInput!]): BasicInventoryConnection
  basicInventoryHistory(first: Int after: String last: Int before: String where: BasicInventoryHistoryHistoryFilterInput order: [BasicInventoryHistoryHistorySortInput!]): BasicInventoryHistoryConnection
  basicInventoryTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): BasicInventoryTopicConnection
  fullTestInventory(first: Int after: String last: Int before: String where: FullTestInventoryFilterInput order: [FullTestInventorySortInput!]): FullTestInventoryConnection
  fullTestInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: FullTestInventoryFilterInput order: [FullTestInventorySortInput!]): FullTestInventoryConnection
  fullTestInventoryHistory(first: Int after: String last: Int before: String where: FullTestInventoryHistoryHistoryFilterInput order: [FullTestInventoryHistoryHistorySortInput!]): FullTestInventoryHistoryConnection
  fullTestInventoryTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): FullTestInventoryTopicConnection
  dispatcherMessages(first: Int after: String last: Int before: String where: DispatcherMessagesFilterInput order: [DispatcherMessagesSortInput!]): DispatcherMessagesConnection
  dispatcherMessagesChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: DispatcherMessagesFilterInput order: [DispatcherMessagesSortInput!]): DispatcherMessagesConnection
  dispatcherMessagesHistory(first: Int after: String last: Int before: String where: DispatcherMessagesHistoryHistoryFilterInput order: [DispatcherMessagesHistoryHistorySortInput!]): DispatcherMessagesHistoryConnection
  dispatcherMessagesTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): DispatcherMessagesTopicConnection
  upperTestFieldName(first: Int after: String last: Int before: String where: UpperTestFieldNameFilterInput order: [UpperTestFieldNameSortInput!]): UpperTestFieldNameConnection
  upperTestFieldNameChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: UpperTestFieldNameFilterInput order: [UpperTestFieldNameSortInput!]): UpperTestFieldNameConnection
  upperTestFieldNameHistory(first: Int after: String last: Int before: String where: UpperTestFieldNameHistoryHistoryFilterInput order: [UpperTestFieldNameHistoryHistorySortInput!]): UpperTestFieldNameHistoryConnection
  upperTestFieldNameTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): UpperTestFieldNameTopicConnection
  deleteMe(first: Int after: String last: Int before: String where: DeleteMeFilterInput order: [DeleteMeSortInput!]): DeleteMeConnection
  deleteMeChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: DeleteMeFilterInput order: [DeleteMeSortInput!]): DeleteMeConnection
  deleteMeHistory(first: Int after: String last: Int before: String where: DeleteMeHistoryHistoryFilterInput order: [DeleteMeHistoryHistorySortInput!]): DeleteMeHistoryConnection
  deleteMeTopics(first: Int after: String last: Int before: String where: TopicFilterInput order: [TopicSortInput!]): DeleteMeTopicConnection
  hannasTSIn(first: Int after: String last: Int before: String where: HannasTSInFilterInput order: [HannasTSInSortInput!]): HannasTSInConnection
  hannasTSInChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInFilterInput order: [HannasTSInSortInput!]): HannasTSInConnection
  hannasTSInHistory(first: Int after: String last: Int before: String where: HannasTSInHistoryHistoryFilterInput order: [HannasTSInHistoryHistorySortInput!]): HannasTSInHistoryConnection
  hannasTSInv(first: Int after: String last: Int before: String where: HannasTSInvFilterInput order: [HannasTSInvSortInput!]): HannasTSInvConnection
  hannasTSInvChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInvFilterInput order: [HannasTSInvSortInput!]): HannasTSInvConnection
  hannasTSInvHistory(first: Int after: String last: Int before: String where: HannasTSInvHistoryHistoryFilterInput order: [HannasTSInvHistoryHistorySortInput!]): HannasTSInvHistoryConnection
  hannasTSInvent(first: Int after: String last: Int before: String where: HannasTSInventFilterInput order: [HannasTSInventSortInput!]): HannasTSInventConnection
  hannasTSInventChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInventFilterInput order: [HannasTSInventSortInput!]): HannasTSInventConnection
  hannasTSInventHistory(first: Int after: String last: Int before: String where: HannasTSInventHistoryHistoryFilterInput order: [HannasTSInventHistoryHistorySortInput!]): HannasTSInventHistoryConnection
  hannasTSInven(first: Int after: String last: Int before: String where: HannasTSInvenFilterInput order: [HannasTSInvenSortInput!]): HannasTSInvenConnection
  hannasTSInvenChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInvenFilterInput order: [HannasTSInvenSortInput!]): HannasTSInvenConnection
  hannasTSInvenHistory(first: Int after: String last: Int before: String where: HannasTSInvenHistoryHistoryFilterInput order: [HannasTSInvenHistoryHistorySortInput!]): HannasTSInvenHistoryConnection
  hannasTSInvento(first: Int after: String last: Int before: String where: HannasTSInventoFilterInput order: [HannasTSInventoSortInput!]): HannasTSInventoConnection
  hannasTSInventoChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInventoFilterInput order: [HannasTSInventoSortInput!]): HannasTSInventoConnection
  hannasTSInventoHistory(first: Int after: String last: Int before: String where: HannasTSInventoHistoryHistoryFilterInput order: [HannasTSInventoHistoryHistorySortInput!]): HannasTSInventoHistoryConnection
  hannasTSInventory1(first: Int after: String last: Int before: String where: HannasTSInventory1FilterInput order: [HannasTSInventory1SortInput!]): HannasTSInventory1Connection
  hannasTSInventory1ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInventory1FilterInput order: [HannasTSInventory1SortInput!]): HannasTSInventory1Connection
  hannasTSInventory1History(first: Int after: String last: Int before: String where: HannasTSInventory1HistoryHistoryFilterInput order: [HannasTSInventory1HistoryHistorySortInput!]): HannasTSInventory1HistoryConnection
  hannasTSInventoryWithoutName1(first: Int after: String last: Int before: String where: HannasTSInventoryWithoutName1FilterInput order: [HannasTSInventoryWithoutName1SortInput!]): HannasTSInventoryWithoutName1Connection
  hannasTSInventoryWithoutName1ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTSInventoryWithoutName1FilterInput order: [HannasTSInventoryWithoutName1SortInput!]): HannasTSInventoryWithoutName1Connection
  hannasTSInventoryWithoutName1History(first: Int after: String last: Int before: String where: HannasTSInventoryWithoutName1HistoryHistoryFilterInput order: [HannasTSInventoryWithoutName1HistoryHistorySortInput!]): HannasTSInventoryWithoutName1HistoryConnection
  hannasInventoryWithPropertyName(first: Int after: String last: Int before: String where: HannasInventoryWithPropertyNameFilterInput order: [HannasInventoryWithPropertyNameSortInput!]): HannasInventoryWithPropertyNameConnection
  hannasInventoryWithPropertyNameChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasInventoryWithPropertyNameFilterInput order: [HannasInventoryWithPropertyNameSortInput!]): HannasInventoryWithPropertyNameConnection
  hannasInventoryWithPropertyNameHistory(first: Int after: String last: Int before: String where: HannasInventoryWithPropertyNameHistoryHistoryFilterInput order: [HannasInventoryWithPropertyNameHistoryHistorySortInput!]): HannasInventoryWithPropertyNameHistoryConnection
  hannasInventory(first: Int after: String last: Int before: String where: HannasInventoryFilterInput order: [HannasInventorySortInput!]): HannasInventoryConnection
  hannasInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasInventoryFilterInput order: [HannasInventorySortInput!]): HannasInventoryConnection
  hannasInventoryHistory(first: Int after: String last: Int before: String where: HannasInventoryHistoryHistoryFilterInput order: [HannasInventoryHistoryHistorySortInput!]): HannasInventoryHistoryConnection
  inventoryToUpdate(first: Int after: String last: Int before: String where: InventoryToUpdateFilterInput order: [InventoryToUpdateSortInput!]): InventoryToUpdateConnection
  inventoryToUpdateChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryToUpdateFilterInput order: [InventoryToUpdateSortInput!]): InventoryToUpdateConnection
  inventoryToUpdateHistory(first: Int after: String last: Int before: String where: InventoryToUpdateHistoryHistoryFilterInput order: [InventoryToUpdateHistoryHistorySortInput!]): InventoryToUpdateHistoryConnection
  inventoryToDelete(first: Int after: String last: Int before: String where: InventoryToDeleteFilterInput order: [InventoryToDeleteSortInput!]): InventoryToDeleteConnection
  inventoryToDeleteChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryToDeleteFilterInput order: [InventoryToDeleteSortInput!]): InventoryToDeleteConnection
  inventoryToDeleteHistory(first: Int after: String last: Int before: String where: InventoryToDeleteHistoryHistoryFilterInput order: [InventoryToDeleteHistoryHistorySortInput!]): InventoryToDeleteHistoryConnection
  inventoryToTest(first: Int after: String last: Int before: String where: InventoryToTestFilterInput order: [InventoryToTestSortInput!]): InventoryToTestConnection
  inventoryToTestChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryToTestFilterInput order: [InventoryToTestSortInput!]): InventoryToTestConnection
  inventoryToTestHistory(first: Int after: String last: Int before: String where: InventoryToTestHistoryHistoryFilterInput order: [InventoryToTestHistoryHistorySortInput!]): InventoryToTestHistoryConnection
  inventoryToTest2(first: Int after: String last: Int before: String where: InventoryToTest2FilterInput order: [InventoryToTest2SortInput!]): InventoryToTest2Connection
  inventoryToTest2ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryToTest2FilterInput order: [InventoryToTest2SortInput!]): InventoryToTest2Connection
  inventoryToTest2History(first: Int after: String last: Int before: String where: InventoryToTest2HistoryHistoryFilterInput order: [InventoryToTest2HistoryHistorySortInput!]): InventoryToTest2HistoryConnection
  inventoryPropTypes3(first: Int after: String last: Int before: String where: InventoryPropTypes3FilterInput order: [InventoryPropTypes3SortInput!]): InventoryPropTypes3Connection
  inventoryPropTypes3ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryPropTypes3FilterInput order: [InventoryPropTypes3SortInput!]): InventoryPropTypes3Connection
  inventoryPropTypes3History(first: Int after: String last: Int before: String where: InventoryPropTypes3HistoryHistoryFilterInput order: [InventoryPropTypes3HistoryHistorySortInput!]): InventoryPropTypes3HistoryConnection
  inventoryPropTypesWithListTypeTrue(first: Int after: String last: Int before: String where: InventoryPropTypesWithListTypeTrueFilterInput order: [InventoryPropTypesWithListTypeTrueSortInput!]): InventoryPropTypesWithListTypeTrueConnection
  inventoryPropTypesWithListTypeTrueChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryPropTypesWithListTypeTrueFilterInput order: [InventoryPropTypesWithListTypeTrueSortInput!]): InventoryPropTypesWithListTypeTrueConnection
  inventoryPropTypesWithListTypeTrueHistory(first: Int after: String last: Int before: String where: InventoryPropTypesWithListTypeTrueHistoryHistoryFilterInput order: [InventoryPropTypesWithListTypeTrueHistoryHistorySortInput!]): InventoryPropTypesWithListTypeTrueHistoryConnection
  inventoryPropTypesWithListTypeTrueBool(first: Int after: String last: Int before: String where: InventoryPropTypesWithListTypeTrueBoolFilterInput order: [InventoryPropTypesWithListTypeTrueBoolSortInput!]): InventoryPropTypesWithListTypeTrueBoolConnection
  inventoryPropTypesWithListTypeTrueBoolChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryPropTypesWithListTypeTrueBoolFilterInput order: [InventoryPropTypesWithListTypeTrueBoolSortInput!]): InventoryPropTypesWithListTypeTrueBoolConnection
  inventoryPropTypesWithListTypeTrueBoolHistory(first: Int after: String last: Int before: String where: InventoryPropTypesWithListTypeTrueBoolHistoryHistoryFilterInput order: [InventoryPropTypesWithListTypeTrueBoolHistoryHistorySortInput!]): InventoryPropTypesWithListTypeTrueBoolHistoryConnection
  referencedInventory(first: Int after: String last: Int before: String where: ReferencedInventoryFilterInput order: [ReferencedInventorySortInput!]): ReferencedInventoryConnection
  referencedInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: ReferencedInventoryFilterInput order: [ReferencedInventorySortInput!]): ReferencedInventoryConnection
  referencedInventoryHistory(first: Int after: String last: Int before: String where: ReferencedInventoryHistoryHistoryFilterInput order: [ReferencedInventoryHistoryHistorySortInput!]): ReferencedInventoryHistoryConnection
  inventoryPropReferenced(first: Int after: String last: Int before: String where: InventoryPropReferencedFilterInput order: [InventoryPropReferencedSortInput!]): InventoryPropReferencedConnection
  inventoryPropReferencedChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryPropReferencedFilterInput order: [InventoryPropReferencedSortInput!]): InventoryPropReferencedConnection
  inventoryPropReferencedHistory(first: Int after: String last: Int before: String where: InventoryPropReferencedHistoryHistoryFilterInput order: [InventoryPropReferencedHistoryHistorySortInput!]): InventoryPropReferencedHistoryConnection
  updatedInventory(first: Int after: String last: Int before: String where: UpdatedInventoryFilterInput order: [UpdatedInventorySortInput!]): UpdatedInventoryConnection
  updatedInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: UpdatedInventoryFilterInput order: [UpdatedInventorySortInput!]): UpdatedInventoryConnection
  updatedInventoryHistory(first: Int after: String last: Int before: String where: UpdatedInventoryHistoryHistoryFilterInput order: [UpdatedInventoryHistoryHistorySortInput!]): UpdatedInventoryHistoryConnection
  invTest(first: Int after: String last: Int before: String where: InvTestFilterInput order: [InvTestSortInput!]): InvTestConnection
  invTestChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InvTestFilterInput order: [InvTestSortInput!]): InvTestConnection
  invTestHistory(first: Int after: String last: Int before: String where: InvTestHistoryHistoryFilterInput order: [InvTestHistoryHistorySortInput!]): InvTestHistoryConnection
  invTest2(first: Int after: String last: Int before: String where: InvTest2FilterInput order: [InvTest2SortInput!]): InvTest2Connection
  invTest2ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InvTest2FilterInput order: [InvTest2SortInput!]): InvTest2Connection
  invTest2History(first: Int after: String last: Int before: String where: InvTest2HistoryHistoryFilterInput order: [InvTest2HistoryHistorySortInput!]): InvTest2HistoryConnection
  invTest3(first: Int after: String last: Int before: String where: InvTest3FilterInput order: [InvTest3SortInput!]): InvTest3Connection
  invTest3ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InvTest3FilterInput order: [InvTest3SortInput!]): InvTest3Connection
  invTest3History(first: Int after: String last: Int before: String where: InvTest3HistoryHistoryFilterInput order: [InvTest3HistoryHistorySortInput!]): InvTest3HistoryConnection
  inventoryRemovePropsTimeSeries(first: Int after: String last: Int before: String where: InventoryRemovePropsTimeSeriesFilterInput order: [InventoryRemovePropsTimeSeriesSortInput!]): InventoryRemovePropsTimeSeriesConnection
  inventoryRemovePropsTimeSeriesChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventoryRemovePropsTimeSeriesFilterInput order: [InventoryRemovePropsTimeSeriesSortInput!]): InventoryRemovePropsTimeSeriesConnection
  inventoryRemovePropsTimeSeriesHistory(first: Int after: String last: Int before: String where: InventoryRemovePropsTimeSeriesHistoryHistoryFilterInput order: [InventoryRemovePropsTimeSeriesHistoryHistorySortInput!]): InventoryRemovePropsTimeSeriesHistoryConnection
  inventorySetData(first: Int after: String last: Int before: String where: InventorySetDataFilterInput order: [InventorySetDataSortInput!]): InventorySetDataConnection
  inventorySetDataChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: InventorySetDataFilterInput order: [InventorySetDataSortInput!]): InventorySetDataConnection
  inventorySetDataHistory(first: Int after: String last: Int before: String where: InventorySetDataHistoryHistoryFilterInput order: [InventorySetDataHistoryHistorySortInput!]): InventorySetDataHistoryConnection
  pythonTimeseriesTest(first: Int after: String last: Int before: String where: PythonTimeseriesTestFilterInput order: [PythonTimeseriesTestSortInput!]): PythonTimeseriesTestConnection
  pythonTimeseriesTestChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PythonTimeseriesTestFilterInput order: [PythonTimeseriesTestSortInput!]): PythonTimeseriesTestConnection
  pythonTimeseriesTestHistory(first: Int after: String last: Int before: String where: PythonTimeseriesTestHistoryHistoryFilterInput order: [PythonTimeseriesTestHistoryHistorySortInput!]): PythonTimeseriesTestHistoryConnection
  hannasQueryTestInventory(first: Int after: String last: Int before: String where: HannasQueryTestInventoryFilterInput order: [HannasQueryTestInventorySortInput!]): HannasQueryTestInventoryConnection
  hannasQueryTestInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasQueryTestInventoryFilterInput order: [HannasQueryTestInventorySortInput!]): HannasQueryTestInventoryConnection
  hannasQueryTestInventoryHistory(first: Int after: String last: Int before: String where: HannasQueryTestInventoryHistoryHistoryFilterInput order: [HannasQueryTestInventoryHistoryHistorySortInput!]): HannasQueryTestInventoryHistoryConnection
  pythonTimeseriesTTNTest(first: Int after: String last: Int before: String where: PythonTimeseriesTTNTestFilterInput order: [PythonTimeseriesTTNTestSortInput!]): PythonTimeseriesTTNTestConnection
  pythonTimeseriesTTNTestChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PythonTimeseriesTTNTestFilterInput order: [PythonTimeseriesTTNTestSortInput!]): PythonTimeseriesTTNTestConnection
  pythonTimeseriesTTNTestHistory(first: Int after: String last: Int before: String where: PythonTimeseriesTTNTestHistoryHistoryFilterInput order: [PythonTimeseriesTTNTestHistoryHistorySortInput!]): PythonTimeseriesTTNTestHistoryConnection
  hannasTestUpdateInventory(first: Int after: String last: Int before: String where: HannasTestUpdateInventoryFilterInput order: [HannasTestUpdateInventorySortInput!]): HannasTestUpdateInventoryConnection
  hannasTestUpdateInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTestUpdateInventoryFilterInput order: [HannasTestUpdateInventorySortInput!]): HannasTestUpdateInventoryConnection
  hannasTestUpdateInventoryHistory(first: Int after: String last: Int before: String where: HannasTestUpdateInventoryHistoryHistoryFilterInput order: [HannasTestUpdateInventoryHistoryHistorySortInput!]): HannasTestUpdateInventoryHistoryConnection
  hannasUpdatedInventar(first: Int after: String last: Int before: String where: HannasUpdatedInventarFilterInput order: [HannasUpdatedInventarSortInput!]): HannasUpdatedInventarConnection
  hannasUpdatedInventarChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasUpdatedInventarFilterInput order: [HannasUpdatedInventarSortInput!]): HannasUpdatedInventarConnection
  hannasUpdatedInventarHistory(first: Int after: String last: Int before: String where: HannasUpdatedInventarHistoryHistoryFilterInput order: [HannasUpdatedInventarHistoryHistorySortInput!]): HannasUpdatedInventarHistoryConnection
  hannasTestValueTypeInventar(first: Int after: String last: Int before: String where: HannasTestValueTypeInventarFilterInput order: [HannasTestValueTypeInventarSortInput!]): HannasTestValueTypeInventarConnection
  hannasTestValueTypeInventarChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasTestValueTypeInventarFilterInput order: [HannasTestValueTypeInventarSortInput!]): HannasTestValueTypeInventarConnection
  hannasTestValueTypeInventarHistory(first: Int after: String last: Int before: String where: HannasTestValueTypeInventarHistoryHistoryFilterInput order: [HannasTestValueTypeInventarHistoryHistorySortInput!]): HannasTestValueTypeInventarHistoryConnection
  hannasInventoryCreate(first: Int after: String last: Int before: String where: HannasInventoryCreateFilterInput order: [HannasInventoryCreateSortInput!]): HannasInventoryCreateConnection
  hannasInventoryCreateChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasInventoryCreateFilterInput order: [HannasInventoryCreateSortInput!]): HannasInventoryCreateConnection
  hannasInventoryCreateHistory(first: Int after: String last: Int before: String where: HannasInventoryCreateHistoryHistoryFilterInput order: [HannasInventoryCreateHistoryHistorySortInput!]): HannasInventoryCreateHistoryConnection
  hannasInventoryCreate2(first: Int after: String last: Int before: String where: HannasInventoryCreate2FilterInput order: [HannasInventoryCreate2SortInput!]): HannasInventoryCreate2Connection
  hannasInventoryCreate2ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: HannasInventoryCreate2FilterInput order: [HannasInventoryCreate2SortInput!]): HannasInventoryCreate2Connection
  hannasInventoryCreate2History(first: Int after: String last: Int before: String where: HannasInventoryCreate2HistoryHistoryFilterInput order: [HannasInventoryCreate2HistoryHistorySortInput!]): HannasInventoryCreate2HistoryConnection
  meterData(first: Int after: String last: Int before: String where: MeterDataFilterInput order: [MeterDataSortInput!]): MeterDataConnection
  meterDataChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: MeterDataFilterInput order: [MeterDataSortInput!]): MeterDataConnection
  meterDataHistory(first: Int after: String last: Int before: String where: MeterDataHistoryHistoryFilterInput order: [MeterDataHistoryHistorySortInput!]): MeterDataHistoryConnection
  meterData1(first: Int after: String last: Int before: String where: MeterData1FilterInput order: [MeterData1SortInput!]): MeterData1Connection
  meterData1ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: MeterData1FilterInput order: [MeterData1SortInput!]): MeterData1Connection
  meterData1History(first: Int after: String last: Int before: String where: MeterData1HistoryHistoryFilterInput order: [MeterData1HistoryHistorySortInput!]): MeterData1HistoryConnection
  marktdaten(first: Int after: String last: Int before: String where: MarktdatenFilterInput order: [MarktdatenSortInput!]): MarktdatenConnection
  marktdatenChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: MarktdatenFilterInput order: [MarktdatenSortInput!]): MarktdatenConnection
  marktdatenHistory(first: Int after: String last: Int before: String where: MarktdatenHistoryHistoryFilterInput order: [MarktdatenHistoryHistorySortInput!]): MarktdatenHistoryConnection
  concreteTimeSeriesInventory(first: Int after: String last: Int before: String where: ConcreteTimeSeriesInventoryFilterInput order: [ConcreteTimeSeriesInventorySortInput!]): ConcreteTimeSeriesInventoryConnection
  concreteTimeSeriesInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: ConcreteTimeSeriesInventoryFilterInput order: [ConcreteTimeSeriesInventorySortInput!]): ConcreteTimeSeriesInventoryConnection
  concreteTimeSeriesInventoryHistory(first: Int after: String last: Int before: String where: ConcreteTimeSeriesInventoryHistoryHistoryFilterInput order: [ConcreteTimeSeriesInventoryHistoryHistorySortInput!]): ConcreteTimeSeriesInventoryHistoryConnection
  tSInv(first: Int after: String last: Int before: String where: TSInvFilterInput order: [TSInvSortInput!]): TSInvConnection
  tSInvChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TSInvFilterInput order: [TSInvSortInput!]): TSInvConnection
  tSInvHistory(first: Int after: String last: Int before: String where: TSInvHistoryHistoryFilterInput order: [TSInvHistoryHistorySortInput!]): TSInvHistoryConnection
  testSelectionListTimeSeriesInventory(first: Int after: String last: Int before: String where: TestSelectionListTimeSeriesInventoryFilterInput order: [TestSelectionListTimeSeriesInventorySortInput!]): TestSelectionListTimeSeriesInventoryConnection
  testSelectionListTimeSeriesInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TestSelectionListTimeSeriesInventoryFilterInput order: [TestSelectionListTimeSeriesInventorySortInput!]): TestSelectionListTimeSeriesInventoryConnection
  testSelectionListTimeSeriesInventoryHistory(first: Int after: String last: Int before: String where: TestSelectionListTimeSeriesInventoryHistoryHistoryFilterInput order: [TestSelectionListTimeSeriesInventoryHistoryHistorySortInput!]): TestSelectionListTimeSeriesInventoryHistoryConnection
  tSInventory(first: Int after: String last: Int before: String where: TSInventoryFilterInput order: [TSInventorySortInput!]): TSInventoryConnection
  tSInventoryChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TSInventoryFilterInput order: [TSInventorySortInput!]): TSInventoryConnection
  tSInventoryHistory(first: Int after: String last: Int before: String where: TSInventoryHistoryHistoryFilterInput order: [TSInventoryHistoryHistorySortInput!]): TSInventoryHistoryConnection
  timeSeries11(first: Int after: String last: Int before: String where: TimeSeries11FilterInput order: [TimeSeries11SortInput!]): TimeSeries11Connection
  timeSeries11ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TimeSeries11FilterInput order: [TimeSeries11SortInput!]): TimeSeries11Connection
  timeSeries11History(first: Int after: String last: Int before: String where: TimeSeries11HistoryHistoryFilterInput order: [TimeSeries11HistoryHistorySortInput!]): TimeSeries11HistoryConnection
  timeSeriesJuergen(first: Int after: String last: Int before: String where: TimeSeriesJuergenFilterInput order: [TimeSeriesJuergenSortInput!]): TimeSeriesJuergenConnection
  timeSeriesJuergenChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: TimeSeriesJuergenFilterInput order: [TimeSeriesJuergenSortInput!]): TimeSeriesJuergenConnection
  timeSeriesJuergenHistory(first: Int after: String last: Int before: String where: TimeSeriesJuergenHistoryHistoryFilterInput order: [TimeSeriesJuergenHistoryHistorySortInput!]): TimeSeriesJuergenHistoryConnection
  pythonTimeseriesGroupTest(first: Int after: String last: Int before: String where: PythonTimeseriesGroupTestFilterInput order: [PythonTimeseriesGroupTestSortInput!]): PythonTimeseriesGroupTestConnection
  pythonTimeseriesGroupTestChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: PythonTimeseriesGroupTestFilterInput order: [PythonTimeseriesGroupTestSortInput!]): PythonTimeseriesGroupTestConnection
  pythonTimeseriesGroupTestHistory(first: Int after: String last: Int before: String where: PythonTimeseriesGroupTestHistoryHistoryFilterInput order: [PythonTimeseriesGroupTestHistoryHistorySortInput!]): PythonTimeseriesGroupTestHistoryConnection
  groups(first: Int after: String last: Int before: String where: GroupsFilterInput order: [GroupsSortInput!]): GroupsConnection
  groupsChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: GroupsFilterInput order: [GroupsSortInput!]): GroupsConnection
  groupsHistory(first: Int after: String last: Int before: String where: GroupsHistoryHistoryFilterInput order: [GroupsHistoryHistorySortInput!]): GroupsHistoryConnection
  groups1(first: Int after: String last: Int before: String where: Groups1FilterInput order: [Groups1SortInput!]): Groups1Connection
  groups1ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: Groups1FilterInput order: [Groups1SortInput!]): Groups1Connection
  groups1History(first: Int after: String last: Int before: String where: Groups1HistoryHistoryFilterInput order: [Groups1HistoryHistorySortInput!]): Groups1HistoryConnection
  groups22(first: Int after: String last: Int before: String where: Groups22FilterInput order: [Groups22SortInput!]): Groups22Connection
  groups22ChangeFeed(from: DateTime! first: Int after: String last: Int before: String where: Groups22FilterInput order: [Groups22SortInput!]): Groups22Connection
  groups22History(first: Int after: String last: Int before: String where: Groups22HistoryHistoryFilterInput order: [Groups22HistoryHistorySortInput!]): Groups22HistoryConnection
}

type Mutation {
  meta(endpoint: String): GraphQlMetaMutationType!
  restartService: String
  addRelation(fieldPath: String! name: String! topLevelField: String! condition: String! variables: [VariableWithPlaceholderInput!]! nestingLevel: Int! = 3 listNestingLevel: Int! = 1): AddRelationResult!
  removeRelation(fieldPath: String! name: String!): RemoveRelationResult!
  createDynamicInventory(input: CreateDynamicInventoryInput!): CreateDynamicInventoryPayload!
  updateDynamicInventory(input: UpdateDynamicInventoryInput!): UpdateDynamicInventoryPayload!
  deleteDynamicInventory(input: DeleteDynamicInventoryInput!): DeleteDynamicInventoryPayload!
  addPropertyDefinitions(input: AddPropertyDefinitionsInput!): AddPropertyDefinitionsPayload!
  removePropertyDefinitions(input: RemovePropertyDefinitionsInput!): RemovePropertyDefinitionsPayload!
  createSelectionList(input: CreateSelectionListInput!): CreateSelectionListPayload!
  updateSelectionList(input: UpdateSelectionListInput!): UpdateSelectionListPayload!
  deleteSelectionList(input: DeleteSelectionListInput!): DeleteSelectionListPayload!
  addSelectionItems(input: AddSelectionItemsInput!): AddSelectionItemsPayload!
  removeSelectionItems(input: RemoveSelectionItemsInput!): RemoveSelectionItemsPayload!
  setTimeSeriesData(input: SetTimeSeriesDataInput!): SetTimeSeriesDataPayload!
  createUnit(input: CreateUnitInput!): CreateUnitPayload!
  deleteUnit(input: DeleteUnitInput!): DeleteUnitPayload!
  createSub0Default(input: [CreateSub0DefaultInput!]!): CreateSub0DefaultPayload!
  updateSub0Default(input: [UpdateSub0DefaultInput!]!): UpdateSub0DefaultPayload!
  upsertSub0Default(input: [UpsertSub0DefaultInput!]!): UpsertSub0DefaultPayload!
  deleteSub0Default(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createSub0DefaultTopic(input: CreateSub0DefaultTopicInput!): CreateSub0DefaultTopicPayload!
  updateSub0DefaultTopic(input: UpdateSub0DefaultTopicInput!): UpdateSub0DefaultTopicPayload!
  deleteSub0DefaultTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createHannasInventoryWithProperties(input: [CreateHannasInventoryWithPropertiesInput!]!): CreateHannasInventoryWithPropertiesPayload!
  updateHannasInventoryWithProperties(input: [UpdateHannasInventoryWithPropertiesInput!]!): UpdateHannasInventoryWithPropertiesPayload!
  upsertHannasInventoryWithProperties(input: [UpsertHannasInventoryWithPropertiesInput!]!): UpsertHannasInventoryWithPropertiesPayload!
  deleteHannasInventoryWithProperties(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasInventoryWithPropertiesTopic(input: CreateHannasInventoryWithPropertiesTopicInput!): CreateHannasInventoryWithPropertiesTopicPayload!
  updateHannasInventoryWithPropertiesTopic(input: UpdateHannasInventoryWithPropertiesTopicInput!): UpdateHannasInventoryWithPropertiesTopicPayload!
  deleteHannasInventoryWithPropertiesTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createWohnung(input: [CreateWohnungInput!]!): CreateWohnungPayload!
  updateWohnung(input: [UpdateWohnungInput!]!): UpdateWohnungPayload!
  upsertWohnung(input: [UpsertWohnungInput!]!): UpsertWohnungPayload!
  deleteWohnung(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createWohnungTopic(input: CreateWohnungTopicInput!): CreateWohnungTopicPayload!
  updateWohnungTopic(input: UpdateWohnungTopicInput!): UpdateWohnungTopicPayload!
  deleteWohnungTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createInventoryRemoveProps(input: [CreateInventoryRemovePropsInput!]!): CreateInventoryRemovePropsPayload!
  updateInventoryRemoveProps(input: [UpdateInventoryRemovePropsInput!]!): UpdateInventoryRemovePropsPayload!
  upsertInventoryRemoveProps(input: [UpsertInventoryRemovePropsInput!]!): UpsertInventoryRemovePropsPayload!
  deleteInventoryRemoveProps(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryRemovePropsTopic(input: CreateInventoryRemovePropsTopicInput!): CreateInventoryRemovePropsTopicPayload!
  updateInventoryRemovePropsTopic(input: UpdateInventoryRemovePropsTopicInput!): UpdateInventoryRemovePropsTopicPayload!
  deleteInventoryRemovePropsTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createEmTestF(input: [CreateEmTestFInput!]!): CreateEmTestFPayload!
  updateEmTestF(input: [UpdateEmTestFInput!]!): UpdateEmTestFPayload!
  upsertEmTestF(input: [UpsertEmTestFInput!]!): UpsertEmTestFPayload!
  deleteEmTestF(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createEmTestFTopic(input: CreateEmTestFTopicInput!): CreateEmTestFTopicPayload!
  updateEmTestFTopic(input: UpdateEmTestFTopicInput!): UpdateEmTestFTopicPayload!
  deleteEmTestFTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createEmTest1F(input: [CreateEmTest1FInput!]!): CreateEmTest1FPayload!
  updateEmTest1F(input: [UpdateEmTest1FInput!]!): UpdateEmTest1FPayload!
  upsertEmTest1F(input: [UpsertEmTest1FInput!]!): UpsertEmTest1FPayload!
  deleteEmTest1F(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createEmTest1FTopic(input: CreateEmTest1FTopicInput!): CreateEmTest1FTopicPayload!
  updateEmTest1FTopic(input: UpdateEmTest1FTopicInput!): UpdateEmTest1FTopicPayload!
  deleteEmTest1FTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createEmTest4F(input: [CreateEmTest4FInput!]!): CreateEmTest4FPayload!
  updateEmTest4F(input: [UpdateEmTest4FInput!]!): UpdateEmTest4FPayload!
  upsertEmTest4F(input: [UpsertEmTest4FInput!]!): UpsertEmTest4FPayload!
  deleteEmTest4F(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createEmTest4FTopic(input: CreateEmTest4FTopicInput!): CreateEmTest4FTopicPayload!
  updateEmTest4FTopic(input: UpdateEmTest4FTopicInput!): UpdateEmTest4FTopicPayload!
  deleteEmTest4FTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createInputClearingPositionTransaction(input: [CreateInputClearingPositionTransactionInput!]!): CreateInputClearingPositionTransactionPayload!
  updateInputClearingPositionTransaction(input: [UpdateInputClearingPositionTransactionInput!]!): UpdateInputClearingPositionTransactionPayload!
  upsertInputClearingPositionTransaction(input: [UpsertInputClearingPositionTransactionInput!]!): UpsertInputClearingPositionTransactionPayload!
  deleteInputClearingPositionTransaction(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInputClearingPositionTransactionTopic(input: CreateInputClearingPositionTransactionTopicInput!): CreateInputClearingPositionTransactionTopicPayload!
  updateInputClearingPositionTransactionTopic(input: UpdateInputClearingPositionTransactionTopicInput!): UpdateInputClearingPositionTransactionTopicPayload!
  deleteInputClearingPositionTransactionTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createInputTransitionTransaction(input: [CreateInputTransitionTransactionInput!]!): CreateInputTransitionTransactionPayload!
  updateInputTransitionTransaction(input: [UpdateInputTransitionTransactionInput!]!): UpdateInputTransitionTransactionPayload!
  upsertInputTransitionTransaction(input: [UpsertInputTransitionTransactionInput!]!): UpsertInputTransitionTransactionPayload!
  deleteInputTransitionTransaction(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInputTransitionTransactionTopic(input: CreateInputTransitionTransactionTopicInput!): CreateInputTransitionTransactionTopicPayload!
  updateInputTransitionTransactionTopic(input: UpdateInputTransitionTransactionTopicInput!): UpdateInputTransitionTransactionTopicPayload!
  deleteInputTransitionTransactionTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createInputTrade(input: [CreateInputTradeInput!]!): CreateInputTradePayload!
  updateInputTrade(input: [UpdateInputTradeInput!]!): UpdateInputTradePayload!
  upsertInputTrade(input: [UpsertInputTradeInput!]!): UpsertInputTradePayload!
  deleteInputTrade(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInputTradeTopic(input: CreateInputTradeTopicInput!): CreateInputTradeTopicPayload!
  updateInputTradeTopic(input: UpdateInputTradeTopicInput!): UpdateInputTradeTopicPayload!
  deleteInputTradeTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createRemitTrade(input: [CreateRemitTradeInput!]!): CreateRemitTradePayload!
  updateRemitTrade(input: [UpdateRemitTradeInput!]!): UpdateRemitTradePayload!
  upsertRemitTrade(input: [UpsertRemitTradeInput!]!): UpsertRemitTradePayload!
  deleteRemitTrade(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createRemitTradeTopic(input: CreateRemitTradeTopicInput!): CreateRemitTradeTopicPayload!
  updateRemitTradeTopic(input: UpdateRemitTradeTopicInput!): UpdateRemitTradeTopicPayload!
  deleteRemitTradeTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createInternalDataSource(input: [CreateInternalDataSourceInput!]!): CreateInternalDataSourcePayload!
  updateInternalDataSource(input: [UpdateInternalDataSourceInput!]!): UpdateInternalDataSourcePayload!
  upsertInternalDataSource(input: [UpsertInternalDataSourceInput!]!): UpsertInternalDataSourcePayload!
  deleteInternalDataSource(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInternalDataSourceTopic(input: CreateInternalDataSourceTopicInput!): CreateInternalDataSourceTopicPayload!
  updateInternalDataSourceTopic(input: UpdateInternalDataSourceTopicInput!): UpdateInternalDataSourceTopicPayload!
  deleteInternalDataSourceTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createFlats(input: [CreateFlatsInput!]!): CreateFlatsPayload!
  updateFlats(input: [UpdateFlatsInput!]!): UpdateFlatsPayload!
  upsertFlats(input: [UpsertFlatsInput!]!): UpsertFlatsPayload!
  deleteFlats(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createFlatsTopic(input: CreateFlatsTopicInput!): CreateFlatsTopicPayload!
  updateFlatsTopic(input: UpdateFlatsTopicInput!): UpdateFlatsTopicPayload!
  deleteFlatsTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTest_delete(input: [CreateTest_deleteInput!]!): CreateTest_deletePayload!
  updateTest_delete(input: [UpdateTest_deleteInput!]!): UpdateTest_deletePayload!
  upsertTest_delete(input: [UpsertTest_deleteInput!]!): UpsertTest_deletePayload!
  deleteTest_delete(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTest_deleteTopic(input: CreateTest_deleteTopicInput!): CreateTest_deleteTopicPayload!
  updateTest_deleteTopic(input: UpdateTest_deleteTopicInput!): UpdateTest_deleteTopicPayload!
  deleteTest_deleteTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTest_delete2(input: [CreateTest_delete2Input!]!): CreateTest_delete2Payload!
  updateTest_delete2(input: [UpdateTest_delete2Input!]!): UpdateTest_delete2Payload!
  upsertTest_delete2(input: [UpsertTest_delete2Input!]!): UpsertTest_delete2Payload!
  deleteTest_delete2(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTest_delete2Topic(input: CreateTest_delete2TopicInput!): CreateTest_delete2TopicPayload!
  updateTest_delete2Topic(input: UpdateTest_delete2TopicInput!): UpdateTest_delete2TopicPayload!
  deleteTest_delete2Topic(input: DeleteTopicInput!): DeleteTopicPayload!
  createPropertyTest(input: [CreatePropertyTestInput!]!): CreatePropertyTestPayload!
  updatePropertyTest(input: [UpdatePropertyTestInput!]!): UpdatePropertyTestPayload!
  upsertPropertyTest(input: [UpsertPropertyTestInput!]!): UpsertPropertyTestPayload!
  deletePropertyTest(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPropertyTestTopic(input: CreatePropertyTestTopicInput!): CreatePropertyTestTopicPayload!
  updatePropertyTestTopic(input: UpdatePropertyTestTopicInput!): UpdatePropertyTestTopicPayload!
  deletePropertyTestTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createPropertyTest2(input: [CreatePropertyTest2Input!]!): CreatePropertyTest2Payload!
  updatePropertyTest2(input: [UpdatePropertyTest2Input!]!): UpdatePropertyTest2Payload!
  upsertPropertyTest2(input: [UpsertPropertyTest2Input!]!): UpsertPropertyTest2Payload!
  deletePropertyTest2(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPropertyTest2Topic(input: CreatePropertyTest2TopicInput!): CreatePropertyTest2TopicPayload!
  updatePropertyTest2Topic(input: UpdatePropertyTest2TopicInput!): UpdatePropertyTest2TopicPayload!
  deletePropertyTest2Topic(input: DeleteTopicInput!): DeleteTopicPayload!
  createPropertyTest3(input: [CreatePropertyTest3Input!]!): CreatePropertyTest3Payload!
  updatePropertyTest3(input: [UpdatePropertyTest3Input!]!): UpdatePropertyTest3Payload!
  upsertPropertyTest3(input: [UpsertPropertyTest3Input!]!): UpsertPropertyTest3Payload!
  deletePropertyTest3(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPropertyTest3Topic(input: CreatePropertyTest3TopicInput!): CreatePropertyTest3TopicPayload!
  updatePropertyTest3Topic(input: UpdatePropertyTest3TopicInput!): UpdatePropertyTest3TopicPayload!
  deletePropertyTest3Topic(input: DeleteTopicInput!): DeleteTopicPayload!
  createPropertyTest4(input: [CreatePropertyTest4Input!]!): CreatePropertyTest4Payload!
  updatePropertyTest4(input: [UpdatePropertyTest4Input!]!): UpdatePropertyTest4Payload!
  upsertPropertyTest4(input: [UpsertPropertyTest4Input!]!): UpsertPropertyTest4Payload!
  deletePropertyTest4(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPropertyTest4Topic(input: CreatePropertyTest4TopicInput!): CreatePropertyTest4TopicPayload!
  updatePropertyTest4Topic(input: UpdatePropertyTest4TopicInput!): UpdatePropertyTest4TopicPayload!
  deletePropertyTest4Topic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTestHanna(input: [CreateTestHannaInput!]!): CreateTestHannaPayload!
  updateTestHanna(input: [UpdateTestHannaInput!]!): UpdateTestHannaPayload!
  upsertTestHanna(input: [UpsertTestHannaInput!]!): UpsertTestHannaPayload!
  deleteTestHanna(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTestHannaTopic(input: CreateTestHannaTopicInput!): CreateTestHannaTopicPayload!
  updateTestHannaTopic(input: UpdateTestHannaTopicInput!): UpdateTestHannaTopicPayload!
  deleteTestHannaTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTestSelectionList(input: [CreateTestSelectionListInput!]!): CreateTestSelectionListPayload!
  updateTestSelectionList(input: [UpdateTestSelectionListInput!]!): UpdateTestSelectionListPayload!
  upsertTestSelectionList(input: [UpsertTestSelectionListInput!]!): UpsertTestSelectionListPayload!
  deleteTestSelectionList(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTestSelectionListTopic(input: CreateTestSelectionListTopicInput!): CreateTestSelectionListTopicPayload!
  updateTestSelectionListTopic(input: UpdateTestSelectionListTopicInput!): UpdateTestSelectionListTopicPayload!
  deleteTestSelectionListTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTestSelectionListAgain(input: [CreateTestSelectionListAgainInput!]!): CreateTestSelectionListAgainPayload!
  updateTestSelectionListAgain(input: [UpdateTestSelectionListAgainInput!]!): UpdateTestSelectionListAgainPayload!
  upsertTestSelectionListAgain(input: [UpsertTestSelectionListAgainInput!]!): UpsertTestSelectionListAgainPayload!
  deleteTestSelectionListAgain(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTestSelectionListAgainTopic(input: CreateTestSelectionListAgainTopicInput!): CreateTestSelectionListAgainTopicPayload!
  updateTestSelectionListAgainTopic(input: UpdateTestSelectionListAgainTopicInput!): UpdateTestSelectionListAgainTopicPayload!
  deleteTestSelectionListAgainTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTestSelectionListAgain3(input: [CreateTestSelectionListAgain3Input!]!): CreateTestSelectionListAgain3Payload!
  updateTestSelectionListAgain3(input: [UpdateTestSelectionListAgain3Input!]!): UpdateTestSelectionListAgain3Payload!
  upsertTestSelectionListAgain3(input: [UpsertTestSelectionListAgain3Input!]!): UpsertTestSelectionListAgain3Payload!
  deleteTestSelectionListAgain3(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTestSelectionListAgain3Topic(input: CreateTestSelectionListAgain3TopicInput!): CreateTestSelectionListAgain3TopicPayload!
  updateTestSelectionListAgain3Topic(input: UpdateTestSelectionListAgain3TopicInput!): UpdateTestSelectionListAgain3TopicPayload!
  deleteTestSelectionListAgain3Topic(input: DeleteTopicInput!): DeleteTopicPayload!
  createTestSelectionListAgain4(input: [CreateTestSelectionListAgain4Input!]!): CreateTestSelectionListAgain4Payload!
  updateTestSelectionListAgain4(input: [UpdateTestSelectionListAgain4Input!]!): UpdateTestSelectionListAgain4Payload!
  upsertTestSelectionListAgain4(input: [UpsertTestSelectionListAgain4Input!]!): UpsertTestSelectionListAgain4Payload!
  deleteTestSelectionListAgain4(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTestSelectionListAgain4Topic(input: CreateTestSelectionListAgain4TopicInput!): CreateTestSelectionListAgain4TopicPayload!
  updateTestSelectionListAgain4Topic(input: UpdateTestSelectionListAgain4TopicInput!): UpdateTestSelectionListAgain4TopicPayload!
  deleteTestSelectionListAgain4Topic(input: DeleteTopicInput!): DeleteTopicPayload!
  createBasicInventory(input: [CreateBasicInventoryInput!]!): CreateBasicInventoryPayload!
  updateBasicInventory(input: [UpdateBasicInventoryInput!]!): UpdateBasicInventoryPayload!
  upsertBasicInventory(input: [UpsertBasicInventoryInput!]!): UpsertBasicInventoryPayload!
  deleteBasicInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createBasicInventoryTopic(input: CreateBasicInventoryTopicInput!): CreateBasicInventoryTopicPayload!
  updateBasicInventoryTopic(input: UpdateBasicInventoryTopicInput!): UpdateBasicInventoryTopicPayload!
  deleteBasicInventoryTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createFullTestInventory(input: [CreateFullTestInventoryInput!]!): CreateFullTestInventoryPayload!
  updateFullTestInventory(input: [UpdateFullTestInventoryInput!]!): UpdateFullTestInventoryPayload!
  upsertFullTestInventory(input: [UpsertFullTestInventoryInput!]!): UpsertFullTestInventoryPayload!
  deleteFullTestInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createFullTestInventoryTopic(input: CreateFullTestInventoryTopicInput!): CreateFullTestInventoryTopicPayload!
  updateFullTestInventoryTopic(input: UpdateFullTestInventoryTopicInput!): UpdateFullTestInventoryTopicPayload!
  deleteFullTestInventoryTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createDispatcherMessages(input: [CreateDispatcherMessagesInput!]!): CreateDispatcherMessagesPayload!
  updateDispatcherMessages(input: [UpdateDispatcherMessagesInput!]!): UpdateDispatcherMessagesPayload!
  upsertDispatcherMessages(input: [UpsertDispatcherMessagesInput!]!): UpsertDispatcherMessagesPayload!
  deleteDispatcherMessages(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createDispatcherMessagesTopic(input: CreateDispatcherMessagesTopicInput!): CreateDispatcherMessagesTopicPayload!
  updateDispatcherMessagesTopic(input: UpdateDispatcherMessagesTopicInput!): UpdateDispatcherMessagesTopicPayload!
  deleteDispatcherMessagesTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createUpperTestFieldName(input: [CreateUpperTestFieldNameInput!]!): CreateUpperTestFieldNamePayload!
  updateUpperTestFieldName(input: [UpdateUpperTestFieldNameInput!]!): UpdateUpperTestFieldNamePayload!
  upsertUpperTestFieldName(input: [UpsertUpperTestFieldNameInput!]!): UpsertUpperTestFieldNamePayload!
  deleteUpperTestFieldName(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createUpperTestFieldNameTopic(input: CreateUpperTestFieldNameTopicInput!): CreateUpperTestFieldNameTopicPayload!
  updateUpperTestFieldNameTopic(input: UpdateUpperTestFieldNameTopicInput!): UpdateUpperTestFieldNameTopicPayload!
  deleteUpperTestFieldNameTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createDeleteMe(input: [CreateDeleteMeInput!]!): CreateDeleteMePayload!
  updateDeleteMe(input: [UpdateDeleteMeInput!]!): UpdateDeleteMePayload!
  upsertDeleteMe(input: [UpsertDeleteMeInput!]!): UpsertDeleteMePayload!
  deleteDeleteMe(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createDeleteMeTopic(input: CreateDeleteMeTopicInput!): CreateDeleteMeTopicPayload!
  updateDeleteMeTopic(input: UpdateDeleteMeTopicInput!): UpdateDeleteMeTopicPayload!
  deleteDeleteMeTopic(input: DeleteTopicInput!): DeleteTopicPayload!
  createHannasTSIn(input: [CreateHannasTSInInput!]!): CreateHannasTSInPayload!
  createHannasTSInOfGroup(input: [CreateHannasTSInOfGroupInput!]!): CreateHannasTSInPayload!
  updateHannasTSIn(input: [UpdateHannasTSInInput!]!): UpdateHannasTSInPayload!
  deleteHannasTSIn(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTSInv(input: [CreateHannasTSInvInput!]!): CreateHannasTSInvPayload!
  createHannasTSInvOfGroup(input: [CreateHannasTSInvOfGroupInput!]!): CreateHannasTSInvPayload!
  updateHannasTSInv(input: [UpdateHannasTSInvInput!]!): UpdateHannasTSInvPayload!
  deleteHannasTSInv(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTSInvent(input: [CreateHannasTSInventInput!]!): CreateHannasTSInventPayload!
  createHannasTSInventOfGroup(input: [CreateHannasTSInventOfGroupInput!]!): CreateHannasTSInventPayload!
  updateHannasTSInvent(input: [UpdateHannasTSInventInput!]!): UpdateHannasTSInventPayload!
  deleteHannasTSInvent(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTSInven(input: [CreateHannasTSInvenInput!]!): CreateHannasTSInvenPayload!
  createHannasTSInvenOfGroup(input: [CreateHannasTSInvenOfGroupInput!]!): CreateHannasTSInvenPayload!
  updateHannasTSInven(input: [UpdateHannasTSInvenInput!]!): UpdateHannasTSInvenPayload!
  deleteHannasTSInven(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTSInvento(input: [CreateHannasTSInventoInput!]!): CreateHannasTSInventoPayload!
  createHannasTSInventoOfGroup(input: [CreateHannasTSInventoOfGroupInput!]!): CreateHannasTSInventoPayload!
  updateHannasTSInvento(input: [UpdateHannasTSInventoInput!]!): UpdateHannasTSInventoPayload!
  deleteHannasTSInvento(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTSInventory1(input: [CreateHannasTSInventory1Input!]!): CreateHannasTSInventory1Payload!
  createHannasTSInventory1OfGroup(input: [CreateHannasTSInventory1OfGroupInput!]!): CreateHannasTSInventory1Payload!
  updateHannasTSInventory1(input: [UpdateHannasTSInventory1Input!]!): UpdateHannasTSInventory1Payload!
  deleteHannasTSInventory1(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTSInventoryWithoutName1(input: [CreateHannasTSInventoryWithoutName1Input!]!): CreateHannasTSInventoryWithoutName1Payload!
  createHannasTSInventoryWithoutName1OfGroup(input: [CreateHannasTSInventoryWithoutName1OfGroupInput!]!): CreateHannasTSInventoryWithoutName1Payload!
  updateHannasTSInventoryWithoutName1(input: [UpdateHannasTSInventoryWithoutName1Input!]!): UpdateHannasTSInventoryWithoutName1Payload!
  deleteHannasTSInventoryWithoutName1(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasInventoryWithPropertyName(input: [CreateHannasInventoryWithPropertyNameInput!]!): CreateHannasInventoryWithPropertyNamePayload!
  createHannasInventoryWithPropertyNameOfGroup(input: [CreateHannasInventoryWithPropertyNameOfGroupInput!]!): CreateHannasInventoryWithPropertyNamePayload!
  updateHannasInventoryWithPropertyName(input: [UpdateHannasInventoryWithPropertyNameInput!]!): UpdateHannasInventoryWithPropertyNamePayload!
  deleteHannasInventoryWithPropertyName(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasInventory(input: [CreateHannasInventoryInput!]!): CreateHannasInventoryPayload!
  createHannasInventoryOfGroup(input: [CreateHannasInventoryOfGroupInput!]!): CreateHannasInventoryPayload!
  updateHannasInventory(input: [UpdateHannasInventoryInput!]!): UpdateHannasInventoryPayload!
  deleteHannasInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryToUpdate(input: [CreateInventoryToUpdateInput!]!): CreateInventoryToUpdatePayload!
  createInventoryToUpdateOfGroup(input: [CreateInventoryToUpdateOfGroupInput!]!): CreateInventoryToUpdatePayload!
  updateInventoryToUpdate(input: [UpdateInventoryToUpdateInput!]!): UpdateInventoryToUpdatePayload!
  deleteInventoryToUpdate(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryToDelete(input: [CreateInventoryToDeleteInput!]!): CreateInventoryToDeletePayload!
  createInventoryToDeleteOfGroup(input: [CreateInventoryToDeleteOfGroupInput!]!): CreateInventoryToDeletePayload!
  updateInventoryToDelete(input: [UpdateInventoryToDeleteInput!]!): UpdateInventoryToDeletePayload!
  deleteInventoryToDelete(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryToTest(input: [CreateInventoryToTestInput!]!): CreateInventoryToTestPayload!
  createInventoryToTestOfGroup(input: [CreateInventoryToTestOfGroupInput!]!): CreateInventoryToTestPayload!
  updateInventoryToTest(input: [UpdateInventoryToTestInput!]!): UpdateInventoryToTestPayload!
  deleteInventoryToTest(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryToTest2(input: [CreateInventoryToTest2Input!]!): CreateInventoryToTest2Payload!
  createInventoryToTest2OfGroup(input: [CreateInventoryToTest2OfGroupInput!]!): CreateInventoryToTest2Payload!
  updateInventoryToTest2(input: [UpdateInventoryToTest2Input!]!): UpdateInventoryToTest2Payload!
  deleteInventoryToTest2(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryPropTypes3(input: [CreateInventoryPropTypes3Input!]!): CreateInventoryPropTypes3Payload!
  createInventoryPropTypes3OfGroup(input: [CreateInventoryPropTypes3OfGroupInput!]!): CreateInventoryPropTypes3Payload!
  updateInventoryPropTypes3(input: [UpdateInventoryPropTypes3Input!]!): UpdateInventoryPropTypes3Payload!
  deleteInventoryPropTypes3(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryPropTypesWithListTypeTrue(input: [CreateInventoryPropTypesWithListTypeTrueInput!]!): CreateInventoryPropTypesWithListTypeTruePayload!
  createInventoryPropTypesWithListTypeTrueOfGroup(input: [CreateInventoryPropTypesWithListTypeTrueOfGroupInput!]!): CreateInventoryPropTypesWithListTypeTruePayload!
  updateInventoryPropTypesWithListTypeTrue(input: [UpdateInventoryPropTypesWithListTypeTrueInput!]!): UpdateInventoryPropTypesWithListTypeTruePayload!
  deleteInventoryPropTypesWithListTypeTrue(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryPropTypesWithListTypeTrueBool(input: [CreateInventoryPropTypesWithListTypeTrueBoolInput!]!): CreateInventoryPropTypesWithListTypeTrueBoolPayload!
  createInventoryPropTypesWithListTypeTrueBoolOfGroup(input: [CreateInventoryPropTypesWithListTypeTrueBoolOfGroupInput!]!): CreateInventoryPropTypesWithListTypeTrueBoolPayload!
  updateInventoryPropTypesWithListTypeTrueBool(input: [UpdateInventoryPropTypesWithListTypeTrueBoolInput!]!): UpdateInventoryPropTypesWithListTypeTrueBoolPayload!
  deleteInventoryPropTypesWithListTypeTrueBool(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createReferencedInventory(input: [CreateReferencedInventoryInput!]!): CreateReferencedInventoryPayload!
  createReferencedInventoryOfGroup(input: [CreateReferencedInventoryOfGroupInput!]!): CreateReferencedInventoryPayload!
  updateReferencedInventory(input: [UpdateReferencedInventoryInput!]!): UpdateReferencedInventoryPayload!
  deleteReferencedInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryPropReferenced(input: [CreateInventoryPropReferencedInput!]!): CreateInventoryPropReferencedPayload!
  createInventoryPropReferencedOfGroup(input: [CreateInventoryPropReferencedOfGroupInput!]!): CreateInventoryPropReferencedPayload!
  updateInventoryPropReferenced(input: [UpdateInventoryPropReferencedInput!]!): UpdateInventoryPropReferencedPayload!
  deleteInventoryPropReferenced(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createUpdatedInventory(input: [CreateUpdatedInventoryInput!]!): CreateUpdatedInventoryPayload!
  createUpdatedInventoryOfGroup(input: [CreateUpdatedInventoryOfGroupInput!]!): CreateUpdatedInventoryPayload!
  updateUpdatedInventory(input: [UpdateUpdatedInventoryInput!]!): UpdateUpdatedInventoryPayload!
  deleteUpdatedInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInvTest(input: [CreateInvTestInput!]!): CreateInvTestPayload!
  createInvTestOfGroup(input: [CreateInvTestOfGroupInput!]!): CreateInvTestPayload!
  updateInvTest(input: [UpdateInvTestInput!]!): UpdateInvTestPayload!
  deleteInvTest(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInvTest2(input: [CreateInvTest2Input!]!): CreateInvTest2Payload!
  createInvTest2OfGroup(input: [CreateInvTest2OfGroupInput!]!): CreateInvTest2Payload!
  updateInvTest2(input: [UpdateInvTest2Input!]!): UpdateInvTest2Payload!
  deleteInvTest2(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInvTest3(input: [CreateInvTest3Input!]!): CreateInvTest3Payload!
  createInvTest3OfGroup(input: [CreateInvTest3OfGroupInput!]!): CreateInvTest3Payload!
  updateInvTest3(input: [UpdateInvTest3Input!]!): UpdateInvTest3Payload!
  deleteInvTest3(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventoryRemovePropsTimeSeries(input: [CreateInventoryRemovePropsTimeSeriesInput!]!): CreateInventoryRemovePropsTimeSeriesPayload!
  createInventoryRemovePropsTimeSeriesOfGroup(input: [CreateInventoryRemovePropsTimeSeriesOfGroupInput!]!): CreateInventoryRemovePropsTimeSeriesPayload!
  updateInventoryRemovePropsTimeSeries(input: [UpdateInventoryRemovePropsTimeSeriesInput!]!): UpdateInventoryRemovePropsTimeSeriesPayload!
  deleteInventoryRemovePropsTimeSeries(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createInventorySetData(input: [CreateInventorySetDataInput!]!): CreateInventorySetDataPayload!
  createInventorySetDataOfGroup(input: [CreateInventorySetDataOfGroupInput!]!): CreateInventorySetDataPayload!
  updateInventorySetData(input: [UpdateInventorySetDataInput!]!): UpdateInventorySetDataPayload!
  deleteInventorySetData(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPythonTimeseriesTest(input: [CreatePythonTimeseriesTestInput!]!): CreatePythonTimeseriesTestPayload!
  createPythonTimeseriesTestOfGroup(input: [CreatePythonTimeseriesTestOfGroupInput!]!): CreatePythonTimeseriesTestPayload!
  updatePythonTimeseriesTest(input: [UpdatePythonTimeseriesTestInput!]!): UpdatePythonTimeseriesTestPayload!
  deletePythonTimeseriesTest(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasQueryTestInventory(input: [CreateHannasQueryTestInventoryInput!]!): CreateHannasQueryTestInventoryPayload!
  createHannasQueryTestInventoryOfGroup(input: [CreateHannasQueryTestInventoryOfGroupInput!]!): CreateHannasQueryTestInventoryPayload!
  updateHannasQueryTestInventory(input: [UpdateHannasQueryTestInventoryInput!]!): UpdateHannasQueryTestInventoryPayload!
  deleteHannasQueryTestInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPythonTimeseriesTTNTest(input: [CreatePythonTimeseriesTTNTestInput!]!): CreatePythonTimeseriesTTNTestPayload!
  createPythonTimeseriesTTNTestOfGroup(input: [CreatePythonTimeseriesTTNTestOfGroupInput!]!): CreatePythonTimeseriesTTNTestPayload!
  updatePythonTimeseriesTTNTest(input: [UpdatePythonTimeseriesTTNTestInput!]!): UpdatePythonTimeseriesTTNTestPayload!
  deletePythonTimeseriesTTNTest(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTestUpdateInventory(input: [CreateHannasTestUpdateInventoryInput!]!): CreateHannasTestUpdateInventoryPayload!
  createHannasTestUpdateInventoryOfGroup(input: [CreateHannasTestUpdateInventoryOfGroupInput!]!): CreateHannasTestUpdateInventoryPayload!
  updateHannasTestUpdateInventory(input: [UpdateHannasTestUpdateInventoryInput!]!): UpdateHannasTestUpdateInventoryPayload!
  deleteHannasTestUpdateInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasUpdatedInventar(input: [CreateHannasUpdatedInventarInput!]!): CreateHannasUpdatedInventarPayload!
  createHannasUpdatedInventarOfGroup(input: [CreateHannasUpdatedInventarOfGroupInput!]!): CreateHannasUpdatedInventarPayload!
  updateHannasUpdatedInventar(input: [UpdateHannasUpdatedInventarInput!]!): UpdateHannasUpdatedInventarPayload!
  deleteHannasUpdatedInventar(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasTestValueTypeInventar(input: [CreateHannasTestValueTypeInventarInput!]!): CreateHannasTestValueTypeInventarPayload!
  createHannasTestValueTypeInventarOfGroup(input: [CreateHannasTestValueTypeInventarOfGroupInput!]!): CreateHannasTestValueTypeInventarPayload!
  updateHannasTestValueTypeInventar(input: [UpdateHannasTestValueTypeInventarInput!]!): UpdateHannasTestValueTypeInventarPayload!
  deleteHannasTestValueTypeInventar(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasInventoryCreate(input: [CreateHannasInventoryCreateInput!]!): CreateHannasInventoryCreatePayload!
  createHannasInventoryCreateOfGroup(input: [CreateHannasInventoryCreateOfGroupInput!]!): CreateHannasInventoryCreatePayload!
  updateHannasInventoryCreate(input: [UpdateHannasInventoryCreateInput!]!): UpdateHannasInventoryCreatePayload!
  deleteHannasInventoryCreate(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createHannasInventoryCreate2(input: [CreateHannasInventoryCreate2Input!]!): CreateHannasInventoryCreate2Payload!
  createHannasInventoryCreate2OfGroup(input: [CreateHannasInventoryCreate2OfGroupInput!]!): CreateHannasInventoryCreate2Payload!
  updateHannasInventoryCreate2(input: [UpdateHannasInventoryCreate2Input!]!): UpdateHannasInventoryCreate2Payload!
  deleteHannasInventoryCreate2(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createMeterData(input: [CreateMeterDataInput!]!): CreateMeterDataPayload!
  createMeterDataOfGroup(input: [CreateMeterDataOfGroupInput!]!): CreateMeterDataPayload!
  updateMeterData(input: [UpdateMeterDataInput!]!): UpdateMeterDataPayload!
  deleteMeterData(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createMeterData1(input: [CreateMeterData1Input!]!): CreateMeterData1Payload!
  createMeterData1OfGroup(input: [CreateMeterData1OfGroupInput!]!): CreateMeterData1Payload!
  updateMeterData1(input: [UpdateMeterData1Input!]!): UpdateMeterData1Payload!
  deleteMeterData1(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createMarktdaten(input: [CreateMarktdatenInput!]!): CreateMarktdatenPayload!
  createMarktdatenOfGroup(input: [CreateMarktdatenOfGroupInput!]!): CreateMarktdatenPayload!
  updateMarktdaten(input: [UpdateMarktdatenInput!]!): UpdateMarktdatenPayload!
  deleteMarktdaten(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createConcreteTimeSeriesInventory(input: [CreateConcreteTimeSeriesInventoryInput!]!): CreateConcreteTimeSeriesInventoryPayload!
  createConcreteTimeSeriesInventoryOfGroup(input: [CreateConcreteTimeSeriesInventoryOfGroupInput!]!): CreateConcreteTimeSeriesInventoryPayload!
  updateConcreteTimeSeriesInventory(input: [UpdateConcreteTimeSeriesInventoryInput!]!): UpdateConcreteTimeSeriesInventoryPayload!
  deleteConcreteTimeSeriesInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTSInv(input: [CreateTSInvInput!]!): CreateTSInvPayload!
  createTSInvOfGroup(input: [CreateTSInvOfGroupInput!]!): CreateTSInvPayload!
  updateTSInv(input: [UpdateTSInvInput!]!): UpdateTSInvPayload!
  deleteTSInv(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTestSelectionListTimeSeriesInventory(input: [CreateTestSelectionListTimeSeriesInventoryInput!]!): CreateTestSelectionListTimeSeriesInventoryPayload!
  createTestSelectionListTimeSeriesInventoryOfGroup(input: [CreateTestSelectionListTimeSeriesInventoryOfGroupInput!]!): CreateTestSelectionListTimeSeriesInventoryPayload!
  updateTestSelectionListTimeSeriesInventory(input: [UpdateTestSelectionListTimeSeriesInventoryInput!]!): UpdateTestSelectionListTimeSeriesInventoryPayload!
  deleteTestSelectionListTimeSeriesInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTSInventory(input: [CreateTSInventoryInput!]!): CreateTSInventoryPayload!
  createTSInventoryOfGroup(input: [CreateTSInventoryOfGroupInput!]!): CreateTSInventoryPayload!
  updateTSInventory(input: [UpdateTSInventoryInput!]!): UpdateTSInventoryPayload!
  deleteTSInventory(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTimeSeries11(input: [CreateTimeSeries11Input!]!): CreateTimeSeries11Payload!
  createTimeSeries11OfGroup(input: [CreateTimeSeries11OfGroupInput!]!): CreateTimeSeries11Payload!
  updateTimeSeries11(input: [UpdateTimeSeries11Input!]!): UpdateTimeSeries11Payload!
  deleteTimeSeries11(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createTimeSeriesJuergen(input: [CreateTimeSeriesJuergenInput!]!): CreateTimeSeriesJuergenPayload!
  createTimeSeriesJuergenOfGroup(input: [CreateTimeSeriesJuergenOfGroupInput!]!): CreateTimeSeriesJuergenPayload!
  updateTimeSeriesJuergen(input: [UpdateTimeSeriesJuergenInput!]!): UpdateTimeSeriesJuergenPayload!
  deleteTimeSeriesJuergen(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createPythonTimeseriesGroupTest(input: [CreatePythonTimeseriesGroupTestInput!]!): CreatePythonTimeseriesGroupTestPayload!
  updatePythonTimeseriesGroupTest(input: [UpdatePythonTimeseriesGroupTestInput!]!): UpdatePythonTimeseriesGroupTestPayload!
  deletePythonTimeseriesGroupTest(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createGroups(input: [CreateGroupsInput!]!): CreateGroupsPayload!
  updateGroups(input: [UpdateGroupsInput!]!): UpdateGroupsPayload!
  deleteGroups(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createGroups1(input: [CreateGroups1Input!]!): CreateGroups1Payload!
  updateGroups1(input: [UpdateGroups1Input!]!): UpdateGroups1Payload!
  deleteGroups1(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
  createGroups22(input: [CreateGroups22Input!]!): CreateGroups22Payload!
  updateGroups22(input: [UpdateGroups22Input!]!): UpdateGroups22Payload!
  deleteGroups22(input: DeleteConcreteItemsInput!): DeleteConcreteItemsPayload!
}

type Subscription {
  placeholderField: String
  onSub0DefaultMutated(topicId: Uuid! routingValues: Sub0DefaultTopicRoutingValuesInput): Sub0Default!
  onSub0DefaultDeleted(topicId: Uuid!): OnItemDeletedMessage
  onHannasInventoryWithPropertiesMutated(topicId: Uuid! routingValues: HannasInventoryWithPropertiesTopicRoutingValuesInput): HannasInventoryWithProperties!
  onHannasInventoryWithPropertiesDeleted(topicId: Uuid!): OnItemDeletedMessage
  onWohnungMutated(topicId: Uuid! routingValues: WohnungTopicRoutingValuesInput): Wohnung!
  onWohnungDeleted(topicId: Uuid!): OnItemDeletedMessage
  onInventoryRemovePropsMutated(topicId: Uuid! routingValues: InventoryRemovePropsTopicRoutingValuesInput): InventoryRemoveProps!
  onInventoryRemovePropsDeleted(topicId: Uuid!): OnItemDeletedMessage
  onEmTestFMutated(topicId: Uuid! routingValues: EmTestFTopicRoutingValuesInput): EmTestF!
  onEmTestFDeleted(topicId: Uuid!): OnItemDeletedMessage
  onEmTest1FMutated(topicId: Uuid! routingValues: EmTest1FTopicRoutingValuesInput): EmTest1F!
  onEmTest1FDeleted(topicId: Uuid!): OnItemDeletedMessage
  onEmTest4FMutated(topicId: Uuid! routingValues: EmTest4FTopicRoutingValuesInput): EmTest4F!
  onEmTest4FDeleted(topicId: Uuid!): OnItemDeletedMessage
  onInputClearingPositionTransactionMutated(topicId: Uuid! routingValues: InputClearingPositionTransactionTopicRoutingValuesInput): InputClearingPositionTransaction!
  onInputClearingPositionTransactionDeleted(topicId: Uuid!): OnItemDeletedMessage
  onInputTransitionTransactionMutated(topicId: Uuid! routingValues: InputTransitionTransactionTopicRoutingValuesInput): InputTransitionTransaction!
  onInputTransitionTransactionDeleted(topicId: Uuid!): OnItemDeletedMessage
  onInputTradeMutated(topicId: Uuid! routingValues: InputTradeTopicRoutingValuesInput): InputTrade!
  onInputTradeDeleted(topicId: Uuid!): OnItemDeletedMessage
  onRemitTradeMutated(topicId: Uuid! routingValues: RemitTradeTopicRoutingValuesInput): RemitTrade!
  onRemitTradeDeleted(topicId: Uuid!): OnItemDeletedMessage
  onInternalDataSourceMutated(topicId: Uuid! routingValues: InternalDataSourceTopicRoutingValuesInput): InternalDataSource!
  onInternalDataSourceDeleted(topicId: Uuid!): OnItemDeletedMessage
  onFlatsMutated(topicId: Uuid! routingValues: FlatsTopicRoutingValuesInput): Flats!
  onFlatsDeleted(topicId: Uuid!): OnItemDeletedMessage
  onTest_deleteMutated(topicId: Uuid! routingValues: Test_deleteTopicRoutingValuesInput): Test_delete!
  onTest_deleteDeleted(topicId: Uuid!): OnItemDeletedMessage
  onTest_delete2Mutated(topicId: Uuid! routingValues: Test_delete2TopicRoutingValuesInput): Test_delete2!
  onTest_delete2Deleted(topicId: Uuid!): OnItemDeletedMessage
  onPropertyTestMutated(topicId: Uuid! routingValues: PropertyTestTopicRoutingValuesInput): PropertyTest!
  onPropertyTestDeleted(topicId: Uuid!): OnItemDeletedMessage
  onPropertyTest2Mutated(topicId: Uuid! routingValues: PropertyTest2TopicRoutingValuesInput): PropertyTest2!
  onPropertyTest2Deleted(topicId: Uuid!): OnItemDeletedMessage
  onPropertyTest3Mutated(topicId: Uuid! routingValues: PropertyTest3TopicRoutingValuesInput): PropertyTest3!
  onPropertyTest3Deleted(topicId: Uuid!): OnItemDeletedMessage
  onPropertyTest4Mutated(topicId: Uuid! routingValues: PropertyTest4TopicRoutingValuesInput): PropertyTest4!
  onPropertyTest4Deleted(topicId: Uuid!): OnItemDeletedMessage
  onTestHannaMutated(topicId: Uuid! routingValues: TestHannaTopicRoutingValuesInput): TestHanna!
  onTestHannaDeleted(topicId: Uuid!): OnItemDeletedMessage
  onTestSelectionListMutated(topicId: Uuid! routingValues: TestSelectionListTopicRoutingValuesInput): TestSelectionList!
  onTestSelectionListDeleted(topicId: Uuid!): OnItemDeletedMessage
  onTestSelectionListAgainMutated(topicId: Uuid! routingValues: TestSelectionListAgainTopicRoutingValuesInput): TestSelectionListAgain!
  onTestSelectionListAgainDeleted(topicId: Uuid!): OnItemDeletedMessage
  onTestSelectionListAgain3Mutated(topicId: Uuid! routingValues: TestSelectionListAgain3TopicRoutingValuesInput): TestSelectionListAgain3!
  onTestSelectionListAgain3Deleted(topicId: Uuid!): OnItemDeletedMessage
  onTestSelectionListAgain4Mutated(topicId: Uuid! routingValues: TestSelectionListAgain4TopicRoutingValuesInput): TestSelectionListAgain4!
  onTestSelectionListAgain4Deleted(topicId: Uuid!): OnItemDeletedMessage
  onBasicInventoryMutated(topicId: Uuid! routingValues: BasicInventoryTopicRoutingValuesInput): BasicInventory!
  onBasicInventoryDeleted(topicId: Uuid!): OnItemDeletedMessage
  onFullTestInventoryMutated(topicId: Uuid! routingValues: FullTestInventoryTopicRoutingValuesInput): FullTestInventory!
  onFullTestInventoryDeleted(topicId: Uuid!): OnItemDeletedMessage
  onDispatcherMessagesMutated(topicId: Uuid! routingValues: DispatcherMessagesTopicRoutingValuesInput): DispatcherMessages!
  onDispatcherMessagesDeleted(topicId: Uuid!): OnItemDeletedMessage
  onUpperTestFieldNameMutated(topicId: Uuid! routingValues: UpperTestFieldNameTopicRoutingValuesInput): UpperTestFieldName!
  onUpperTestFieldNameDeleted(topicId: Uuid!): OnItemDeletedMessage
  onDeleteMeMutated(topicId: Uuid! routingValues: DeleteMeTopicRoutingValuesInput): DeleteMe!
  onDeleteMeDeleted(topicId: Uuid!): OnItemDeletedMessage
}

type StringCellValue implements ICellValue {
  value: String
  displayValue: String!
}

type BooleanCellValue implements ICellValue {
  value: Boolean
  displayValue: String!
}

type IntCellValue implements ICellValue {
  value: Int
  displayValue: String!
}

type DoubleCellValue implements ICellValue {
  value: Float
  displayValue: String!
}

type DateTimeCellValue implements ICellValue {
  value: DateTime
  displayValue: String!
}

type ScalarTypeDescription implements ITypeDescription {
  name: String!
  isNonNullable: Boolean!
}

type ListTypeDescription implements ITypeDescription {
  innerType: ITypeDescription!
  name: String!
  isNonNullable: Boolean!
}

type ObjectTypeDescription implements ITypeDescription {
  fields: [GraphQlFieldDescription!]!
  name: String!
  isNonNullable: Boolean!
}

type EnumTypeDescription implements ITypeDescription {
  values: [String!]!
  name: String!
  isNonNullable: Boolean!
}

type StringProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

type DateTimeProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

type BooleanProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

type ComputedProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  fieldType: ComputedFieldType!
  formula: String!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

type InventoryProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  inventoryId: Uuid!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

type NumericProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

type SelectionListProperty implements IPropertyDefinition {
  isList: Boolean!
  isOptional: Boolean!
  isHistoryEnabled: Boolean!
  selectionListId: Uuid!
  key: Uuid!
  displayName: String!
  fieldName: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

input DynamicInventoryFilterInput {
  and: [DynamicInventoryFilterInput!]
  or: [DynamicInventoryFilterInput!]
  fieldName: StringOperationFilterInput
  displayName: StringOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  variant: VariantOperationFilterInput
}

input DynamicInventorySortInput {
  dynamicInventoryId: SortEnumType
  fieldName: SortEnumType
  displayName: SortEnumType
  variant: SortEnumType
}

type DynamicInventory implements Node {
  id: ID!
  propertyDefinitions: [IPropertyDefinition]
  dynamicInventoryId: Uuid!
  fieldName: String!
  displayName: String!
  variant: Variant!
}

"A connection to a list of items."
type DynamicInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DynamicInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [DynamicInventory]
  totalCount: Int!
}

input SelectionListFilterInput {
  and: [SelectionListFilterInput!]
  or: [SelectionListFilterInput!]
  selectionListId: ComparableGuidOperationFilterInput
  fieldName: StringOperationFilterInput
  displayName: StringOperationFilterInput
  selectionItems: ListFilterInputTypeOfSelectionItemFilterInput
}

input SelectionListSortInput {
  selectionListId: SortEnumType
  fieldName: SortEnumType
  displayName: SortEnumType
}

"A connection to a list of items."
type SelectionListConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SelectionListEdge!]
  "A flattened list of the nodes."
  nodes: [SelectionList]
  totalCount: Int!
}

type ServerInfo {
  applicationInfos: [ApplicationInfo!]!
}

interface ICellValue {
  displayValue: String!
}

interface ITypeDescription {
  name: String!
  isNonNullable: Boolean!
}

input RelationDefinitionTypeFilterInput {
  and: [RelationDefinitionTypeFilterInput!]
  or: [RelationDefinitionTypeFilterInput!]
  fieldPath: StringOperationFilterInput
  name: StringOperationFilterInput
  topLevelField: StringOperationFilterInput
  type: RelationTypeOperationFilterInput
}

interface IPropertyDefinition {
  key: Uuid!
  displayName: String!
  fieldName: String!
}

input TimeSeriesCollectionItemFilterInput {
  and: [TimeSeriesCollectionItemFilterInput!]
  or: [TimeSeriesCollectionItemFilterInput!]
  itemId: ComparableGuidOperationFilterInput
  data: DataFilterInput
  status: ComparableNullableOfInt32OperationFilterInput
}

input TimeSeriesCollectionItemSortInput {
  itemId: SortEnumType
  data: DataSortInput
  status: SortEnumType
}

type Data {
  resolution: Resolution!
  unit: String!
  dataPoints: [DataPoint!]!
}

"A connection to a list of items."
type TimeSeriesCollectionItemConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TimeSeriesCollectionItemEdge!]
  "A flattened list of the nodes."
  nodes: [TimeSeriesCollectionItem]
  totalCount: Int!
}

input ReadDataInput {
  from: DateTime!
  to: DateTime!
  unit: String
  timeUnit: TimeUnit
  factor: Int
  aggregation: Aggregation
}

input UnitFilterInput {
  and: [UnitFilterInput!]
  or: [UnitFilterInput!]
  name: StringOperationFilterInput
  baseUnit: StringOperationFilterInput
  factor: ComparableNullableOfDoubleOperationFilterInput
  aggregation: NullableOfAggregationRuleOperationFilterInput
}

input UnitSortInput {
  name: SortEnumType
  baseUnit: SortEnumType
  factor: SortEnumType
  aggregation: SortEnumType
}

"A connection to a list of items."
type UnitConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UnitEdge!]
  "A flattened list of the nodes."
  nodes: [Unit]
  totalCount: Int!
}

input Sub0DefaultFilterInput {
  and: [Sub0DefaultFilterInput!]
  or: [Sub0DefaultFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  sub0Field: StringOperationFilterInput
}

input Sub0DefaultSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  sub0Field: SortEnumType
}

input Sub0DefaultHistoryHistoryFilterInput {
  and: [Sub0DefaultHistoryHistoryFilterInput!]
  or: [Sub0DefaultHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  sub0Field: StringOperationFilterInput
}

input Sub0DefaultHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  sub0Field: SortEnumType
}

input TopicFilterInput {
  and: [TopicFilterInput!]
  or: [TopicFilterInput!]
  topicId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  onSubscription: OnSubscriptionOperationFilterInput
  enabled: BooleanOperationFilterInput
  displayName: StringOperationFilterInput
  routingFields: ListComparableGuidOperationFilterInput
  routingFilter: StringOperationFilterInput
}

input TopicSortInput {
  topicId: SortEnumType
  dynamicInventoryId: SortEnumType
  onSubscription: SortEnumType
  enabled: SortEnumType
  displayName: SortEnumType
  routingFilter: SortEnumType
}

input HannasInventoryWithPropertiesFilterInput {
  and: [HannasInventoryWithPropertiesFilterInput!]
  or: [HannasInventoryWithPropertiesFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
}

input HannasInventoryWithPropertiesSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop1: SortEnumType
}

input HannasInventoryWithPropertiesHistoryHistoryFilterInput {
  and: [HannasInventoryWithPropertiesHistoryHistoryFilterInput!]
  or: [HannasInventoryWithPropertiesHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
}

input HannasInventoryWithPropertiesHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop1: SortEnumType
}

input WohnungFilterInput {
  and: [WohnungFilterInput!]
  or: [WohnungFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  eigentuemer: StringOperationFilterInput
  stocks: StocksFilterInput
  wohnflaeche: ComparableDoubleOperationFilterInput
}

input WohnungSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  eigentuemer: SortEnumType
  wohnflaeche: SortEnumType
}

input WohnungHistoryHistoryFilterInput {
  and: [WohnungHistoryHistoryFilterInput!]
  or: [WohnungHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  eigentuemer: StringOperationFilterInput
  wohnflaeche: ComparableDoubleOperationFilterInput
}

input WohnungHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  eigentuemer: SortEnumType
  wohnflaeche: SortEnumType
}

input InventoryRemovePropsFilterInput {
  and: [InventoryRemovePropsFilterInput!]
  or: [InventoryRemovePropsFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  fieldName2: StringOperationFilterInput
}

input InventoryRemovePropsSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  fieldName2: SortEnumType
}

input InventoryRemovePropsHistoryHistoryFilterInput {
  and: [InventoryRemovePropsHistoryHistoryFilterInput!]
  or: [InventoryRemovePropsHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  fieldName2: StringOperationFilterInput
}

input InventoryRemovePropsHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  fieldName2: SortEnumType
}

input EmTestFFilterInput {
  and: [EmTestFFilterInput!]
  or: [EmTestFFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp1F: StringOperationFilterInput
}

input EmTestFSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  testProp1F: SortEnumType
}

input EmTestFHistoryHistoryFilterInput {
  and: [EmTestFHistoryHistoryFilterInput!]
  or: [EmTestFHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp1F: StringOperationFilterInput
}

input EmTestFHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  testProp1F: SortEnumType
}

input EmTest1FFilterInput {
  and: [EmTest1FFilterInput!]
  or: [EmTest1FFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp11F: StringOperationFilterInput
}

input EmTest1FSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  testProp11F: SortEnumType
}

input EmTest1FHistoryHistoryFilterInput {
  and: [EmTest1FHistoryHistoryFilterInput!]
  or: [EmTest1FHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp11F: StringOperationFilterInput
}

input EmTest1FHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  testProp11F: SortEnumType
}

input EmTest4FFilterInput {
  and: [EmTest4FFilterInput!]
  or: [EmTest4FFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp41F: StringOperationFilterInput
}

input EmTest4FSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  testProp41F: SortEnumType
}

input EmTest4FHistoryHistoryFilterInput {
  and: [EmTest4FHistoryHistoryFilterInput!]
  or: [EmTest4FHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp41F: StringOperationFilterInput
}

input EmTest4FHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  testProp41F: SortEnumType
}

input InputClearingPositionTransactionFilterInput {
  and: [InputClearingPositionTransactionFilterInput!]
  or: [InputClearingPositionTransactionFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  source_code: StringOperationFilterInput
  nonclearingmember: StringOperationFilterInput
  transaction_type: ComparableDoubleOperationFilterInput
  client: StringOperationFilterInput
  clearingmember: StringOperationFilterInput
  f_fct_onl_clrg_pos_trans_id: ComparableDoubleOperationFilterInput
  account_sponsor: StringOperationFilterInput
  member: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  clearinghouse: StringOperationFilterInput
  mifidmember: StringOperationFilterInput
  transaction_stream_type: ComparableDoubleOperationFilterInput
  account_owner: StringOperationFilterInput
  instrument_id: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  buy_sell_code: StringOperationFilterInput
}

input InputClearingPositionTransactionSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  source_code: SortEnumType
  nonclearingmember: SortEnumType
  transaction_type: SortEnumType
  client: SortEnumType
  clearingmember: SortEnumType
  f_fct_onl_clrg_pos_trans_id: SortEnumType
  account_sponsor: SortEnumType
  member: SortEnumType
  fact_date: SortEnumType
  fact_timestamp: SortEnumType
  clearinghouse: SortEnumType
  mifidmember: SortEnumType
  transaction_stream_type: SortEnumType
  account_owner: SortEnumType
  instrument_id: SortEnumType
  orig_id: SortEnumType
  buy_sell_code: SortEnumType
}

input InputClearingPositionTransactionHistoryHistoryFilterInput {
  and: [InputClearingPositionTransactionHistoryHistoryFilterInput!]
  or: [InputClearingPositionTransactionHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  source_code: StringOperationFilterInput
  nonclearingmember: StringOperationFilterInput
  transaction_type: ComparableDoubleOperationFilterInput
  client: StringOperationFilterInput
  clearingmember: StringOperationFilterInput
  f_fct_onl_clrg_pos_trans_id: ComparableDoubleOperationFilterInput
  account_sponsor: StringOperationFilterInput
  member: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  clearinghouse: StringOperationFilterInput
  mifidmember: StringOperationFilterInput
  transaction_stream_type: ComparableDoubleOperationFilterInput
  account_owner: StringOperationFilterInput
  instrument_id: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  buy_sell_code: StringOperationFilterInput
}

input InputClearingPositionTransactionHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  source_code: SortEnumType
  nonclearingmember: SortEnumType
  transaction_type: SortEnumType
  client: SortEnumType
  clearingmember: SortEnumType
  f_fct_onl_clrg_pos_trans_id: SortEnumType
  account_sponsor: SortEnumType
  member: SortEnumType
  fact_date: SortEnumType
  fact_timestamp: SortEnumType
  clearinghouse: SortEnumType
  mifidmember: SortEnumType
  transaction_stream_type: SortEnumType
  account_owner: SortEnumType
  instrument_id: SortEnumType
  orig_id: SortEnumType
  buy_sell_code: SortEnumType
}

input InputTransitionTransactionFilterInput {
  and: [InputTransitionTransactionFilterInput!]
  or: [InputTransitionTransactionFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  current_suffix: StringOperationFilterInput
  mifidmember: StringOperationFilterInput
  nonclearingmember: StringOperationFilterInput
  its: StringOperationFilterInput
  trade_rpt_type_code: StringOperationFilterInput
  trade_handling_instr: StringOperationFilterInput
  position_long: ComparableDoubleOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  order_qty: ComparableDoubleOperationFilterInput
  order_no: StringOperationFilterInput
  designated_qty_long: ComparableDoubleOperationFilterInput
  clg_mbr_participant_code: StringOperationFilterInput
  trader_code: StringOperationFilterInput
  match_price: StringOperationFilterInput
  currency_code: StringOperationFilterInput
  trade_rpt_id: StringOperationFilterInput
  customer: StringOperationFilterInput
  clearingmember: StringOperationFilterInput
  maintenance_event: StringOperationFilterInput
  trade_rpt_ref_id: StringOperationFilterInput
  market: StringOperationFilterInput
  origin_trade_time_cet: StringOperationFilterInput
  tran_adj_ind: StringOperationFilterInput
  manual_trade_entry_flag: ComparableDoubleOperationFilterInput
  position_short: ComparableDoubleOperationFilterInput
  parent_suffix: StringOperationFilterInput
  source_code: StringOperationFilterInput
  account_type: StringOperationFilterInput
  member: StringOperationFilterInput
  trade_rpt_trans_type_code: StringOperationFilterInput
  transaction_no: StringOperationFilterInput
  origin_trade_date_cet: StringOperationFilterInput
  adj_qty_long: ComparableDoubleOperationFilterInput
  mbr_participant_code: StringOperationFilterInput
  origin_order_no: StringOperationFilterInput
  clearinghouse: StringOperationFilterInput
  user_order_no: StringOperationFilterInput
  give_up_status_code: StringOperationFilterInput
  instrument_id: StringOperationFilterInput
  f_fct_onl_pos_trans_id: StringOperationFilterInput
  exercised_allocated: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  trade_match_id: StringOperationFilterInput
  trade_size: StringOperationFilterInput
  client: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  delta_qty_short: ComparableDoubleOperationFilterInput
  trade_type: StringOperationFilterInput
  designated_qty_short: ComparableDoubleOperationFilterInput
  order_aggressor_flag: StringOperationFilterInput
  transfer_reason: StringOperationFilterInput
  pos_text: StringOperationFilterInput
  open_close_flag: StringOperationFilterInput
  buy_sell_ind: StringOperationFilterInput
  adj_qty_short: ComparableDoubleOperationFilterInput
}

input InputTransitionTransactionSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  current_suffix: SortEnumType
  mifidmember: SortEnumType
  nonclearingmember: SortEnumType
  its: SortEnumType
  trade_rpt_type_code: SortEnumType
  trade_handling_instr: SortEnumType
  position_long: SortEnumType
  fact_timestamp: SortEnumType
  order_qty: SortEnumType
  order_no: SortEnumType
  designated_qty_long: SortEnumType
  clg_mbr_participant_code: SortEnumType
  trader_code: SortEnumType
  match_price: SortEnumType
  currency_code: SortEnumType
  trade_rpt_id: SortEnumType
  customer: SortEnumType
  clearingmember: SortEnumType
  maintenance_event: SortEnumType
  trade_rpt_ref_id: SortEnumType
  market: SortEnumType
  origin_trade_time_cet: SortEnumType
  tran_adj_ind: SortEnumType
  manual_trade_entry_flag: SortEnumType
  position_short: SortEnumType
  parent_suffix: SortEnumType
  source_code: SortEnumType
  account_type: SortEnumType
  member: SortEnumType
  trade_rpt_trans_type_code: SortEnumType
  transaction_no: SortEnumType
  origin_trade_date_cet: SortEnumType
  adj_qty_long: SortEnumType
  mbr_participant_code: SortEnumType
  origin_order_no: SortEnumType
  clearinghouse: SortEnumType
  user_order_no: SortEnumType
  give_up_status_code: SortEnumType
  instrument_id: SortEnumType
  f_fct_onl_pos_trans_id: SortEnumType
  exercised_allocated: SortEnumType
  orig_id: SortEnumType
  trade_match_id: SortEnumType
  trade_size: SortEnumType
  client: SortEnumType
  fact_date: SortEnumType
  delta_qty_short: SortEnumType
  trade_type: SortEnumType
  designated_qty_short: SortEnumType
  order_aggressor_flag: SortEnumType
  transfer_reason: SortEnumType
  pos_text: SortEnumType
  open_close_flag: SortEnumType
  buy_sell_ind: SortEnumType
  adj_qty_short: SortEnumType
}

input InputTransitionTransactionHistoryHistoryFilterInput {
  and: [InputTransitionTransactionHistoryHistoryFilterInput!]
  or: [InputTransitionTransactionHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  current_suffix: StringOperationFilterInput
  mifidmember: StringOperationFilterInput
  nonclearingmember: StringOperationFilterInput
  its: StringOperationFilterInput
  trade_rpt_type_code: StringOperationFilterInput
  trade_handling_instr: StringOperationFilterInput
  position_long: ComparableDoubleOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  order_qty: ComparableDoubleOperationFilterInput
  order_no: StringOperationFilterInput
  designated_qty_long: ComparableDoubleOperationFilterInput
  clg_mbr_participant_code: StringOperationFilterInput
  trader_code: StringOperationFilterInput
  match_price: StringOperationFilterInput
  currency_code: StringOperationFilterInput
  trade_rpt_id: StringOperationFilterInput
  customer: StringOperationFilterInput
  clearingmember: StringOperationFilterInput
  maintenance_event: StringOperationFilterInput
  trade_rpt_ref_id: StringOperationFilterInput
  market: StringOperationFilterInput
  origin_trade_time_cet: StringOperationFilterInput
  tran_adj_ind: StringOperationFilterInput
  manual_trade_entry_flag: ComparableDoubleOperationFilterInput
  position_short: ComparableDoubleOperationFilterInput
  parent_suffix: StringOperationFilterInput
  source_code: StringOperationFilterInput
  account_type: StringOperationFilterInput
  member: StringOperationFilterInput
  trade_rpt_trans_type_code: StringOperationFilterInput
  transaction_no: StringOperationFilterInput
  origin_trade_date_cet: StringOperationFilterInput
  adj_qty_long: ComparableDoubleOperationFilterInput
  mbr_participant_code: StringOperationFilterInput
  origin_order_no: StringOperationFilterInput
  clearinghouse: StringOperationFilterInput
  user_order_no: StringOperationFilterInput
  give_up_status_code: StringOperationFilterInput
  instrument_id: StringOperationFilterInput
  f_fct_onl_pos_trans_id: StringOperationFilterInput
  exercised_allocated: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  trade_match_id: StringOperationFilterInput
  trade_size: StringOperationFilterInput
  client: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  delta_qty_short: ComparableDoubleOperationFilterInput
  trade_type: StringOperationFilterInput
  designated_qty_short: ComparableDoubleOperationFilterInput
  order_aggressor_flag: StringOperationFilterInput
  transfer_reason: StringOperationFilterInput
  pos_text: StringOperationFilterInput
  open_close_flag: StringOperationFilterInput
  buy_sell_ind: StringOperationFilterInput
  adj_qty_short: ComparableDoubleOperationFilterInput
}

input InputTransitionTransactionHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  current_suffix: SortEnumType
  mifidmember: SortEnumType
  nonclearingmember: SortEnumType
  its: SortEnumType
  trade_rpt_type_code: SortEnumType
  trade_handling_instr: SortEnumType
  position_long: SortEnumType
  fact_timestamp: SortEnumType
  order_qty: SortEnumType
  order_no: SortEnumType
  designated_qty_long: SortEnumType
  clg_mbr_participant_code: SortEnumType
  trader_code: SortEnumType
  match_price: SortEnumType
  currency_code: SortEnumType
  trade_rpt_id: SortEnumType
  customer: SortEnumType
  clearingmember: SortEnumType
  maintenance_event: SortEnumType
  trade_rpt_ref_id: SortEnumType
  market: SortEnumType
  origin_trade_time_cet: SortEnumType
  tran_adj_ind: SortEnumType
  manual_trade_entry_flag: SortEnumType
  position_short: SortEnumType
  parent_suffix: SortEnumType
  source_code: SortEnumType
  account_type: SortEnumType
  member: SortEnumType
  trade_rpt_trans_type_code: SortEnumType
  transaction_no: SortEnumType
  origin_trade_date_cet: SortEnumType
  adj_qty_long: SortEnumType
  mbr_participant_code: SortEnumType
  origin_order_no: SortEnumType
  clearinghouse: SortEnumType
  user_order_no: SortEnumType
  give_up_status_code: SortEnumType
  instrument_id: SortEnumType
  f_fct_onl_pos_trans_id: SortEnumType
  exercised_allocated: SortEnumType
  orig_id: SortEnumType
  trade_match_id: SortEnumType
  trade_size: SortEnumType
  client: SortEnumType
  fact_date: SortEnumType
  delta_qty_short: SortEnumType
  trade_type: SortEnumType
  designated_qty_short: SortEnumType
  order_aggressor_flag: SortEnumType
  transfer_reason: SortEnumType
  pos_text: SortEnumType
  open_close_flag: SortEnumType
  buy_sell_ind: SortEnumType
  adj_qty_short: SortEnumType
}

input InputTradeFilterInput {
  and: [InputTradeFilterInput!]
  or: [InputTradeFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  match_price: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  its: StringOperationFilterInput
  buy_sell_ind: StringOperationFilterInput
  cancellation_type: StringOperationFilterInput
  instrument_id: StringOperationFilterInput
  currency_code: StringOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  trade_group_id: StringOperationFilterInput
  source_code: StringOperationFilterInput
  trade_origin: StringOperationFilterInput
  f_fct_order_quote_id: StringOperationFilterInput
  on_bhlf_mbr_participant_code: StringOperationFilterInput
  trade_id: StringOperationFilterInput
  maintenance_event: StringOperationFilterInput
  client: StringOperationFilterInput
  user_code: StringOperationFilterInput
  mbr_participant_code: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  trade_size: ComparableDoubleOperationFilterInput
  exchange_ord_id: StringOperationFilterInput
  backref: RemitTradeFilterInput
  member: StringOperationFilterInput
  f_fct_trade_id: StringOperationFilterInput
  aggressor_ind: StringOperationFilterInput
}

input InputTradeSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  match_price: SortEnumType
  orig_id: SortEnumType
  its: SortEnumType
  buy_sell_ind: SortEnumType
  cancellation_type: SortEnumType
  instrument_id: SortEnumType
  currency_code: SortEnumType
  fact_timestamp: SortEnumType
  trade_group_id: SortEnumType
  source_code: SortEnumType
  trade_origin: SortEnumType
  f_fct_order_quote_id: SortEnumType
  on_bhlf_mbr_participant_code: SortEnumType
  trade_id: SortEnumType
  maintenance_event: SortEnumType
  client: SortEnumType
  user_code: SortEnumType
  mbr_participant_code: SortEnumType
  fact_date: SortEnumType
  trade_size: SortEnumType
  exchange_ord_id: SortEnumType
  member: SortEnumType
  f_fct_trade_id: SortEnumType
  aggressor_ind: SortEnumType
}

input InputTradeHistoryHistoryFilterInput {
  and: [InputTradeHistoryHistoryFilterInput!]
  or: [InputTradeHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  match_price: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  its: StringOperationFilterInput
  buy_sell_ind: StringOperationFilterInput
  cancellation_type: StringOperationFilterInput
  instrument_id: StringOperationFilterInput
  currency_code: StringOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  trade_group_id: StringOperationFilterInput
  source_code: StringOperationFilterInput
  trade_origin: StringOperationFilterInput
  f_fct_order_quote_id: StringOperationFilterInput
  on_bhlf_mbr_participant_code: StringOperationFilterInput
  trade_id: StringOperationFilterInput
  maintenance_event: StringOperationFilterInput
  client: StringOperationFilterInput
  user_code: StringOperationFilterInput
  mbr_participant_code: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  trade_size: ComparableDoubleOperationFilterInput
  exchange_ord_id: StringOperationFilterInput
  backref: RemitTradeHistoryHistoryFilterInput
  member: StringOperationFilterInput
  f_fct_trade_id: StringOperationFilterInput
  aggressor_ind: StringOperationFilterInput
}

input InputTradeHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  match_price: SortEnumType
  orig_id: SortEnumType
  its: SortEnumType
  buy_sell_ind: SortEnumType
  cancellation_type: SortEnumType
  instrument_id: SortEnumType
  currency_code: SortEnumType
  fact_timestamp: SortEnumType
  trade_group_id: SortEnumType
  source_code: SortEnumType
  trade_origin: SortEnumType
  f_fct_order_quote_id: SortEnumType
  on_bhlf_mbr_participant_code: SortEnumType
  trade_id: SortEnumType
  maintenance_event: SortEnumType
  client: SortEnumType
  user_code: SortEnumType
  mbr_participant_code: SortEnumType
  fact_date: SortEnumType
  trade_size: SortEnumType
  exchange_ord_id: SortEnumType
  member: SortEnumType
  f_fct_trade_id: SortEnumType
  aggressor_ind: SortEnumType
}

input RemitTradeFilterInput {
  and: [RemitTradeFilterInput!]
  or: [RemitTradeFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  member: StringOperationFilterInput
  notionalcontractquantityunit: StringOperationFilterInput
  notionalamount: ComparableDoubleOperationFilterInput
  contractid: StringOperationFilterInput
  aggressor: StringOperationFilterInput
  voicebrokered: BooleanOperationFilterInput
  version: ComparableDateTimeOperationFilterInput
  traderidtype: StringOperationFilterInput
  client: StringOperationFilterInput
  transactiontime: ComparableDateTimeOperationFilterInput
  notionalamountcurrency: StringOperationFilterInput
  pricecurrency: StringOperationFilterInput
  actiontype: StringOperationFilterInput
  buysellindicator: StringOperationFilterInput
  inputpositiontransaction: InputTransitionTransactionFilterInput
  marketparticipantid: StringOperationFilterInput
  traderid: StringOperationFilterInput
  price: ComparableDoubleOperationFilterInput
  orderstatus: StringOperationFilterInput
  quantityunit: StringOperationFilterInput
  tradingcapacity: StringOperationFilterInput
  transactiontimenano: ComparableDoubleOperationFilterInput
  ordertype: StringOperationFilterInput
  orderduration: StringOperationFilterInput
  uniquetransactionidentifier: StringOperationFilterInput
  notionalcontractquantity: ComparableDoubleOperationFilterInput
  organisedmarketplaceidtype: StringOperationFilterInput
  organisedmarketplaceid: StringOperationFilterInput
  marketparticipantidtype: StringOperationFilterInput
  inputclearingpositiontransaction: InputClearingPositionTransactionFilterInput
  inputtrade: InputTradeFilterInput
  quantity: ComparableDoubleOperationFilterInput
}

input RemitTradeSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  member: SortEnumType
  notionalcontractquantityunit: SortEnumType
  notionalamount: SortEnumType
  contractid: SortEnumType
  aggressor: SortEnumType
  voicebrokered: SortEnumType
  version: SortEnumType
  traderidtype: SortEnumType
  client: SortEnumType
  transactiontime: SortEnumType
  notionalamountcurrency: SortEnumType
  pricecurrency: SortEnumType
  actiontype: SortEnumType
  buysellindicator: SortEnumType
  marketparticipantid: SortEnumType
  traderid: SortEnumType
  price: SortEnumType
  orderstatus: SortEnumType
  quantityunit: SortEnumType
  tradingcapacity: SortEnumType
  transactiontimenano: SortEnumType
  ordertype: SortEnumType
  orderduration: SortEnumType
  uniquetransactionidentifier: SortEnumType
  notionalcontractquantity: SortEnumType
  organisedmarketplaceidtype: SortEnumType
  organisedmarketplaceid: SortEnumType
  marketparticipantidtype: SortEnumType
  quantity: SortEnumType
}

input RemitTradeHistoryHistoryFilterInput {
  and: [RemitTradeHistoryHistoryFilterInput!]
  or: [RemitTradeHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  member: StringOperationFilterInput
  notionalcontractquantityunit: StringOperationFilterInput
  notionalamount: ComparableDoubleOperationFilterInput
  contractid: StringOperationFilterInput
  aggressor: StringOperationFilterInput
  voicebrokered: BooleanOperationFilterInput
  version: ComparableDateTimeOperationFilterInput
  traderidtype: StringOperationFilterInput
  client: StringOperationFilterInput
  transactiontime: ComparableDateTimeOperationFilterInput
  notionalamountcurrency: StringOperationFilterInput
  pricecurrency: StringOperationFilterInput
  actiontype: StringOperationFilterInput
  buysellindicator: StringOperationFilterInput
  inputpositiontransaction: InputTransitionTransactionHistoryHistoryFilterInput
  marketparticipantid: StringOperationFilterInput
  traderid: StringOperationFilterInput
  price: ComparableDoubleOperationFilterInput
  orderstatus: StringOperationFilterInput
  quantityunit: StringOperationFilterInput
  tradingcapacity: StringOperationFilterInput
  transactiontimenano: ComparableDoubleOperationFilterInput
  ordertype: StringOperationFilterInput
  orderduration: StringOperationFilterInput
  uniquetransactionidentifier: StringOperationFilterInput
  notionalcontractquantity: ComparableDoubleOperationFilterInput
  organisedmarketplaceidtype: StringOperationFilterInput
  organisedmarketplaceid: StringOperationFilterInput
  marketparticipantidtype: StringOperationFilterInput
  inputclearingpositiontransaction: InputClearingPositionTransactionHistoryHistoryFilterInput
  inputtrade: InputTradeHistoryHistoryFilterInput
  quantity: ComparableDoubleOperationFilterInput
}

input RemitTradeHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  member: SortEnumType
  notionalcontractquantityunit: SortEnumType
  notionalamount: SortEnumType
  contractid: SortEnumType
  aggressor: SortEnumType
  voicebrokered: SortEnumType
  version: SortEnumType
  traderidtype: SortEnumType
  client: SortEnumType
  transactiontime: SortEnumType
  notionalamountcurrency: SortEnumType
  pricecurrency: SortEnumType
  actiontype: SortEnumType
  buysellindicator: SortEnumType
  marketparticipantid: SortEnumType
  traderid: SortEnumType
  price: SortEnumType
  orderstatus: SortEnumType
  quantityunit: SortEnumType
  tradingcapacity: SortEnumType
  transactiontimenano: SortEnumType
  ordertype: SortEnumType
  orderduration: SortEnumType
  uniquetransactionidentifier: SortEnumType
  notionalcontractquantity: SortEnumType
  organisedmarketplaceidtype: SortEnumType
  organisedmarketplaceid: SortEnumType
  marketparticipantidtype: SortEnumType
  quantity: SortEnumType
}

input InternalDataSourceFilterInput {
  and: [InternalDataSourceFilterInput!]
  or: [InternalDataSourceFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  customId: StringOperationFilterInput
  title: StringOperationFilterInput
  dataSourceType: StringOperationFilterInput
}

input InternalDataSourceSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  customId: SortEnumType
  title: SortEnumType
  dataSourceType: SortEnumType
}

input InternalDataSourceHistoryHistoryFilterInput {
  and: [InternalDataSourceHistoryHistoryFilterInput!]
  or: [InternalDataSourceHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  customId: StringOperationFilterInput
  title: StringOperationFilterInput
  dataSourceType: StringOperationFilterInput
}

input InternalDataSourceHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  customId: SortEnumType
  title: SortEnumType
  dataSourceType: SortEnumType
}

input FlatsFilterInput {
  and: [FlatsFilterInput!]
  or: [FlatsFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  tenant: StringOperationFilterInput
  area: ComparableDoubleOperationFilterInput
}

input FlatsSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  tenant: SortEnumType
  area: SortEnumType
}

input FlatsHistoryHistoryFilterInput {
  and: [FlatsHistoryHistoryFilterInput!]
  or: [FlatsHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  tenant: StringOperationFilterInput
  area: ComparableDoubleOperationFilterInput
}

input FlatsHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  tenant: SortEnumType
  area: SortEnumType
}

input Test_deleteFilterInput {
  and: [Test_deleteFilterInput!]
  or: [Test_deleteFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  meterId: StringOperationFilterInput
}

input Test_deleteSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  meterId: SortEnumType
}

input Test_deleteHistoryHistoryFilterInput {
  and: [Test_deleteHistoryHistoryFilterInput!]
  or: [Test_deleteHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  meterId: StringOperationFilterInput
}

input Test_deleteHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  meterId: SortEnumType
}

input Test_delete2FilterInput {
  and: [Test_delete2FilterInput!]
  or: [Test_delete2FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  meterId: StringOperationFilterInput
  address: Sub0DefaultFilterInput
}

input Test_delete2SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  meterId: SortEnumType
}

input Test_delete2HistoryHistoryFilterInput {
  and: [Test_delete2HistoryHistoryFilterInput!]
  or: [Test_delete2HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  meterId: StringOperationFilterInput
  address: Sub0DefaultHistoryHistoryFilterInput
}

input Test_delete2HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  meterId: SortEnumType
}

input PropertyTestFilterInput {
  and: [PropertyTestFilterInput!]
  or: [PropertyTestFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
  prop1: BooleanOperationFilterInput
}

input PropertyTestSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop2: SortEnumType
  prop1: SortEnumType
}

input PropertyTestHistoryHistoryFilterInput {
  and: [PropertyTestHistoryHistoryFilterInput!]
  or: [PropertyTestHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
  prop1: BooleanOperationFilterInput
}

input PropertyTestHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop2: SortEnumType
  prop1: SortEnumType
}

input PropertyTest2FilterInput {
  and: [PropertyTest2FilterInput!]
  or: [PropertyTest2FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
}

input PropertyTest2SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop2: SortEnumType
}

input PropertyTest2HistoryHistoryFilterInput {
  and: [PropertyTest2HistoryHistoryFilterInput!]
  or: [PropertyTest2HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
}

input PropertyTest2HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop2: SortEnumType
}

input PropertyTest3FilterInput {
  and: [PropertyTest3FilterInput!]
  or: [PropertyTest3FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
}

input PropertyTest3SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop2: SortEnumType
}

input PropertyTest3HistoryHistoryFilterInput {
  and: [PropertyTest3HistoryHistoryFilterInput!]
  or: [PropertyTest3HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
}

input PropertyTest3HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop2: SortEnumType
}

input PropertyTest4FilterInput {
  and: [PropertyTest4FilterInput!]
  or: [PropertyTest4FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
  prop3: BooleanOperationFilterInput
}

input PropertyTest4SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop1: SortEnumType
  prop3: SortEnumType
}

input PropertyTest4HistoryHistoryFilterInput {
  and: [PropertyTest4HistoryHistoryFilterInput!]
  or: [PropertyTest4HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
  prop3: BooleanOperationFilterInput
}

input PropertyTest4HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  prop1: SortEnumType
  prop3: SortEnumType
}

input TestHannaFilterInput {
  and: [TestHannaFilterInput!]
  or: [TestHannaFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  propEins: StringOperationFilterInput
}

input TestHannaSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  propEins: SortEnumType
}

input TestHannaHistoryHistoryFilterInput {
  and: [TestHannaHistoryHistoryFilterInput!]
  or: [TestHannaHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  propEins: StringOperationFilterInput
}

input TestHannaHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  propEins: SortEnumType
}

input TestSelectionListFilterInput {
  and: [TestSelectionListFilterInput!]
  or: [TestSelectionListFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
  selectionProp: SelectionListHannaFilterInput
  stringProp: StringOperationFilterInput
}

input TestSelectionListSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  numProp: SortEnumType
  stringProp: SortEnumType
}

input TestSelectionListHistoryHistoryFilterInput {
  and: [TestSelectionListHistoryHistoryFilterInput!]
  or: [TestSelectionListHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
  stringProp: StringOperationFilterInput
}

input TestSelectionListHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  numProp: SortEnumType
  stringProp: SortEnumType
}

input TestSelectionListAgainFilterInput {
  and: [TestSelectionListAgainFilterInput!]
  or: [TestSelectionListAgainFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  selectionProp: SelectionListHannaFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListAgainSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TestSelectionListAgainHistoryHistoryFilterInput {
  and: [TestSelectionListAgainHistoryHistoryFilterInput!]
  or: [TestSelectionListAgainHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListAgainHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TestSelectionListAgain3FilterInput {
  and: [TestSelectionListAgain3FilterInput!]
  or: [TestSelectionListAgain3FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  selectionProp: SelectionListHanna3FilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListAgain3SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TestSelectionListAgain3HistoryHistoryFilterInput {
  and: [TestSelectionListAgain3HistoryHistoryFilterInput!]
  or: [TestSelectionListAgain3HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListAgain3HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TestSelectionListAgain4FilterInput {
  and: [TestSelectionListAgain4FilterInput!]
  or: [TestSelectionListAgain4FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  selectionProp: SelectionListHanna4FilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListAgain4SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TestSelectionListAgain4HistoryHistoryFilterInput {
  and: [TestSelectionListAgain4HistoryHistoryFilterInput!]
  or: [TestSelectionListAgain4HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListAgain4HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input BasicInventoryFilterInput {
  and: [BasicInventoryFilterInput!]
  or: [BasicInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringField: StringOperationFilterInput
  numberField: ComparableDoubleOperationFilterInput
}

input BasicInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringField: SortEnumType
  numberField: SortEnumType
}

input BasicInventoryHistoryHistoryFilterInput {
  and: [BasicInventoryHistoryHistoryFilterInput!]
  or: [BasicInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringField: StringOperationFilterInput
  numberField: ComparableDoubleOperationFilterInput
}

input BasicInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  stringField: SortEnumType
  numberField: SortEnumType
}

input FullTestInventoryFilterInput {
  and: [FullTestInventoryFilterInput!]
  or: [FullTestInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  numberFieldNull: ComparableDoubleOperationFilterInput
  boolFieldNull: BooleanOperationFilterInput
  boolField: BooleanOperationFilterInput
  enumFieldList: ListCustomEnumOperationFilterInputTypeOfStocksFilterInput
  dateField: ComparableDateTimeOperationFilterInput
  enumFieldNull: StocksFilterInput
  dateFieldList: ListComparableDateTimeOperationFilterInput
  dateFieldNullList: ListComparableDateTimeOperationFilterInput
  stringFieldNullList: ListStringOperationFilterInput
  boolFieldNullList: ListBooleanOperationFilterInput
  boolFieldList: ListBooleanOperationFilterInput
  refFieldList: ListConcreteItemFilterInputTypeOfBasicInventoryFilterInput
  stringFieldList: ListStringOperationFilterInput
  enumFieldNullList: ListCustomEnumOperationFilterInputTypeOfStocksFilterInput
  refFieldNullList: ListConcreteItemFilterInputTypeOfBasicInventoryFilterInput
  stringFieldNull: StringOperationFilterInput
  stringField: StringOperationFilterInput
  numberField: ComparableDoubleOperationFilterInput
  numberFieldNullList: ListComparableDoubleOperationFilterInput
  numberFieldList: ListComparableDoubleOperationFilterInput
  refFieldNull: BasicInventoryFilterInput
  refField: BasicInventoryFilterInput
  dateFieldNull: ComparableDateTimeOperationFilterInput
  enumField: StocksFilterInput
}

input FullTestInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  numberFieldNull: SortEnumType
  boolFieldNull: SortEnumType
  boolField: SortEnumType
  dateField: SortEnumType
  stringFieldNull: SortEnumType
  stringField: SortEnumType
  numberField: SortEnumType
  dateFieldNull: SortEnumType
}

input FullTestInventoryHistoryHistoryFilterInput {
  and: [FullTestInventoryHistoryHistoryFilterInput!]
  or: [FullTestInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  numberFieldNull: ComparableDoubleOperationFilterInput
  boolFieldNull: BooleanOperationFilterInput
  boolField: BooleanOperationFilterInput
  dateField: ComparableDateTimeOperationFilterInput
  dateFieldList: ListComparableDateTimeOperationFilterInput
  dateFieldNullList: ListComparableDateTimeOperationFilterInput
  stringFieldNullList: ListStringOperationFilterInput
  boolFieldNullList: ListBooleanOperationFilterInput
  boolFieldList: ListBooleanOperationFilterInput
  refFieldList: ListConcreteHistoryItemFilterInputTypeOfBasicInventoryHistoryFilterInput
  stringFieldList: ListStringOperationFilterInput
  refFieldNullList: ListConcreteHistoryItemFilterInputTypeOfBasicInventoryHistoryFilterInput
  stringFieldNull: StringOperationFilterInput
  stringField: StringOperationFilterInput
  numberField: ComparableDoubleOperationFilterInput
  numberFieldNullList: ListComparableDoubleOperationFilterInput
  numberFieldList: ListComparableDoubleOperationFilterInput
  refFieldNull: BasicInventoryHistoryHistoryFilterInput
  refField: BasicInventoryHistoryHistoryFilterInput
  dateFieldNull: ComparableDateTimeOperationFilterInput
}

input FullTestInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  numberFieldNull: SortEnumType
  boolFieldNull: SortEnumType
  boolField: SortEnumType
  dateField: SortEnumType
  stringFieldNull: SortEnumType
  stringField: SortEnumType
  numberField: SortEnumType
  dateFieldNull: SortEnumType
}

input DispatcherMessagesFilterInput {
  and: [DispatcherMessagesFilterInput!]
  or: [DispatcherMessagesFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  wohnungsGruppe: StringOperationFilterInput
  temperatur: ComparableDoubleOperationFilterInput
  spannung: ComparableDoubleOperationFilterInput
}

input DispatcherMessagesSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  wohnungsGruppe: SortEnumType
  temperatur: SortEnumType
  spannung: SortEnumType
}

input DispatcherMessagesHistoryHistoryFilterInput {
  and: [DispatcherMessagesHistoryHistoryFilterInput!]
  or: [DispatcherMessagesHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  wohnungsGruppe: StringOperationFilterInput
  temperatur: ComparableDoubleOperationFilterInput
  spannung: ComparableDoubleOperationFilterInput
}

input DispatcherMessagesHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  wohnungsGruppe: SortEnumType
  temperatur: SortEnumType
  spannung: SortEnumType
}

input UpperTestFieldNameFilterInput {
  and: [UpperTestFieldNameFilterInput!]
  or: [UpperTestFieldNameFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  propField: StringOperationFilterInput
}

input UpperTestFieldNameSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  propField: SortEnumType
}

input UpperTestFieldNameHistoryHistoryFilterInput {
  and: [UpperTestFieldNameHistoryHistoryFilterInput!]
  or: [UpperTestFieldNameHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  propField: StringOperationFilterInput
}

input UpperTestFieldNameHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  propField: SortEnumType
}

input DeleteMeFilterInput {
  and: [DeleteMeFilterInput!]
  or: [DeleteMeFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  lalal: StringOperationFilterInput
}

input DeleteMeSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  lalal: SortEnumType
}

input DeleteMeHistoryHistoryFilterInput {
  and: [DeleteMeHistoryHistoryFilterInput!]
  or: [DeleteMeHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  lalal: StringOperationFilterInput
}

input DeleteMeHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  lalal: SortEnumType
}

"A connection to a list of items."
type Sub0DefaultConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Sub0DefaultEdge!]
  "A flattened list of the nodes."
  nodes: [Sub0Default]
  totalCount: Int!
}

"A connection to a list of items."
type Sub0DefaultHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Sub0DefaultHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [Sub0DefaultHistory]
  totalCount: Int!
}

"A connection to a list of items."
type Sub0DefaultTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Sub0DefaultTopicEdge!]
  "A flattened list of the nodes."
  nodes: [Sub0DefaultTopic]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryWithPropertiesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryWithPropertiesEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryWithProperties]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryWithPropertiesHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryWithPropertiesHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryWithPropertiesHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryWithPropertiesTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryWithPropertiesTopicEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryWithPropertiesTopic]
  totalCount: Int!
}

"A connection to a list of items."
type WohnungConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [WohnungEdge!]
  "A flattened list of the nodes."
  nodes: [Wohnung]
  totalCount: Int!
}

"A connection to a list of items."
type WohnungHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [WohnungHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [WohnungHistory]
  totalCount: Int!
}

"A connection to a list of items."
type WohnungTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [WohnungTopicEdge!]
  "A flattened list of the nodes."
  nodes: [WohnungTopic]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryRemovePropsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryRemovePropsEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryRemoveProps]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryRemovePropsHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryRemovePropsHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryRemovePropsHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryRemovePropsTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryRemovePropsTopicEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryRemovePropsTopic]
  totalCount: Int!
}

"A connection to a list of items."
type EmTestFConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTestFEdge!]
  "A flattened list of the nodes."
  nodes: [EmTestF]
  totalCount: Int!
}

"A connection to a list of items."
type EmTestFHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTestFHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [EmTestFHistory]
  totalCount: Int!
}

"A connection to a list of items."
type EmTestFTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTestFTopicEdge!]
  "A flattened list of the nodes."
  nodes: [EmTestFTopic]
  totalCount: Int!
}

"A connection to a list of items."
type EmTest1FConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTest1FEdge!]
  "A flattened list of the nodes."
  nodes: [EmTest1F]
  totalCount: Int!
}

"A connection to a list of items."
type EmTest1FHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTest1FHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [EmTest1FHistory]
  totalCount: Int!
}

"A connection to a list of items."
type EmTest1FTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTest1FTopicEdge!]
  "A flattened list of the nodes."
  nodes: [EmTest1FTopic]
  totalCount: Int!
}

"A connection to a list of items."
type EmTest4FConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTest4FEdge!]
  "A flattened list of the nodes."
  nodes: [EmTest4F]
  totalCount: Int!
}

"A connection to a list of items."
type EmTest4FHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTest4FHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [EmTest4FHistory]
  totalCount: Int!
}

"A connection to a list of items."
type EmTest4FTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmTest4FTopicEdge!]
  "A flattened list of the nodes."
  nodes: [EmTest4FTopic]
  totalCount: Int!
}

"A connection to a list of items."
type InputClearingPositionTransactionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputClearingPositionTransactionEdge!]
  "A flattened list of the nodes."
  nodes: [InputClearingPositionTransaction]
  totalCount: Int!
}

"A connection to a list of items."
type InputClearingPositionTransactionHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputClearingPositionTransactionHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InputClearingPositionTransactionHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InputClearingPositionTransactionTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputClearingPositionTransactionTopicEdge!]
  "A flattened list of the nodes."
  nodes: [InputClearingPositionTransactionTopic]
  totalCount: Int!
}

"A connection to a list of items."
type InputTransitionTransactionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputTransitionTransactionEdge!]
  "A flattened list of the nodes."
  nodes: [InputTransitionTransaction]
  totalCount: Int!
}

"A connection to a list of items."
type InputTransitionTransactionHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputTransitionTransactionHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InputTransitionTransactionHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InputTransitionTransactionTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputTransitionTransactionTopicEdge!]
  "A flattened list of the nodes."
  nodes: [InputTransitionTransactionTopic]
  totalCount: Int!
}

"A connection to a list of items."
type InputTradeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputTradeEdge!]
  "A flattened list of the nodes."
  nodes: [InputTrade]
  totalCount: Int!
}

"A connection to a list of items."
type InputTradeHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputTradeHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InputTradeHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InputTradeTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InputTradeTopicEdge!]
  "A flattened list of the nodes."
  nodes: [InputTradeTopic]
  totalCount: Int!
}

"A connection to a list of items."
type RemitTradeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RemitTradeEdge!]
  "A flattened list of the nodes."
  nodes: [RemitTrade]
  totalCount: Int!
}

"A connection to a list of items."
type RemitTradeHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RemitTradeHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [RemitTradeHistory]
  totalCount: Int!
}

"A connection to a list of items."
type RemitTradeTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RemitTradeTopicEdge!]
  "A flattened list of the nodes."
  nodes: [RemitTradeTopic]
  totalCount: Int!
}

"A connection to a list of items."
type InternalDataSourceConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InternalDataSourceEdge!]
  "A flattened list of the nodes."
  nodes: [InternalDataSource]
  totalCount: Int!
}

"A connection to a list of items."
type InternalDataSourceHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InternalDataSourceHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InternalDataSourceHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InternalDataSourceTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InternalDataSourceTopicEdge!]
  "A flattened list of the nodes."
  nodes: [InternalDataSourceTopic]
  totalCount: Int!
}

"A connection to a list of items."
type FlatsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FlatsEdge!]
  "A flattened list of the nodes."
  nodes: [Flats]
  totalCount: Int!
}

"A connection to a list of items."
type FlatsHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FlatsHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [FlatsHistory]
  totalCount: Int!
}

"A connection to a list of items."
type FlatsTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FlatsTopicEdge!]
  "A flattened list of the nodes."
  nodes: [FlatsTopic]
  totalCount: Int!
}

"A connection to a list of items."
type Test_deleteConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Test_deleteEdge!]
  "A flattened list of the nodes."
  nodes: [Test_delete]
  totalCount: Int!
}

"A connection to a list of items."
type Test_deleteHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Test_deleteHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [Test_deleteHistory]
  totalCount: Int!
}

"A connection to a list of items."
type Test_deleteTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Test_deleteTopicEdge!]
  "A flattened list of the nodes."
  nodes: [Test_deleteTopic]
  totalCount: Int!
}

"A connection to a list of items."
type Test_delete2Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Test_delete2Edge!]
  "A flattened list of the nodes."
  nodes: [Test_delete2]
  totalCount: Int!
}

"A connection to a list of items."
type Test_delete2HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Test_delete2HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [Test_delete2History]
  totalCount: Int!
}

"A connection to a list of items."
type Test_delete2TopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Test_delete2TopicEdge!]
  "A flattened list of the nodes."
  nodes: [Test_delete2Topic]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTestEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTestHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTestHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTestHistory]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTestTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTestTopicEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTestTopic]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest2Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest2Edge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest2]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest2HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest2HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest2History]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest2TopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest2TopicEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest2Topic]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest3Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest3Edge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest3]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest3HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest3HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest3History]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest3TopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest3TopicEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest3Topic]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest4Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest4Edge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest4]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest4HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest4HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest4History]
  totalCount: Int!
}

"A connection to a list of items."
type PropertyTest4TopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyTest4TopicEdge!]
  "A flattened list of the nodes."
  nodes: [PropertyTest4Topic]
  totalCount: Int!
}

"A connection to a list of items."
type TestHannaConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestHannaEdge!]
  "A flattened list of the nodes."
  nodes: [TestHanna]
  totalCount: Int!
}

"A connection to a list of items."
type TestHannaHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestHannaHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestHannaHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TestHannaTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestHannaTopicEdge!]
  "A flattened list of the nodes."
  nodes: [TestHannaTopic]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionList]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListTopicEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListTopic]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgainConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgainEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgainHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgainHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgainHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgainTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgainTopicEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgainTopic]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgain3Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgain3Edge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain3]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgain3HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgain3HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain3History]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgain3TopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgain3TopicEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain3Topic]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgain4Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgain4Edge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain4]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgain4HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgain4HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain4History]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListAgain4TopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListAgain4TopicEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListAgain4Topic]
  totalCount: Int!
}

"A connection to a list of items."
type BasicInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BasicInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [BasicInventory]
  totalCount: Int!
}

"A connection to a list of items."
type BasicInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BasicInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [BasicInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type BasicInventoryTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BasicInventoryTopicEdge!]
  "A flattened list of the nodes."
  nodes: [BasicInventoryTopic]
  totalCount: Int!
}

"A connection to a list of items."
type FullTestInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FullTestInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [FullTestInventory]
  totalCount: Int!
}

"A connection to a list of items."
type FullTestInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FullTestInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [FullTestInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type FullTestInventoryTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FullTestInventoryTopicEdge!]
  "A flattened list of the nodes."
  nodes: [FullTestInventoryTopic]
  totalCount: Int!
}

"A connection to a list of items."
type DispatcherMessagesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DispatcherMessagesEdge!]
  "A flattened list of the nodes."
  nodes: [DispatcherMessages]
  totalCount: Int!
}

"A connection to a list of items."
type DispatcherMessagesHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DispatcherMessagesHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [DispatcherMessagesHistory]
  totalCount: Int!
}

"A connection to a list of items."
type DispatcherMessagesTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DispatcherMessagesTopicEdge!]
  "A flattened list of the nodes."
  nodes: [DispatcherMessagesTopic]
  totalCount: Int!
}

"A connection to a list of items."
type UpperTestFieldNameConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UpperTestFieldNameEdge!]
  "A flattened list of the nodes."
  nodes: [UpperTestFieldName]
  totalCount: Int!
}

"A connection to a list of items."
type UpperTestFieldNameHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UpperTestFieldNameHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [UpperTestFieldNameHistory]
  totalCount: Int!
}

"A connection to a list of items."
type UpperTestFieldNameTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UpperTestFieldNameTopicEdge!]
  "A flattened list of the nodes."
  nodes: [UpperTestFieldNameTopic]
  totalCount: Int!
}

"A connection to a list of items."
type DeleteMeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DeleteMeEdge!]
  "A flattened list of the nodes."
  nodes: [DeleteMe]
  totalCount: Int!
}

"A connection to a list of items."
type DeleteMeHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DeleteMeHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [DeleteMeHistory]
  totalCount: Int!
}

"A connection to a list of items."
type DeleteMeTopicConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DeleteMeTopicEdge!]
  "A flattened list of the nodes."
  nodes: [DeleteMeTopic]
  totalCount: Int!
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

input HannasTSInFilterInput {
  and: [HannasTSInFilterInput!]
  or: [HannasTSInFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInHistoryHistoryFilterInput {
  and: [HannasTSInHistoryHistoryFilterInput!]
  or: [HannasTSInHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInvFilterInput {
  and: [HannasTSInvFilterInput!]
  or: [HannasTSInvFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInvSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInvHistoryHistoryFilterInput {
  and: [HannasTSInvHistoryHistoryFilterInput!]
  or: [HannasTSInvHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInvHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventFilterInput {
  and: [HannasTSInventFilterInput!]
  or: [HannasTSInventFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventHistoryHistoryFilterInput {
  and: [HannasTSInventHistoryHistoryFilterInput!]
  or: [HannasTSInventHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInvenFilterInput {
  and: [HannasTSInvenFilterInput!]
  or: [HannasTSInvenFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInvenSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInvenHistoryHistoryFilterInput {
  and: [HannasTSInvenHistoryHistoryFilterInput!]
  or: [HannasTSInvenHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInvenHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventoFilterInput {
  and: [HannasTSInventoFilterInput!]
  or: [HannasTSInventoFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventoSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventoHistoryHistoryFilterInput {
  and: [HannasTSInventoHistoryHistoryFilterInput!]
  or: [HannasTSInventoHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventoHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventory1FilterInput {
  and: [HannasTSInventory1FilterInput!]
  or: [HannasTSInventory1FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventory1SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventory1HistoryHistoryFilterInput {
  and: [HannasTSInventory1HistoryHistoryFilterInput!]
  or: [HannasTSInventory1HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventory1HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventoryWithoutName1FilterInput {
  and: [HannasTSInventoryWithoutName1FilterInput!]
  or: [HannasTSInventoryWithoutName1FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventoryWithoutName1SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasTSInventoryWithoutName1HistoryHistoryFilterInput {
  and: [HannasTSInventoryWithoutName1HistoryHistoryFilterInput!]
  or: [HannasTSInventoryWithoutName1HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input HannasTSInventoryWithoutName1HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  numericProp: SortEnumType
}

input HannasInventoryWithPropertyNameFilterInput {
  and: [HannasInventoryWithPropertyNameFilterInput!]
  or: [HannasInventoryWithPropertyNameFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  name: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
}

input HannasInventoryWithPropertyNameSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  name: SortEnumType
  prop1: SortEnumType
}

input HannasInventoryWithPropertyNameHistoryHistoryFilterInput {
  and: [HannasInventoryWithPropertyNameHistoryHistoryFilterInput!]
  or: [HannasInventoryWithPropertyNameHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  name: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
}

input HannasInventoryWithPropertyNameHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  name: SortEnumType
  prop1: SortEnumType
}

input HannasInventoryFilterInput {
  and: [HannasInventoryFilterInput!]
  or: [HannasInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  achteProperty: StringOperationFilterInput
  sechsteProperty: StringOperationFilterInput
  vierteProperty: StringOperationFilterInput
  siebteProperty: BooleanOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
  firstPropertyString: StringOperationFilterInput
  dritteProperty: BooleanOperationFilterInput
  fuenfteProperty: BooleanOperationFilterInput
}

input HannasInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  achteProperty: SortEnumType
  sechsteProperty: SortEnumType
  vierteProperty: SortEnumType
  siebteProperty: SortEnumType
  firstPropertyBool: SortEnumType
  firstPropertyString: SortEnumType
  dritteProperty: SortEnumType
  fuenfteProperty: SortEnumType
}

input HannasInventoryHistoryHistoryFilterInput {
  and: [HannasInventoryHistoryHistoryFilterInput!]
  or: [HannasInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  achteProperty: StringOperationFilterInput
  sechsteProperty: StringOperationFilterInput
  vierteProperty: StringOperationFilterInput
  siebteProperty: BooleanOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
  firstPropertyString: StringOperationFilterInput
  dritteProperty: BooleanOperationFilterInput
  fuenfteProperty: BooleanOperationFilterInput
}

input HannasInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  achteProperty: SortEnumType
  sechsteProperty: SortEnumType
  vierteProperty: SortEnumType
  siebteProperty: SortEnumType
  firstPropertyBool: SortEnumType
  firstPropertyString: SortEnumType
  dritteProperty: SortEnumType
  fuenfteProperty: SortEnumType
}

input InventoryToUpdateFilterInput {
  and: [InventoryToUpdateFilterInput!]
  or: [InventoryToUpdateFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstUpdatedPropertyBool: BooleanOperationFilterInput
  firstPropertyString: StringOperationFilterInput
}

input InventoryToUpdateSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstUpdatedPropertyBool: SortEnumType
  firstPropertyString: SortEnumType
}

input InventoryToUpdateHistoryHistoryFilterInput {
  and: [InventoryToUpdateHistoryHistoryFilterInput!]
  or: [InventoryToUpdateHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstUpdatedPropertyBool: BooleanOperationFilterInput
  firstPropertyString: StringOperationFilterInput
}

input InventoryToUpdateHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstUpdatedPropertyBool: SortEnumType
  firstPropertyString: SortEnumType
}

input InventoryToDeleteFilterInput {
  and: [InventoryToDeleteFilterInput!]
  or: [InventoryToDeleteFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyString: StringOperationFilterInput
}

input InventoryToDeleteSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyString: SortEnumType
}

input InventoryToDeleteHistoryHistoryFilterInput {
  and: [InventoryToDeleteHistoryHistoryFilterInput!]
  or: [InventoryToDeleteHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyString: StringOperationFilterInput
}

input InventoryToDeleteHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyString: SortEnumType
}

input InventoryToTestFilterInput {
  and: [InventoryToTestFilterInput!]
  or: [InventoryToTestFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
  firstPropertyString: StringOperationFilterInput
}

input InventoryToTestSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyBool: SortEnumType
  firstPropertyString: SortEnumType
}

input InventoryToTestHistoryHistoryFilterInput {
  and: [InventoryToTestHistoryHistoryFilterInput!]
  or: [InventoryToTestHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
  firstPropertyString: StringOperationFilterInput
}

input InventoryToTestHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyBool: SortEnumType
  firstPropertyString: SortEnumType
}

input InventoryToTest2FilterInput {
  and: [InventoryToTest2FilterInput!]
  or: [InventoryToTest2FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyString: StringOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
}

input InventoryToTest2SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyString: SortEnumType
  firstPropertyBool: SortEnumType
}

input InventoryToTest2HistoryHistoryFilterInput {
  and: [InventoryToTest2HistoryHistoryFilterInput!]
  or: [InventoryToTest2HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyString: StringOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
}

input InventoryToTest2HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyString: SortEnumType
  firstPropertyBool: SortEnumType
}

input InventoryPropTypes3FilterInput {
  and: [InventoryPropTypes3FilterInput!]
  or: [InventoryPropTypes3FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
}

input InventoryPropTypes3SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyBool: SortEnumType
}

input InventoryPropTypes3HistoryHistoryFilterInput {
  and: [InventoryPropTypes3HistoryHistoryFilterInput!]
  or: [InventoryPropTypes3HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyBool: BooleanOperationFilterInput
}

input InventoryPropTypes3HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  firstPropertyBool: SortEnumType
}

input InventoryPropTypesWithListTypeTrueFilterInput {
  and: [InventoryPropTypesWithListTypeTrueFilterInput!]
  or: [InventoryPropTypesWithListTypeTrueFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyBool: ListBooleanOperationFilterInput
}

input InventoryPropTypesWithListTypeTrueSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InventoryPropTypesWithListTypeTrueHistoryHistoryFilterInput {
  and: [InventoryPropTypesWithListTypeTrueHistoryHistoryFilterInput!]
  or: [InventoryPropTypesWithListTypeTrueHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  firstPropertyBool: ListBooleanOperationFilterInput
}

input InventoryPropTypesWithListTypeTrueHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InventoryPropTypesWithListTypeTrueBoolFilterInput {
  and: [InventoryPropTypesWithListTypeTrueBoolFilterInput!]
  or: [InventoryPropTypesWithListTypeTrueBoolFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  propBool: ListBooleanOperationFilterInput
}

input InventoryPropTypesWithListTypeTrueBoolSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InventoryPropTypesWithListTypeTrueBoolHistoryHistoryFilterInput {
  and: [InventoryPropTypesWithListTypeTrueBoolHistoryHistoryFilterInput!]
  or: [InventoryPropTypesWithListTypeTrueBoolHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  propBool: ListBooleanOperationFilterInput
}

input InventoryPropTypesWithListTypeTrueBoolHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input ReferencedInventoryFilterInput {
  and: [ReferencedInventoryFilterInput!]
  or: [ReferencedInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  refProp: InventoryToTestFilterInput
}

input ReferencedInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input ReferencedInventoryHistoryHistoryFilterInput {
  and: [ReferencedInventoryHistoryHistoryFilterInput!]
  or: [ReferencedInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  refProp: InventoryToTestHistoryHistoryFilterInput
}

input ReferencedInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InventoryPropReferencedFilterInput {
  and: [InventoryPropReferencedFilterInput!]
  or: [InventoryPropReferencedFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  referencedProp: InventoryToTestFilterInput
}

input InventoryPropReferencedSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InventoryPropReferencedHistoryHistoryFilterInput {
  and: [InventoryPropReferencedHistoryHistoryFilterInput!]
  or: [InventoryPropReferencedHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  referencedProp: InventoryToTestHistoryHistoryFilterInput
}

input InventoryPropReferencedHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input UpdatedInventoryFilterInput {
  and: [UpdatedInventoryFilterInput!]
  or: [UpdatedInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldUpdated: InventoryToTestFilterInput
}

input UpdatedInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input UpdatedInventoryHistoryHistoryFilterInput {
  and: [UpdatedInventoryHistoryHistoryFilterInput!]
  or: [UpdatedInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldUpdated: InventoryToTestHistoryHistoryFilterInput
}

input UpdatedInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InvTestFilterInput {
  and: [InvTestFilterInput!]
  or: [InvTestFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName: ListBooleanOperationFilterInput
}

input InvTestSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InvTestHistoryHistoryFilterInput {
  and: [InvTestHistoryHistoryFilterInput!]
  or: [InvTestHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName: ListBooleanOperationFilterInput
}

input InvTestHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
}

input InvTest2FilterInput {
  and: [InvTest2FilterInput!]
  or: [InvTest2FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName: BooleanOperationFilterInput
}

input InvTest2SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName: SortEnumType
}

input InvTest2HistoryHistoryFilterInput {
  and: [InvTest2HistoryHistoryFilterInput!]
  or: [InvTest2HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName: BooleanOperationFilterInput
}

input InvTest2HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName: SortEnumType
}

input InvTest3FilterInput {
  and: [InvTest3FilterInput!]
  or: [InvTest3FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName: BooleanOperationFilterInput
}

input InvTest3SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName: SortEnumType
}

input InvTest3HistoryHistoryFilterInput {
  and: [InvTest3HistoryHistoryFilterInput!]
  or: [InvTest3HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName: BooleanOperationFilterInput
}

input InvTest3HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName: SortEnumType
}

input InventoryRemovePropsTimeSeriesFilterInput {
  and: [InventoryRemovePropsTimeSeriesFilterInput!]
  or: [InventoryRemovePropsTimeSeriesFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName2: StringOperationFilterInput
}

input InventoryRemovePropsTimeSeriesSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName2: SortEnumType
}

input InventoryRemovePropsTimeSeriesHistoryHistoryFilterInput {
  and: [InventoryRemovePropsTimeSeriesHistoryHistoryFilterInput!]
  or: [InventoryRemovePropsTimeSeriesHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName2: StringOperationFilterInput
}

input InventoryRemovePropsTimeSeriesHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName2: SortEnumType
}

input InventorySetDataFilterInput {
  and: [InventorySetDataFilterInput!]
  or: [InventorySetDataFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName1: BooleanOperationFilterInput
}

input InventorySetDataSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName1: SortEnumType
}

input InventorySetDataHistoryHistoryFilterInput {
  and: [InventorySetDataHistoryHistoryFilterInput!]
  or: [InventorySetDataHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName1: BooleanOperationFilterInput
}

input InventorySetDataHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName1: SortEnumType
}

input PythonTimeseriesTestFilterInput {
  and: [PythonTimeseriesTestFilterInput!]
  or: [PythonTimeseriesTestFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  dateTime: ComparableDateTimeOperationFilterInput
}

input PythonTimeseriesTestSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  dateTime: SortEnumType
}

input PythonTimeseriesTestHistoryHistoryFilterInput {
  and: [PythonTimeseriesTestHistoryHistoryFilterInput!]
  or: [PythonTimeseriesTestHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  dateTime: ComparableDateTimeOperationFilterInput
}

input PythonTimeseriesTestHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  dateTime: SortEnumType
}

input HannasQueryTestInventoryFilterInput {
  and: [HannasQueryTestInventoryFilterInput!]
  or: [HannasQueryTestInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName1: BooleanOperationFilterInput
}

input HannasQueryTestInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName1: SortEnumType
}

input HannasQueryTestInventoryHistoryHistoryFilterInput {
  and: [HannasQueryTestInventoryHistoryHistoryFilterInput!]
  or: [HannasQueryTestInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fieldName1: BooleanOperationFilterInput
}

input HannasQueryTestInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fieldName1: SortEnumType
}

input PythonTimeseriesTTNTestFilterInput {
  and: [PythonTimeseriesTTNTestFilterInput!]
  or: [PythonTimeseriesTTNTestFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  publicationDate: ComparableDateTimeOperationFilterInput
  strikePrice: ComparableDoubleOperationFilterInput
}

input PythonTimeseriesTTNTestSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  publicationDate: SortEnumType
  strikePrice: SortEnumType
}

input PythonTimeseriesTTNTestHistoryHistoryFilterInput {
  and: [PythonTimeseriesTTNTestHistoryHistoryFilterInput!]
  or: [PythonTimeseriesTTNTestHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  publicationDate: ComparableDateTimeOperationFilterInput
  strikePrice: ComparableDoubleOperationFilterInput
}

input PythonTimeseriesTTNTestHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  publicationDate: SortEnumType
  strikePrice: SortEnumType
}

input HannasTestUpdateInventoryFilterInput {
  and: [HannasTestUpdateInventoryFilterInput!]
  or: [HannasTestUpdateInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  bool: BooleanOperationFilterInput
  string: StringOperationFilterInput
}

input HannasTestUpdateInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  bool: SortEnumType
  string: SortEnumType
}

input HannasTestUpdateInventoryHistoryHistoryFilterInput {
  and: [HannasTestUpdateInventoryHistoryHistoryFilterInput!]
  or: [HannasTestUpdateInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  bool: BooleanOperationFilterInput
  string: StringOperationFilterInput
}

input HannasTestUpdateInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  bool: SortEnumType
  string: SortEnumType
}

input HannasUpdatedInventarFilterInput {
  and: [HannasUpdatedInventarFilterInput!]
  or: [HannasUpdatedInventarFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  updatedStringField: StringOperationFilterInput
  string: StringOperationFilterInput
}

input HannasUpdatedInventarSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  updatedStringField: SortEnumType
  string: SortEnumType
}

input HannasUpdatedInventarHistoryHistoryFilterInput {
  and: [HannasUpdatedInventarHistoryHistoryFilterInput!]
  or: [HannasUpdatedInventarHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  updatedStringField: StringOperationFilterInput
  string: StringOperationFilterInput
}

input HannasUpdatedInventarHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  updatedStringField: SortEnumType
  string: SortEnumType
}

input HannasTestValueTypeInventarFilterInput {
  and: [HannasTestValueTypeInventarFilterInput!]
  or: [HannasTestValueTypeInventarFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  string: StringOperationFilterInput
  bool: BooleanOperationFilterInput
}

input HannasTestValueTypeInventarSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  string: SortEnumType
  bool: SortEnumType
}

input HannasTestValueTypeInventarHistoryHistoryFilterInput {
  and: [HannasTestValueTypeInventarHistoryHistoryFilterInput!]
  or: [HannasTestValueTypeInventarHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  string: StringOperationFilterInput
  bool: BooleanOperationFilterInput
}

input HannasTestValueTypeInventarHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  string: SortEnumType
  bool: SortEnumType
}

input HannasInventoryCreateFilterInput {
  and: [HannasInventoryCreateFilterInput!]
  or: [HannasInventoryCreateFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  bool: BooleanOperationFilterInput
  string: StringOperationFilterInput
}

input HannasInventoryCreateSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  bool: SortEnumType
  string: SortEnumType
}

input HannasInventoryCreateHistoryHistoryFilterInput {
  and: [HannasInventoryCreateHistoryHistoryFilterInput!]
  or: [HannasInventoryCreateHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  bool: BooleanOperationFilterInput
  string: StringOperationFilterInput
}

input HannasInventoryCreateHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  bool: SortEnumType
  string: SortEnumType
}

input HannasInventoryCreate2FilterInput {
  and: [HannasInventoryCreate2FilterInput!]
  or: [HannasInventoryCreate2FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  string: StringOperationFilterInput
  bool: BooleanOperationFilterInput
}

input HannasInventoryCreate2SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  string: SortEnumType
  bool: SortEnumType
}

input HannasInventoryCreate2HistoryHistoryFilterInput {
  and: [HannasInventoryCreate2HistoryHistoryFilterInput!]
  or: [HannasInventoryCreate2HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  string: StringOperationFilterInput
  bool: BooleanOperationFilterInput
}

input HannasInventoryCreate2HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  string: SortEnumType
  bool: SortEnumType
}

input MeterDataFilterInput {
  and: [MeterDataFilterInput!]
  or: [MeterDataFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fullName: StringOperationFilterInput
  meterId: StringOperationFilterInput
  object: StringOperationFilterInput
  measure: StringOperationFilterInput
  calculation: StringOperationFilterInput
}

input MeterDataSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fullName: SortEnumType
  meterId: SortEnumType
  object: SortEnumType
  measure: SortEnumType
  calculation: SortEnumType
}

input MeterDataHistoryHistoryFilterInput {
  and: [MeterDataHistoryHistoryFilterInput!]
  or: [MeterDataHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  fullName: StringOperationFilterInput
  meterId: StringOperationFilterInput
  object: StringOperationFilterInput
  measure: StringOperationFilterInput
  calculation: StringOperationFilterInput
}

input MeterDataHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  fullName: SortEnumType
  meterId: SortEnumType
  object: SortEnumType
  measure: SortEnumType
  calculation: SortEnumType
}

input MeterData1FilterInput {
  and: [MeterData1FilterInput!]
  or: [MeterData1FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  calculation: StringOperationFilterInput
  object: StringOperationFilterInput
  fullName: StringOperationFilterInput
  measure: StringOperationFilterInput
  meterId: StringOperationFilterInput
}

input MeterData1SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  calculation: SortEnumType
  object: SortEnumType
  fullName: SortEnumType
  measure: SortEnumType
  meterId: SortEnumType
}

input MeterData1HistoryHistoryFilterInput {
  and: [MeterData1HistoryHistoryFilterInput!]
  or: [MeterData1HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  calculation: StringOperationFilterInput
  object: StringOperationFilterInput
  fullName: StringOperationFilterInput
  measure: StringOperationFilterInput
  meterId: StringOperationFilterInput
}

input MeterData1HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  calculation: SortEnumType
  object: SortEnumType
  fullName: SortEnumType
  measure: SortEnumType
  meterId: SortEnumType
}

input MarktdatenFilterInput {
  and: [MarktdatenFilterInput!]
  or: [MarktdatenFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  measure: StringOperationFilterInput
  seasonalDelivery: StringOperationFilterInput
  instrument: StringOperationFilterInput
  source: StringOperationFilterInput
  provider: StringOperationFilterInput
  commodity: StringOperationFilterInput
  location_country: StringOperationFilterInput
  ts_name: StringOperationFilterInput
}

input MarktdatenSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  measure: SortEnumType
  seasonalDelivery: SortEnumType
  instrument: SortEnumType
  source: SortEnumType
  provider: SortEnumType
  commodity: SortEnumType
  location_country: SortEnumType
  ts_name: SortEnumType
}

input MarktdatenHistoryHistoryFilterInput {
  and: [MarktdatenHistoryHistoryFilterInput!]
  or: [MarktdatenHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  measure: StringOperationFilterInput
  seasonalDelivery: StringOperationFilterInput
  instrument: StringOperationFilterInput
  source: StringOperationFilterInput
  provider: StringOperationFilterInput
  commodity: StringOperationFilterInput
  location_country: StringOperationFilterInput
  ts_name: StringOperationFilterInput
}

input MarktdatenHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  measure: SortEnumType
  seasonalDelivery: SortEnumType
  instrument: SortEnumType
  source: SortEnumType
  provider: SortEnumType
  commodity: SortEnumType
  location_country: SortEnumType
  ts_name: SortEnumType
}

input ConcreteTimeSeriesInventoryFilterInput {
  and: [ConcreteTimeSeriesInventoryFilterInput!]
  or: [ConcreteTimeSeriesInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input ConcreteTimeSeriesInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  numericProp: SortEnumType
}

input ConcreteTimeSeriesInventoryHistoryHistoryFilterInput {
  and: [ConcreteTimeSeriesInventoryHistoryHistoryFilterInput!]
  or: [ConcreteTimeSeriesInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  numericProp: ComparableDoubleOperationFilterInput
}

input ConcreteTimeSeriesInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  numericProp: SortEnumType
}

input TSInvFilterInput {
  and: [TSInvFilterInput!]
  or: [TSInvFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  bilanzkreis: StringOperationFilterInput
  attribut: StringOperationFilterInput
  messstelle: StringOperationFilterInput
  netz: StringOperationFilterInput
  name: StringOperationFilterInput
}

input TSInvSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  bilanzkreis: SortEnumType
  attribut: SortEnumType
  messstelle: SortEnumType
  netz: SortEnumType
  name: SortEnumType
}

input TSInvHistoryHistoryFilterInput {
  and: [TSInvHistoryHistoryFilterInput!]
  or: [TSInvHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  bilanzkreis: StringOperationFilterInput
  attribut: StringOperationFilterInput
  messstelle: StringOperationFilterInput
  netz: StringOperationFilterInput
  name: StringOperationFilterInput
}

input TSInvHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  bilanzkreis: SortEnumType
  attribut: SortEnumType
  messstelle: SortEnumType
  netz: SortEnumType
  name: SortEnumType
}

input TestSelectionListTimeSeriesInventoryFilterInput {
  and: [TestSelectionListTimeSeriesInventoryFilterInput!]
  or: [TestSelectionListTimeSeriesInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  selectionProp: SelectionListHanna4FilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListTimeSeriesInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TestSelectionListTimeSeriesInventoryHistoryHistoryFilterInput {
  and: [TestSelectionListTimeSeriesInventoryHistoryHistoryFilterInput!]
  or: [TestSelectionListTimeSeriesInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TestSelectionListTimeSeriesInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TSInventoryFilterInput {
  and: [TSInventoryFilterInput!]
  or: [TSInventoryFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
}

input TSInventorySortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
}

input TSInventoryHistoryHistoryFilterInput {
  and: [TSInventoryHistoryHistoryFilterInput!]
  or: [TSInventoryHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
}

input TSInventoryHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
}

input TimeSeries11FilterInput {
  and: [TimeSeries11FilterInput!]
  or: [TimeSeries11FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TimeSeries11SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TimeSeries11HistoryHistoryFilterInput {
  and: [TimeSeries11HistoryHistoryFilterInput!]
  or: [TimeSeries11HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TimeSeries11HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  numProp: SortEnumType
}

input TimeSeriesJuergenFilterInput {
  and: [TimeSeriesJuergenFilterInput!]
  or: [TimeSeriesJuergenFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  dateProp: ComparableDateTimeOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TimeSeriesJuergenSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  dateProp: SortEnumType
  numProp: SortEnumType
}

input TimeSeriesJuergenHistoryHistoryFilterInput {
  and: [TimeSeriesJuergenHistoryHistoryFilterInput!]
  or: [TimeSeriesJuergenHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesGroupItemId: ComparableNullableOfGuidOperationFilterInput
  stringProp: StringOperationFilterInput
  dateProp: ComparableDateTimeOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

input TimeSeriesJuergenHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesGroupItemId: SortEnumType
  stringProp: SortEnumType
  dateProp: SortEnumType
  numProp: SortEnumType
}

"A connection to a list of items."
type HannasTSInConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSIn]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInvConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInvEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInv]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInvHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInvHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInvHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInvent]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInventHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInvenConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInvenEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInven]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInvenHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInvenHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInvenHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventoConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventoEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInvento]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventoHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventoHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInventoHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventory1Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventory1Edge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInventory1]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventory1HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventory1HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInventory1History]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventoryWithoutName1Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventoryWithoutName1Edge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInventoryWithoutName1]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTSInventoryWithoutName1HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTSInventoryWithoutName1HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTSInventoryWithoutName1History]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryWithPropertyNameConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryWithPropertyNameEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryWithPropertyName]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryWithPropertyNameHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryWithPropertyNameHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryWithPropertyNameHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToUpdateConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToUpdateEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToUpdate]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToUpdateHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToUpdateHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToUpdateHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToDeleteConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToDeleteEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToDelete]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToDeleteHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToDeleteHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToDeleteHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToTestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToTestEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToTest]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToTestHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToTestHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToTestHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToTest2Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToTest2Edge!]
  "A flattened list of the nodes."
  nodes: [InventoryToTest2]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryToTest2HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryToTest2HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryToTest2History]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropTypes3Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropTypes3Edge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropTypes3]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropTypes3HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropTypes3HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropTypes3History]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropTypesWithListTypeTrueConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropTypesWithListTypeTrueEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropTypesWithListTypeTrue]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropTypesWithListTypeTrueHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropTypesWithListTypeTrueHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropTypesWithListTypeTrueHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropTypesWithListTypeTrueBoolConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropTypesWithListTypeTrueBoolEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropTypesWithListTypeTrueBool]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropTypesWithListTypeTrueBoolHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropTypesWithListTypeTrueBoolHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropTypesWithListTypeTrueBoolHistory]
  totalCount: Int!
}

"A connection to a list of items."
type ReferencedInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ReferencedInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [ReferencedInventory]
  totalCount: Int!
}

"A connection to a list of items."
type ReferencedInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ReferencedInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [ReferencedInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropReferencedConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropReferencedEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropReferenced]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryPropReferencedHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryPropReferencedHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryPropReferencedHistory]
  totalCount: Int!
}

"A connection to a list of items."
type UpdatedInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UpdatedInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [UpdatedInventory]
  totalCount: Int!
}

"A connection to a list of items."
type UpdatedInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UpdatedInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [UpdatedInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InvTestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InvTestEdge!]
  "A flattened list of the nodes."
  nodes: [InvTest]
  totalCount: Int!
}

"A connection to a list of items."
type InvTestHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InvTestHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InvTestHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InvTest2Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InvTest2Edge!]
  "A flattened list of the nodes."
  nodes: [InvTest2]
  totalCount: Int!
}

"A connection to a list of items."
type InvTest2HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InvTest2HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InvTest2History]
  totalCount: Int!
}

"A connection to a list of items."
type InvTest3Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InvTest3Edge!]
  "A flattened list of the nodes."
  nodes: [InvTest3]
  totalCount: Int!
}

"A connection to a list of items."
type InvTest3HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InvTest3HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InvTest3History]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryRemovePropsTimeSeriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryRemovePropsTimeSeriesEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryRemovePropsTimeSeries]
  totalCount: Int!
}

"A connection to a list of items."
type InventoryRemovePropsTimeSeriesHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventoryRemovePropsTimeSeriesHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventoryRemovePropsTimeSeriesHistory]
  totalCount: Int!
}

"A connection to a list of items."
type InventorySetDataConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventorySetDataEdge!]
  "A flattened list of the nodes."
  nodes: [InventorySetData]
  totalCount: Int!
}

"A connection to a list of items."
type InventorySetDataHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InventorySetDataHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [InventorySetDataHistory]
  totalCount: Int!
}

"A connection to a list of items."
type PythonTimeseriesTestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PythonTimeseriesTestEdge!]
  "A flattened list of the nodes."
  nodes: [PythonTimeseriesTest]
  totalCount: Int!
}

"A connection to a list of items."
type PythonTimeseriesTestHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PythonTimeseriesTestHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PythonTimeseriesTestHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasQueryTestInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasQueryTestInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasQueryTestInventory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasQueryTestInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasQueryTestInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasQueryTestInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type PythonTimeseriesTTNTestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PythonTimeseriesTTNTestEdge!]
  "A flattened list of the nodes."
  nodes: [PythonTimeseriesTTNTest]
  totalCount: Int!
}

"A connection to a list of items."
type PythonTimeseriesTTNTestHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PythonTimeseriesTTNTestHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PythonTimeseriesTTNTestHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTestUpdateInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTestUpdateInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTestUpdateInventory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTestUpdateInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTestUpdateInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTestUpdateInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasUpdatedInventarConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasUpdatedInventarEdge!]
  "A flattened list of the nodes."
  nodes: [HannasUpdatedInventar]
  totalCount: Int!
}

"A connection to a list of items."
type HannasUpdatedInventarHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasUpdatedInventarHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasUpdatedInventarHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTestValueTypeInventarConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTestValueTypeInventarEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTestValueTypeInventar]
  totalCount: Int!
}

"A connection to a list of items."
type HannasTestValueTypeInventarHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasTestValueTypeInventarHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasTestValueTypeInventarHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryCreateConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryCreateEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryCreate]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryCreateHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryCreateHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryCreateHistory]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryCreate2Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryCreate2Edge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryCreate2]
  totalCount: Int!
}

"A connection to a list of items."
type HannasInventoryCreate2HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HannasInventoryCreate2HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [HannasInventoryCreate2History]
  totalCount: Int!
}

"A connection to a list of items."
type MeterDataConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MeterDataEdge!]
  "A flattened list of the nodes."
  nodes: [MeterData]
  totalCount: Int!
}

"A connection to a list of items."
type MeterDataHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MeterDataHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [MeterDataHistory]
  totalCount: Int!
}

"A connection to a list of items."
type MeterData1Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MeterData1Edge!]
  "A flattened list of the nodes."
  nodes: [MeterData1]
  totalCount: Int!
}

"A connection to a list of items."
type MeterData1HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MeterData1HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [MeterData1History]
  totalCount: Int!
}

"A connection to a list of items."
type MarktdatenConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MarktdatenEdge!]
  "A flattened list of the nodes."
  nodes: [Marktdaten]
  totalCount: Int!
}

"A connection to a list of items."
type MarktdatenHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MarktdatenHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [MarktdatenHistory]
  totalCount: Int!
}

"A connection to a list of items."
type ConcreteTimeSeriesInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ConcreteTimeSeriesInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [ConcreteTimeSeriesInventory]
  totalCount: Int!
}

"A connection to a list of items."
type ConcreteTimeSeriesInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ConcreteTimeSeriesInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [ConcreteTimeSeriesInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TSInvConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TSInvEdge!]
  "A flattened list of the nodes."
  nodes: [TSInv]
  totalCount: Int!
}

"A connection to a list of items."
type TSInvHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TSInvHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TSInvHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListTimeSeriesInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListTimeSeriesInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListTimeSeriesInventory]
  totalCount: Int!
}

"A connection to a list of items."
type TestSelectionListTimeSeriesInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TestSelectionListTimeSeriesInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TestSelectionListTimeSeriesInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TSInventoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TSInventoryEdge!]
  "A flattened list of the nodes."
  nodes: [TSInventory]
  totalCount: Int!
}

"A connection to a list of items."
type TSInventoryHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TSInventoryHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TSInventoryHistory]
  totalCount: Int!
}

"A connection to a list of items."
type TimeSeries11Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TimeSeries11Edge!]
  "A flattened list of the nodes."
  nodes: [TimeSeries11]
  totalCount: Int!
}

"A connection to a list of items."
type TimeSeries11HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TimeSeries11HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TimeSeries11History]
  totalCount: Int!
}

"A connection to a list of items."
type TimeSeriesJuergenConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TimeSeriesJuergenEdge!]
  "A flattened list of the nodes."
  nodes: [TimeSeriesJuergen]
  totalCount: Int!
}

"A connection to a list of items."
type TimeSeriesJuergenHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TimeSeriesJuergenHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [TimeSeriesJuergenHistory]
  totalCount: Int!
}

input PythonTimeseriesGroupTestFilterInput {
  and: [PythonTimeseriesGroupTestFilterInput!]
  or: [PythonTimeseriesGroupTestFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  region: StringOperationFilterInput
  type: StringOperationFilterInput
  measure: StringOperationFilterInput
  source: StringOperationFilterInput
  identification: StringOperationFilterInput
}

input PythonTimeseriesGroupTestSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  region: SortEnumType
  type: SortEnumType
  measure: SortEnumType
  source: SortEnumType
  identification: SortEnumType
}

input PythonTimeseriesGroupTestHistoryHistoryFilterInput {
  and: [PythonTimeseriesGroupTestHistoryHistoryFilterInput!]
  or: [PythonTimeseriesGroupTestHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  region: StringOperationFilterInput
  type: StringOperationFilterInput
  measure: StringOperationFilterInput
  source: StringOperationFilterInput
  identification: StringOperationFilterInput
}

input PythonTimeseriesGroupTestHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  region: SortEnumType
  type: SortEnumType
  measure: SortEnumType
  source: SortEnumType
  identification: SortEnumType
}

input GroupsFilterInput {
  and: [GroupsFilterInput!]
  or: [GroupsFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  groupProp: BooleanOperationFilterInput
}

input GroupsSortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  groupProp: SortEnumType
}

input GroupsHistoryHistoryFilterInput {
  and: [GroupsHistoryHistoryFilterInput!]
  or: [GroupsHistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  groupProp: BooleanOperationFilterInput
}

input GroupsHistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  groupProp: SortEnumType
}

input Groups1FilterInput {
  and: [Groups1FilterInput!]
  or: [Groups1FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  groupProp: BooleanOperationFilterInput
}

input Groups1SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  groupProp: SortEnumType
}

input Groups1HistoryHistoryFilterInput {
  and: [Groups1HistoryHistoryFilterInput!]
  or: [Groups1HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  groupProp: BooleanOperationFilterInput
}

input Groups1HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  groupProp: SortEnumType
}

input Groups22FilterInput {
  and: [Groups22FilterInput!]
  or: [Groups22FilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  groupProp2: BooleanOperationFilterInput
  groupProp1: BooleanOperationFilterInput
  groupProp3: BooleanOperationFilterInput
}

input Groups22SortInput {
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  groupProp2: SortEnumType
  groupProp1: SortEnumType
  groupProp3: SortEnumType
}

input Groups22HistoryHistoryFilterInput {
  and: [Groups22HistoryHistoryFilterInput!]
  or: [Groups22HistoryHistoryFilterInput!]
  dynamicHistoryItemId: ComparableGuidOperationFilterInput
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  timeSeriesInventoryId: ComparableGuidOperationFilterInput
  groupProp2: BooleanOperationFilterInput
  groupProp1: BooleanOperationFilterInput
  groupProp3: BooleanOperationFilterInput
}

input Groups22HistoryHistorySortInput {
  dynamicHistoryItemId: SortEnumType
  dynamicInventoryId: SortEnumType
  dynamicItemId: SortEnumType
  changeDate: SortEnumType
  changeUser: SortEnumType
  resolution: ResolutionSortInput
  unit: SortEnumType
  timeSeriesInventoryId: SortEnumType
  groupProp2: SortEnumType
  groupProp1: SortEnumType
  groupProp3: SortEnumType
}

"A connection to a list of items."
type PythonTimeseriesGroupTestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PythonTimeseriesGroupTestEdge!]
  "A flattened list of the nodes."
  nodes: [PythonTimeseriesGroupTest]
  totalCount: Int!
}

"A connection to a list of items."
type PythonTimeseriesGroupTestHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PythonTimeseriesGroupTestHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [PythonTimeseriesGroupTestHistory]
  totalCount: Int!
}

"A connection to a list of items."
type GroupsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [GroupsEdge!]
  "A flattened list of the nodes."
  nodes: [Groups]
  totalCount: Int!
}

"A connection to a list of items."
type GroupsHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [GroupsHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [GroupsHistory]
  totalCount: Int!
}

"A connection to a list of items."
type Groups1Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Groups1Edge!]
  "A flattened list of the nodes."
  nodes: [Groups1]
  totalCount: Int!
}

"A connection to a list of items."
type Groups1HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Groups1HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [Groups1History]
  totalCount: Int!
}

"A connection to a list of items."
type Groups22Connection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Groups22Edge!]
  "A flattened list of the nodes."
  nodes: [Groups22]
  totalCount: Int!
}

"A connection to a list of items."
type Groups22HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [Groups22HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [Groups22History]
  totalCount: Int!
}

type CreateDynamicInventoryPayload {
  dynamicInventory: DynamicInventory
  errors: [UserError!]
}

type UpdateDynamicInventoryPayload {
  dynamicInventory: DynamicInventory
  errors: [UserError!]
}

type DeleteDynamicInventoryPayload {
  errors: [UserError!]
}

type AddPropertyDefinitionsPayload {
  dynamicInventory: DynamicInventory
  errors: [UserError!]
}

type RemovePropertyDefinitionsPayload {
  dynamicInventory: DynamicInventory
  errors: [UserError!]
}

input CreateDynamicInventoryInput {
  fieldName: String!
  displayName: String
  variant: Variant!
  propertyDefinitions: [AddPropertyDefinitionInput!]!
}

input UpdateDynamicInventoryInput {
  propertyDefinitions: [UpdatePropertyDefinitionInput]
  dynamicInventoryId: Uuid!
  displayName: String
  fieldName: String
}

input DeleteDynamicInventoryInput {
  dynamicInventoryId: Uuid!
}

type CreateSelectionListPayload {
  selectionList: SelectionList
  errors: [UserError!]
}

type UpdateSelectionListPayload {
  selectionList: SelectionList
  errors: [UserError!]
}

type DeleteSelectionListPayload {
  errors: [UserError!]
}

type AddSelectionItemsPayload {
  selectionList: SelectionList
  errors: [UserError!]
}

type RemoveSelectionItemsPayload {
  selectionList: SelectionList
  errors: [UserError!]
}

input CreateSelectionListInput {
  selectionItems: [AddSelectionItemInput]
  fieldName: String!
  displayName: String
}

input UpdateSelectionListInput {
  selectionItems: [UpdateSelectionItemInput]
  selectionListId: Uuid!
  displayName: String
  fieldName: String
}

input DeleteSelectionListInput {
  selectionListId: Uuid!
}

input AddSelectionItemsInput {
  selectionItems: [AddSelectionItemInput]
  selectionListId: Uuid!
}

input RemoveSelectionItemsInput {
  selectionListId: Uuid!
  selectionItemIds: [Uuid!]!
}

type SetTimeSeriesDataPayload {
  errors: [UserError!]
}

input SetTimeSeriesDataInput {
  data: DataInput
  dynamicItemId: Uuid!
}

type CreateUnitPayload {
  unit: Unit
  errors: [UserError!]
}

type DeleteUnitPayload {
  errors: [UserError!]
}

input CreateUnitInput {
  name: String!
  baseUnit: String
  factor: Float
  aggregation: AggregationRule
}

input DeleteUnitInput {
  name: String!
}

type CreateSub0DefaultPayload {
  concreteItems: [Sub0Default!]
  errors: [UserError!]
}

type UpdateSub0DefaultPayload {
  concreteItems: [Sub0Default]
  errors: [UserError!]
}

type UpsertSub0DefaultPayload {
  concreteItems: [Sub0Default]
  errors: [UserError!]
}

type DeleteConcreteItemsPayload {
  errors: [UserError!]
}

type CreateSub0DefaultTopicPayload {
  topic: Sub0DefaultTopic!
  errors: [UserError!]
}

type UpdateSub0DefaultTopicPayload {
  topic: Sub0DefaultTopic!
  errors: [UserError!]
}

type DeleteTopicPayload {
  errors: [UserError!]
}

type CreateHannasInventoryWithPropertiesPayload {
  concreteItems: [HannasInventoryWithProperties!]
  errors: [UserError!]
}

type UpdateHannasInventoryWithPropertiesPayload {
  concreteItems: [HannasInventoryWithProperties]
  errors: [UserError!]
}

type UpsertHannasInventoryWithPropertiesPayload {
  concreteItems: [HannasInventoryWithProperties]
  errors: [UserError!]
}

type CreateHannasInventoryWithPropertiesTopicPayload {
  topic: HannasInventoryWithPropertiesTopic!
  errors: [UserError!]
}

type UpdateHannasInventoryWithPropertiesTopicPayload {
  topic: HannasInventoryWithPropertiesTopic!
  errors: [UserError!]
}

type CreateWohnungPayload {
  concreteItems: [Wohnung!]
  errors: [UserError!]
}

type UpdateWohnungPayload {
  concreteItems: [Wohnung]
  errors: [UserError!]
}

type UpsertWohnungPayload {
  concreteItems: [Wohnung]
  errors: [UserError!]
}

type CreateWohnungTopicPayload {
  topic: WohnungTopic!
  errors: [UserError!]
}

type UpdateWohnungTopicPayload {
  topic: WohnungTopic!
  errors: [UserError!]
}

type CreateInventoryRemovePropsPayload {
  concreteItems: [InventoryRemoveProps!]
  errors: [UserError!]
}

type UpdateInventoryRemovePropsPayload {
  concreteItems: [InventoryRemoveProps]
  errors: [UserError!]
}

type UpsertInventoryRemovePropsPayload {
  concreteItems: [InventoryRemoveProps]
  errors: [UserError!]
}

type CreateInventoryRemovePropsTopicPayload {
  topic: InventoryRemovePropsTopic!
  errors: [UserError!]
}

type UpdateInventoryRemovePropsTopicPayload {
  topic: InventoryRemovePropsTopic!
  errors: [UserError!]
}

type CreateEmTestFPayload {
  concreteItems: [EmTestF!]
  errors: [UserError!]
}

type UpdateEmTestFPayload {
  concreteItems: [EmTestF]
  errors: [UserError!]
}

type UpsertEmTestFPayload {
  concreteItems: [EmTestF]
  errors: [UserError!]
}

type CreateEmTestFTopicPayload {
  topic: EmTestFTopic!
  errors: [UserError!]
}

type UpdateEmTestFTopicPayload {
  topic: EmTestFTopic!
  errors: [UserError!]
}

type CreateEmTest1FPayload {
  concreteItems: [EmTest1F!]
  errors: [UserError!]
}

type UpdateEmTest1FPayload {
  concreteItems: [EmTest1F]
  errors: [UserError!]
}

type UpsertEmTest1FPayload {
  concreteItems: [EmTest1F]
  errors: [UserError!]
}

type CreateEmTest1FTopicPayload {
  topic: EmTest1FTopic!
  errors: [UserError!]
}

type UpdateEmTest1FTopicPayload {
  topic: EmTest1FTopic!
  errors: [UserError!]
}

type CreateEmTest4FPayload {
  concreteItems: [EmTest4F!]
  errors: [UserError!]
}

type UpdateEmTest4FPayload {
  concreteItems: [EmTest4F]
  errors: [UserError!]
}

type UpsertEmTest4FPayload {
  concreteItems: [EmTest4F]
  errors: [UserError!]
}

type CreateEmTest4FTopicPayload {
  topic: EmTest4FTopic!
  errors: [UserError!]
}

type UpdateEmTest4FTopicPayload {
  topic: EmTest4FTopic!
  errors: [UserError!]
}

type CreateInputClearingPositionTransactionPayload {
  concreteItems: [InputClearingPositionTransaction!]
  errors: [UserError!]
}

type UpdateInputClearingPositionTransactionPayload {
  concreteItems: [InputClearingPositionTransaction]
  errors: [UserError!]
}

type UpsertInputClearingPositionTransactionPayload {
  concreteItems: [InputClearingPositionTransaction]
  errors: [UserError!]
}

type CreateInputClearingPositionTransactionTopicPayload {
  topic: InputClearingPositionTransactionTopic!
  errors: [UserError!]
}

type UpdateInputClearingPositionTransactionTopicPayload {
  topic: InputClearingPositionTransactionTopic!
  errors: [UserError!]
}

type CreateInputTransitionTransactionPayload {
  concreteItems: [InputTransitionTransaction!]
  errors: [UserError!]
}

type UpdateInputTransitionTransactionPayload {
  concreteItems: [InputTransitionTransaction]
  errors: [UserError!]
}

type UpsertInputTransitionTransactionPayload {
  concreteItems: [InputTransitionTransaction]
  errors: [UserError!]
}

type CreateInputTransitionTransactionTopicPayload {
  topic: InputTransitionTransactionTopic!
  errors: [UserError!]
}

type UpdateInputTransitionTransactionTopicPayload {
  topic: InputTransitionTransactionTopic!
  errors: [UserError!]
}

type CreateInputTradePayload {
  concreteItems: [InputTrade!]
  errors: [UserError!]
}

type UpdateInputTradePayload {
  concreteItems: [InputTrade]
  errors: [UserError!]
}

type UpsertInputTradePayload {
  concreteItems: [InputTrade]
  errors: [UserError!]
}

type CreateInputTradeTopicPayload {
  topic: InputTradeTopic!
  errors: [UserError!]
}

type UpdateInputTradeTopicPayload {
  topic: InputTradeTopic!
  errors: [UserError!]
}

type CreateRemitTradePayload {
  concreteItems: [RemitTrade!]
  errors: [UserError!]
}

type UpdateRemitTradePayload {
  concreteItems: [RemitTrade]
  errors: [UserError!]
}

type UpsertRemitTradePayload {
  concreteItems: [RemitTrade]
  errors: [UserError!]
}

type CreateRemitTradeTopicPayload {
  topic: RemitTradeTopic!
  errors: [UserError!]
}

type UpdateRemitTradeTopicPayload {
  topic: RemitTradeTopic!
  errors: [UserError!]
}

type CreateInternalDataSourcePayload {
  concreteItems: [InternalDataSource!]
  errors: [UserError!]
}

type UpdateInternalDataSourcePayload {
  concreteItems: [InternalDataSource]
  errors: [UserError!]
}

type UpsertInternalDataSourcePayload {
  concreteItems: [InternalDataSource]
  errors: [UserError!]
}

type CreateInternalDataSourceTopicPayload {
  topic: InternalDataSourceTopic!
  errors: [UserError!]
}

type UpdateInternalDataSourceTopicPayload {
  topic: InternalDataSourceTopic!
  errors: [UserError!]
}

type CreateFlatsPayload {
  concreteItems: [Flats!]
  errors: [UserError!]
}

type UpdateFlatsPayload {
  concreteItems: [Flats]
  errors: [UserError!]
}

type UpsertFlatsPayload {
  concreteItems: [Flats]
  errors: [UserError!]
}

type CreateFlatsTopicPayload {
  topic: FlatsTopic!
  errors: [UserError!]
}

type UpdateFlatsTopicPayload {
  topic: FlatsTopic!
  errors: [UserError!]
}

type CreateTest_deletePayload {
  concreteItems: [Test_delete!]
  errors: [UserError!]
}

type UpdateTest_deletePayload {
  concreteItems: [Test_delete]
  errors: [UserError!]
}

type UpsertTest_deletePayload {
  concreteItems: [Test_delete]
  errors: [UserError!]
}

type CreateTest_deleteTopicPayload {
  topic: Test_deleteTopic!
  errors: [UserError!]
}

type UpdateTest_deleteTopicPayload {
  topic: Test_deleteTopic!
  errors: [UserError!]
}

type CreateTest_delete2Payload {
  concreteItems: [Test_delete2!]
  errors: [UserError!]
}

type UpdateTest_delete2Payload {
  concreteItems: [Test_delete2]
  errors: [UserError!]
}

type UpsertTest_delete2Payload {
  concreteItems: [Test_delete2]
  errors: [UserError!]
}

type CreateTest_delete2TopicPayload {
  topic: Test_delete2Topic!
  errors: [UserError!]
}

type UpdateTest_delete2TopicPayload {
  topic: Test_delete2Topic!
  errors: [UserError!]
}

type CreatePropertyTestPayload {
  concreteItems: [PropertyTest!]
  errors: [UserError!]
}

type UpdatePropertyTestPayload {
  concreteItems: [PropertyTest]
  errors: [UserError!]
}

type UpsertPropertyTestPayload {
  concreteItems: [PropertyTest]
  errors: [UserError!]
}

type CreatePropertyTestTopicPayload {
  topic: PropertyTestTopic!
  errors: [UserError!]
}

type UpdatePropertyTestTopicPayload {
  topic: PropertyTestTopic!
  errors: [UserError!]
}

type CreatePropertyTest2Payload {
  concreteItems: [PropertyTest2!]
  errors: [UserError!]
}

type UpdatePropertyTest2Payload {
  concreteItems: [PropertyTest2]
  errors: [UserError!]
}

type UpsertPropertyTest2Payload {
  concreteItems: [PropertyTest2]
  errors: [UserError!]
}

type CreatePropertyTest2TopicPayload {
  topic: PropertyTest2Topic!
  errors: [UserError!]
}

type UpdatePropertyTest2TopicPayload {
  topic: PropertyTest2Topic!
  errors: [UserError!]
}

type CreatePropertyTest3Payload {
  concreteItems: [PropertyTest3!]
  errors: [UserError!]
}

type UpdatePropertyTest3Payload {
  concreteItems: [PropertyTest3]
  errors: [UserError!]
}

type UpsertPropertyTest3Payload {
  concreteItems: [PropertyTest3]
  errors: [UserError!]
}

type CreatePropertyTest3TopicPayload {
  topic: PropertyTest3Topic!
  errors: [UserError!]
}

type UpdatePropertyTest3TopicPayload {
  topic: PropertyTest3Topic!
  errors: [UserError!]
}

type CreatePropertyTest4Payload {
  concreteItems: [PropertyTest4!]
  errors: [UserError!]
}

type UpdatePropertyTest4Payload {
  concreteItems: [PropertyTest4]
  errors: [UserError!]
}

type UpsertPropertyTest4Payload {
  concreteItems: [PropertyTest4]
  errors: [UserError!]
}

type CreatePropertyTest4TopicPayload {
  topic: PropertyTest4Topic!
  errors: [UserError!]
}

type UpdatePropertyTest4TopicPayload {
  topic: PropertyTest4Topic!
  errors: [UserError!]
}

type CreateTestHannaPayload {
  concreteItems: [TestHanna!]
  errors: [UserError!]
}

type UpdateTestHannaPayload {
  concreteItems: [TestHanna]
  errors: [UserError!]
}

type UpsertTestHannaPayload {
  concreteItems: [TestHanna]
  errors: [UserError!]
}

type CreateTestHannaTopicPayload {
  topic: TestHannaTopic!
  errors: [UserError!]
}

type UpdateTestHannaTopicPayload {
  topic: TestHannaTopic!
  errors: [UserError!]
}

type CreateTestSelectionListPayload {
  concreteItems: [TestSelectionList!]
  errors: [UserError!]
}

type UpdateTestSelectionListPayload {
  concreteItems: [TestSelectionList]
  errors: [UserError!]
}

type UpsertTestSelectionListPayload {
  concreteItems: [TestSelectionList]
  errors: [UserError!]
}

type CreateTestSelectionListTopicPayload {
  topic: TestSelectionListTopic!
  errors: [UserError!]
}

type UpdateTestSelectionListTopicPayload {
  topic: TestSelectionListTopic!
  errors: [UserError!]
}

type CreateTestSelectionListAgainPayload {
  concreteItems: [TestSelectionListAgain!]
  errors: [UserError!]
}

type UpdateTestSelectionListAgainPayload {
  concreteItems: [TestSelectionListAgain]
  errors: [UserError!]
}

type UpsertTestSelectionListAgainPayload {
  concreteItems: [TestSelectionListAgain]
  errors: [UserError!]
}

type CreateTestSelectionListAgainTopicPayload {
  topic: TestSelectionListAgainTopic!
  errors: [UserError!]
}

type UpdateTestSelectionListAgainTopicPayload {
  topic: TestSelectionListAgainTopic!
  errors: [UserError!]
}

type CreateTestSelectionListAgain3Payload {
  concreteItems: [TestSelectionListAgain3!]
  errors: [UserError!]
}

type UpdateTestSelectionListAgain3Payload {
  concreteItems: [TestSelectionListAgain3]
  errors: [UserError!]
}

type UpsertTestSelectionListAgain3Payload {
  concreteItems: [TestSelectionListAgain3]
  errors: [UserError!]
}

type CreateTestSelectionListAgain3TopicPayload {
  topic: TestSelectionListAgain3Topic!
  errors: [UserError!]
}

type UpdateTestSelectionListAgain3TopicPayload {
  topic: TestSelectionListAgain3Topic!
  errors: [UserError!]
}

type CreateTestSelectionListAgain4Payload {
  concreteItems: [TestSelectionListAgain4!]
  errors: [UserError!]
}

type UpdateTestSelectionListAgain4Payload {
  concreteItems: [TestSelectionListAgain4]
  errors: [UserError!]
}

type UpsertTestSelectionListAgain4Payload {
  concreteItems: [TestSelectionListAgain4]
  errors: [UserError!]
}

type CreateTestSelectionListAgain4TopicPayload {
  topic: TestSelectionListAgain4Topic!
  errors: [UserError!]
}

type UpdateTestSelectionListAgain4TopicPayload {
  topic: TestSelectionListAgain4Topic!
  errors: [UserError!]
}

type CreateBasicInventoryPayload {
  concreteItems: [BasicInventory!]
  errors: [UserError!]
}

type UpdateBasicInventoryPayload {
  concreteItems: [BasicInventory]
  errors: [UserError!]
}

type UpsertBasicInventoryPayload {
  concreteItems: [BasicInventory]
  errors: [UserError!]
}

type CreateBasicInventoryTopicPayload {
  topic: BasicInventoryTopic!
  errors: [UserError!]
}

type UpdateBasicInventoryTopicPayload {
  topic: BasicInventoryTopic!
  errors: [UserError!]
}

type CreateFullTestInventoryPayload {
  concreteItems: [FullTestInventory!]
  errors: [UserError!]
}

type UpdateFullTestInventoryPayload {
  concreteItems: [FullTestInventory]
  errors: [UserError!]
}

type UpsertFullTestInventoryPayload {
  concreteItems: [FullTestInventory]
  errors: [UserError!]
}

type CreateFullTestInventoryTopicPayload {
  topic: FullTestInventoryTopic!
  errors: [UserError!]
}

type UpdateFullTestInventoryTopicPayload {
  topic: FullTestInventoryTopic!
  errors: [UserError!]
}

type CreateDispatcherMessagesPayload {
  concreteItems: [DispatcherMessages!]
  errors: [UserError!]
}

type UpdateDispatcherMessagesPayload {
  concreteItems: [DispatcherMessages]
  errors: [UserError!]
}

type UpsertDispatcherMessagesPayload {
  concreteItems: [DispatcherMessages]
  errors: [UserError!]
}

type CreateDispatcherMessagesTopicPayload {
  topic: DispatcherMessagesTopic!
  errors: [UserError!]
}

type UpdateDispatcherMessagesTopicPayload {
  topic: DispatcherMessagesTopic!
  errors: [UserError!]
}

type CreateUpperTestFieldNamePayload {
  concreteItems: [UpperTestFieldName!]
  errors: [UserError!]
}

type UpdateUpperTestFieldNamePayload {
  concreteItems: [UpperTestFieldName]
  errors: [UserError!]
}

type UpsertUpperTestFieldNamePayload {
  concreteItems: [UpperTestFieldName]
  errors: [UserError!]
}

type CreateUpperTestFieldNameTopicPayload {
  topic: UpperTestFieldNameTopic!
  errors: [UserError!]
}

type UpdateUpperTestFieldNameTopicPayload {
  topic: UpperTestFieldNameTopic!
  errors: [UserError!]
}

type CreateDeleteMePayload {
  concreteItems: [DeleteMe!]
  errors: [UserError!]
}

type UpdateDeleteMePayload {
  concreteItems: [DeleteMe]
  errors: [UserError!]
}

type UpsertDeleteMePayload {
  concreteItems: [DeleteMe]
  errors: [UserError!]
}

type CreateDeleteMeTopicPayload {
  topic: DeleteMeTopic!
  errors: [UserError!]
}

type UpdateDeleteMeTopicPayload {
  topic: DeleteMeTopic!
  errors: [UserError!]
}

input CreateSub0DefaultInput {
  sub0Field: String
}

input UpdateSub0DefaultInput {
  dynamicItemId: Uuid!
  sub0Field: String
}

input UpsertSub0DefaultInput {
  dynamicItemId: Uuid!
  sub0Field: String
}

input DeleteConcreteItemsInput {
  itemIds: [Uuid!]!
}

input CreateSub0DefaultTopicInput {
  routingFields: [sub0DefaultFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: Sub0DefaultTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateSub0DefaultTopicInput {
  routingFields: [sub0DefaultFields]
  routingFilter: Sub0DefaultTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input DeleteTopicInput {
  topicId: Uuid!
}

input CreateHannasInventoryWithPropertiesInput {
  prop1: Boolean
}

input UpdateHannasInventoryWithPropertiesInput {
  dynamicItemId: Uuid!
  prop1: Boolean
}

input UpsertHannasInventoryWithPropertiesInput {
  dynamicItemId: Uuid!
  prop1: Boolean
}

input CreateHannasInventoryWithPropertiesTopicInput {
  routingFields: [HannasInventoryWithPropertiesFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: HannasInventoryWithPropertiesTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateHannasInventoryWithPropertiesTopicInput {
  routingFields: [HannasInventoryWithPropertiesFields]
  routingFilter: HannasInventoryWithPropertiesTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateWohnungInput {
  eigentuemer: String
  stocks: Stocks
  wohnflaeche: Float
}

input UpdateWohnungInput {
  dynamicItemId: Uuid!
  eigentuemer: String
  stocks: Stocks
  wohnflaeche: Float
}

input UpsertWohnungInput {
  dynamicItemId: Uuid!
  eigentuemer: String
  stocks: Stocks
  wohnflaeche: Float
}

input CreateWohnungTopicInput {
  routingFields: [WohnungFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: WohnungTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateWohnungTopicInput {
  routingFields: [WohnungFields]
  routingFilter: WohnungTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateInventoryRemovePropsInput {
  fieldName2: String
}

input UpdateInventoryRemovePropsInput {
  dynamicItemId: Uuid!
  fieldName2: String
}

input UpsertInventoryRemovePropsInput {
  dynamicItemId: Uuid!
  fieldName2: String
}

input CreateInventoryRemovePropsTopicInput {
  routingFields: [InventoryRemovePropsFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: InventoryRemovePropsTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateInventoryRemovePropsTopicInput {
  routingFields: [InventoryRemovePropsFields]
  routingFilter: InventoryRemovePropsTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateEmTestFInput {
  testProp1F: String
}

input UpdateEmTestFInput {
  dynamicItemId: Uuid!
  testProp1F: String
}

input UpsertEmTestFInput {
  dynamicItemId: Uuid!
  testProp1F: String
}

input CreateEmTestFTopicInput {
  routingFields: [EmTestFFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: EmTestFTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateEmTestFTopicInput {
  routingFields: [EmTestFFields]
  routingFilter: EmTestFTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateEmTest1FInput {
  testProp11F: String
}

input UpdateEmTest1FInput {
  dynamicItemId: Uuid!
  testProp11F: String
}

input UpsertEmTest1FInput {
  dynamicItemId: Uuid!
  testProp11F: String
}

input CreateEmTest1FTopicInput {
  routingFields: [EmTest1FFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: EmTest1FTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateEmTest1FTopicInput {
  routingFields: [EmTest1FFields]
  routingFilter: EmTest1FTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateEmTest4FInput {
  testProp41F: String
}

input UpdateEmTest4FInput {
  dynamicItemId: Uuid!
  testProp41F: String
}

input UpsertEmTest4FInput {
  dynamicItemId: Uuid!
  testProp41F: String
}

input CreateEmTest4FTopicInput {
  routingFields: [EmTest4FFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: EmTest4FTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateEmTest4FTopicInput {
  routingFields: [EmTest4FFields]
  routingFilter: EmTest4FTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateInputClearingPositionTransactionInput {
  source_code: String
  nonclearingmember: String
  transaction_type: Float
  client: String
  clearingmember: String
  f_fct_onl_clrg_pos_trans_id: Float
  account_sponsor: String
  member: String
  fact_date: String
  fact_timestamp: String
  clearinghouse: String
  mifidmember: String
  transaction_stream_type: Float
  account_owner: String
  instrument_id: Float
  orig_id: String
  buy_sell_code: String
}

input UpdateInputClearingPositionTransactionInput {
  dynamicItemId: Uuid!
  source_code: String
  nonclearingmember: String
  transaction_type: Float
  client: String
  clearingmember: String
  f_fct_onl_clrg_pos_trans_id: Float
  account_sponsor: String
  member: String
  fact_date: String
  fact_timestamp: String
  clearinghouse: String
  mifidmember: String
  transaction_stream_type: Float
  account_owner: String
  instrument_id: Float
  orig_id: String
  buy_sell_code: String
}

input UpsertInputClearingPositionTransactionInput {
  dynamicItemId: Uuid!
  source_code: String
  nonclearingmember: String
  transaction_type: Float
  client: String
  clearingmember: String
  f_fct_onl_clrg_pos_trans_id: Float
  account_sponsor: String
  member: String
  fact_date: String
  fact_timestamp: String
  clearinghouse: String
  mifidmember: String
  transaction_stream_type: Float
  account_owner: String
  instrument_id: Float
  orig_id: String
  buy_sell_code: String
}

input CreateInputClearingPositionTransactionTopicInput {
  routingFields: [InputClearingPositionTransactionFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: InputClearingPositionTransactionTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateInputClearingPositionTransactionTopicInput {
  routingFields: [InputClearingPositionTransactionFields]
  routingFilter: InputClearingPositionTransactionTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateInputTransitionTransactionInput {
  current_suffix: String
  mifidmember: String
  nonclearingmember: String
  its: String
  trade_rpt_type_code: String
  trade_handling_instr: String
  position_long: Float
  fact_timestamp: String
  order_qty: Float
  order_no: String
  designated_qty_long: Float
  clg_mbr_participant_code: String
  trader_code: String
  match_price: String
  currency_code: String
  trade_rpt_id: String
  customer: String
  clearingmember: String
  maintenance_event: String
  trade_rpt_ref_id: String
  market: String
  origin_trade_time_cet: String
  tran_adj_ind: String
  manual_trade_entry_flag: Float
  position_short: Float
  parent_suffix: String
  source_code: String
  account_type: String
  member: String
  trade_rpt_trans_type_code: String
  transaction_no: String
  origin_trade_date_cet: String
  adj_qty_long: Float
  mbr_participant_code: String
  origin_order_no: String
  clearinghouse: String
  user_order_no: String
  give_up_status_code: String
  instrument_id: String
  f_fct_onl_pos_trans_id: String
  exercised_allocated: Float
  orig_id: String
  trade_match_id: String
  trade_size: String
  client: String
  fact_date: String
  delta_qty_short: Float
  trade_type: String
  designated_qty_short: Float
  order_aggressor_flag: String
  transfer_reason: String
  pos_text: String
  open_close_flag: String
  buy_sell_ind: String
  adj_qty_short: Float
}

input UpdateInputTransitionTransactionInput {
  dynamicItemId: Uuid!
  current_suffix: String
  mifidmember: String
  nonclearingmember: String
  its: String
  trade_rpt_type_code: String
  trade_handling_instr: String
  position_long: Float
  fact_timestamp: String
  order_qty: Float
  order_no: String
  designated_qty_long: Float
  clg_mbr_participant_code: String
  trader_code: String
  match_price: String
  currency_code: String
  trade_rpt_id: String
  customer: String
  clearingmember: String
  maintenance_event: String
  trade_rpt_ref_id: String
  market: String
  origin_trade_time_cet: String
  tran_adj_ind: String
  manual_trade_entry_flag: Float
  position_short: Float
  parent_suffix: String
  source_code: String
  account_type: String
  member: String
  trade_rpt_trans_type_code: String
  transaction_no: String
  origin_trade_date_cet: String
  adj_qty_long: Float
  mbr_participant_code: String
  origin_order_no: String
  clearinghouse: String
  user_order_no: String
  give_up_status_code: String
  instrument_id: String
  f_fct_onl_pos_trans_id: String
  exercised_allocated: Float
  orig_id: String
  trade_match_id: String
  trade_size: String
  client: String
  fact_date: String
  delta_qty_short: Float
  trade_type: String
  designated_qty_short: Float
  order_aggressor_flag: String
  transfer_reason: String
  pos_text: String
  open_close_flag: String
  buy_sell_ind: String
  adj_qty_short: Float
}

input UpsertInputTransitionTransactionInput {
  dynamicItemId: Uuid!
  current_suffix: String
  mifidmember: String
  nonclearingmember: String
  its: String
  trade_rpt_type_code: String
  trade_handling_instr: String
  position_long: Float
  fact_timestamp: String
  order_qty: Float
  order_no: String
  designated_qty_long: Float
  clg_mbr_participant_code: String
  trader_code: String
  match_price: String
  currency_code: String
  trade_rpt_id: String
  customer: String
  clearingmember: String
  maintenance_event: String
  trade_rpt_ref_id: String
  market: String
  origin_trade_time_cet: String
  tran_adj_ind: String
  manual_trade_entry_flag: Float
  position_short: Float
  parent_suffix: String
  source_code: String
  account_type: String
  member: String
  trade_rpt_trans_type_code: String
  transaction_no: String
  origin_trade_date_cet: String
  adj_qty_long: Float
  mbr_participant_code: String
  origin_order_no: String
  clearinghouse: String
  user_order_no: String
  give_up_status_code: String
  instrument_id: String
  f_fct_onl_pos_trans_id: String
  exercised_allocated: Float
  orig_id: String
  trade_match_id: String
  trade_size: String
  client: String
  fact_date: String
  delta_qty_short: Float
  trade_type: String
  designated_qty_short: Float
  order_aggressor_flag: String
  transfer_reason: String
  pos_text: String
  open_close_flag: String
  buy_sell_ind: String
  adj_qty_short: Float
}

input CreateInputTransitionTransactionTopicInput {
  routingFields: [InputTransitionTransactionFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: InputTransitionTransactionTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateInputTransitionTransactionTopicInput {
  routingFields: [InputTransitionTransactionFields]
  routingFilter: InputTransitionTransactionTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateInputTradeInput {
  match_price: Float
  orig_id: String
  its: String
  buy_sell_ind: String
  cancellation_type: String
  instrument_id: String
  currency_code: String
  fact_timestamp: String
  trade_group_id: String
  source_code: String
  trade_origin: String
  f_fct_order_quote_id: String
  on_bhlf_mbr_participant_code: String
  trade_id: String
  maintenance_event: String
  client: String
  user_code: String
  mbr_participant_code: String
  fact_date: String
  trade_size: Float
  exchange_ord_id: String
  backref: Uuid
  member: String
  f_fct_trade_id: String
  aggressor_ind: String
}

input UpdateInputTradeInput {
  dynamicItemId: Uuid!
  match_price: Float
  orig_id: String
  its: String
  buy_sell_ind: String
  cancellation_type: String
  instrument_id: String
  currency_code: String
  fact_timestamp: String
  trade_group_id: String
  source_code: String
  trade_origin: String
  f_fct_order_quote_id: String
  on_bhlf_mbr_participant_code: String
  trade_id: String
  maintenance_event: String
  client: String
  user_code: String
  mbr_participant_code: String
  fact_date: String
  trade_size: Float
  exchange_ord_id: String
  backref: Uuid
  member: String
  f_fct_trade_id: String
  aggressor_ind: String
}

input UpsertInputTradeInput {
  dynamicItemId: Uuid!
  match_price: Float
  orig_id: String
  its: String
  buy_sell_ind: String
  cancellation_type: String
  instrument_id: String
  currency_code: String
  fact_timestamp: String
  trade_group_id: String
  source_code: String
  trade_origin: String
  f_fct_order_quote_id: String
  on_bhlf_mbr_participant_code: String
  trade_id: String
  maintenance_event: String
  client: String
  user_code: String
  mbr_participant_code: String
  fact_date: String
  trade_size: Float
  exchange_ord_id: String
  backref: Uuid
  member: String
  f_fct_trade_id: String
  aggressor_ind: String
}

input CreateInputTradeTopicInput {
  routingFields: [InputTradeFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: InputTradeTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateInputTradeTopicInput {
  routingFields: [InputTradeFields]
  routingFilter: InputTradeTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateRemitTradeInput {
  member: String
  notionalcontractquantityunit: String
  notionalamount: Float
  contractid: String
  aggressor: String
  voicebrokered: Boolean
  version: DateTime
  traderidtype: String
  client: String
  transactiontime: DateTime
  notionalamountcurrency: String
  pricecurrency: String
  actiontype: String
  buysellindicator: String
  inputpositiontransaction: Uuid
  marketparticipantid: String
  traderid: String
  price: Float
  orderstatus: String
  quantityunit: String
  tradingcapacity: String
  transactiontimenano: Float
  ordertype: String
  orderduration: String
  uniquetransactionidentifier: String
  notionalcontractquantity: Float
  organisedmarketplaceidtype: String
  organisedmarketplaceid: String
  marketparticipantidtype: String
  inputclearingpositiontransaction: Uuid
  inputtrade: Uuid
  quantity: Float
}

input UpdateRemitTradeInput {
  dynamicItemId: Uuid!
  member: String
  notionalcontractquantityunit: String
  notionalamount: Float
  contractid: String
  aggressor: String
  voicebrokered: Boolean
  version: DateTime
  traderidtype: String
  client: String
  transactiontime: DateTime
  notionalamountcurrency: String
  pricecurrency: String
  actiontype: String
  buysellindicator: String
  inputpositiontransaction: Uuid
  marketparticipantid: String
  traderid: String
  price: Float
  orderstatus: String
  quantityunit: String
  tradingcapacity: String
  transactiontimenano: Float
  ordertype: String
  orderduration: String
  uniquetransactionidentifier: String
  notionalcontractquantity: Float
  organisedmarketplaceidtype: String
  organisedmarketplaceid: String
  marketparticipantidtype: String
  inputclearingpositiontransaction: Uuid
  inputtrade: Uuid
  quantity: Float
}

input UpsertRemitTradeInput {
  dynamicItemId: Uuid!
  member: String
  notionalcontractquantityunit: String
  notionalamount: Float
  contractid: String
  aggressor: String
  voicebrokered: Boolean
  version: DateTime
  traderidtype: String
  client: String
  transactiontime: DateTime
  notionalamountcurrency: String
  pricecurrency: String
  actiontype: String
  buysellindicator: String
  inputpositiontransaction: Uuid
  marketparticipantid: String
  traderid: String
  price: Float
  orderstatus: String
  quantityunit: String
  tradingcapacity: String
  transactiontimenano: Float
  ordertype: String
  orderduration: String
  uniquetransactionidentifier: String
  notionalcontractquantity: Float
  organisedmarketplaceidtype: String
  organisedmarketplaceid: String
  marketparticipantidtype: String
  inputclearingpositiontransaction: Uuid
  inputtrade: Uuid
  quantity: Float
}

input CreateRemitTradeTopicInput {
  routingFields: [RemitTradeFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: RemitTradeTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateRemitTradeTopicInput {
  routingFields: [RemitTradeFields]
  routingFilter: RemitTradeTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateInternalDataSourceInput {
  customId: String!
  title: String
  dataSourceType: String!
}

input UpdateInternalDataSourceInput {
  dynamicItemId: Uuid!
  customId: String
  title: String
  dataSourceType: String
}

input UpsertInternalDataSourceInput {
  dynamicItemId: Uuid!
  customId: String!
  title: String
  dataSourceType: String!
}

input CreateInternalDataSourceTopicInput {
  routingFields: [InternalDataSourceFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: InternalDataSourceTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateInternalDataSourceTopicInput {
  routingFields: [InternalDataSourceFields]
  routingFilter: InternalDataSourceTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateFlatsInput {
  tenant: String
  area: Float
}

input UpdateFlatsInput {
  dynamicItemId: Uuid!
  tenant: String
  area: Float
}

input UpsertFlatsInput {
  dynamicItemId: Uuid!
  tenant: String
  area: Float
}

input CreateFlatsTopicInput {
  routingFields: [FlatsFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: FlatsTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateFlatsTopicInput {
  routingFields: [FlatsFields]
  routingFilter: FlatsTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTest_deleteInput {
  meterId: String
}

input UpdateTest_deleteInput {
  dynamicItemId: Uuid!
  meterId: String
}

input UpsertTest_deleteInput {
  dynamicItemId: Uuid!
  meterId: String
}

input CreateTest_deleteTopicInput {
  routingFields: [Test_deleteFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: Test_deleteTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTest_deleteTopicInput {
  routingFields: [Test_deleteFields]
  routingFilter: Test_deleteTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTest_delete2Input {
  meterId: String
  address: Uuid
}

input UpdateTest_delete2Input {
  dynamicItemId: Uuid!
  meterId: String
  address: Uuid
}

input UpsertTest_delete2Input {
  dynamicItemId: Uuid!
  meterId: String
  address: Uuid
}

input CreateTest_delete2TopicInput {
  routingFields: [Test_delete2Fields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: Test_delete2TopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTest_delete2TopicInput {
  routingFields: [Test_delete2Fields]
  routingFilter: Test_delete2TopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreatePropertyTestInput {
  prop2: Boolean
  prop1: Boolean
}

input UpdatePropertyTestInput {
  dynamicItemId: Uuid!
  prop2: Boolean
  prop1: Boolean
}

input UpsertPropertyTestInput {
  dynamicItemId: Uuid!
  prop2: Boolean
  prop1: Boolean
}

input CreatePropertyTestTopicInput {
  routingFields: [PropertyTestFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: PropertyTestTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdatePropertyTestTopicInput {
  routingFields: [PropertyTestFields]
  routingFilter: PropertyTestTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreatePropertyTest2Input {
  prop2: Boolean
}

input UpdatePropertyTest2Input {
  dynamicItemId: Uuid!
  prop2: Boolean
}

input UpsertPropertyTest2Input {
  dynamicItemId: Uuid!
  prop2: Boolean
}

input CreatePropertyTest2TopicInput {
  routingFields: [PropertyTest2Fields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: PropertyTest2TopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdatePropertyTest2TopicInput {
  routingFields: [PropertyTest2Fields]
  routingFilter: PropertyTest2TopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreatePropertyTest3Input {
  prop2: Boolean
}

input UpdatePropertyTest3Input {
  dynamicItemId: Uuid!
  prop2: Boolean
}

input UpsertPropertyTest3Input {
  dynamicItemId: Uuid!
  prop2: Boolean
}

input CreatePropertyTest3TopicInput {
  routingFields: [PropertyTest3Fields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: PropertyTest3TopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdatePropertyTest3TopicInput {
  routingFields: [PropertyTest3Fields]
  routingFilter: PropertyTest3TopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreatePropertyTest4Input {
  prop1: Boolean
  prop3: Boolean!
}

input UpdatePropertyTest4Input {
  dynamicItemId: Uuid!
  prop1: Boolean
  prop3: Boolean
}

input UpsertPropertyTest4Input {
  dynamicItemId: Uuid!
  prop1: Boolean
  prop3: Boolean!
}

input CreatePropertyTest4TopicInput {
  routingFields: [PropertyTest4Fields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: PropertyTest4TopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdatePropertyTest4TopicInput {
  routingFields: [PropertyTest4Fields]
  routingFilter: PropertyTest4TopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTestHannaInput {
  propEins: String
}

input UpdateTestHannaInput {
  dynamicItemId: Uuid!
  propEins: String
}

input UpsertTestHannaInput {
  dynamicItemId: Uuid!
  propEins: String
}

input CreateTestHannaTopicInput {
  routingFields: [TestHannaFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: TestHannaTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTestHannaTopicInput {
  routingFields: [TestHannaFields]
  routingFilter: TestHannaTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTestSelectionListInput {
  numProp: Float!
  selectionProp: SelectionListHanna!
  stringProp: String
}

input UpdateTestSelectionListInput {
  dynamicItemId: Uuid!
  numProp: Float
  selectionProp: SelectionListHanna
  stringProp: String
}

input UpsertTestSelectionListInput {
  dynamicItemId: Uuid!
  numProp: Float!
  selectionProp: SelectionListHanna!
  stringProp: String
}

input CreateTestSelectionListTopicInput {
  routingFields: [TestSelectionListFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: TestSelectionListTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTestSelectionListTopicInput {
  routingFields: [TestSelectionListFields]
  routingFilter: TestSelectionListTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTestSelectionListAgainInput {
  selectionProp: SelectionListHanna!
  stringProp: String
  numProp: Float!
}

input UpdateTestSelectionListAgainInput {
  dynamicItemId: Uuid!
  selectionProp: SelectionListHanna
  stringProp: String
  numProp: Float
}

input UpsertTestSelectionListAgainInput {
  dynamicItemId: Uuid!
  selectionProp: SelectionListHanna!
  stringProp: String
  numProp: Float!
}

input CreateTestSelectionListAgainTopicInput {
  routingFields: [TestSelectionListAgainFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: TestSelectionListAgainTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTestSelectionListAgainTopicInput {
  routingFields: [TestSelectionListAgainFields]
  routingFilter: TestSelectionListAgainTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTestSelectionListAgain3Input {
  stringProp: String
  selectionProp: SelectionListHanna3!
  numProp: Float!
}

input UpdateTestSelectionListAgain3Input {
  dynamicItemId: Uuid!
  stringProp: String
  selectionProp: SelectionListHanna3
  numProp: Float
}

input UpsertTestSelectionListAgain3Input {
  dynamicItemId: Uuid!
  stringProp: String
  selectionProp: SelectionListHanna3!
  numProp: Float!
}

input CreateTestSelectionListAgain3TopicInput {
  routingFields: [TestSelectionListAgain3Fields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: TestSelectionListAgain3TopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTestSelectionListAgain3TopicInput {
  routingFields: [TestSelectionListAgain3Fields]
  routingFilter: TestSelectionListAgain3TopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateTestSelectionListAgain4Input {
  stringProp: String
  selectionProp: SelectionListHanna4!
  numProp: Float!
}

input UpdateTestSelectionListAgain4Input {
  dynamicItemId: Uuid!
  stringProp: String
  selectionProp: SelectionListHanna4
  numProp: Float
}

input UpsertTestSelectionListAgain4Input {
  dynamicItemId: Uuid!
  stringProp: String
  selectionProp: SelectionListHanna4!
  numProp: Float!
}

input CreateTestSelectionListAgain4TopicInput {
  routingFields: [TestSelectionListAgain4Fields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: TestSelectionListAgain4TopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateTestSelectionListAgain4TopicInput {
  routingFields: [TestSelectionListAgain4Fields]
  routingFilter: TestSelectionListAgain4TopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateBasicInventoryInput {
  stringField: String
  numberField: Float
}

input UpdateBasicInventoryInput {
  dynamicItemId: Uuid!
  stringField: String
  numberField: Float
}

input UpsertBasicInventoryInput {
  dynamicItemId: Uuid!
  stringField: String
  numberField: Float
}

input CreateBasicInventoryTopicInput {
  routingFields: [BasicInventoryFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: BasicInventoryTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateBasicInventoryTopicInput {
  routingFields: [BasicInventoryFields]
  routingFilter: BasicInventoryTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateFullTestInventoryInput {
  numberFieldNull: Float
  boolFieldNull: Boolean
  boolField: Boolean!
  enumFieldList: [Stocks!]!
  dateField: DateTime!
  enumFieldNull: Stocks
  dateFieldList: [DateTime!]!
  dateFieldNullList: [DateTime]
  stringFieldNullList: [String]
  boolFieldNullList: [Boolean]
  boolFieldList: [Boolean!]!
  refFieldList: [Uuid!]!
  stringFieldList: [String!]!
  enumFieldNullList: [Stocks]
  refFieldNullList: [Uuid]
  stringFieldNull: String
  stringField: String!
  numberField: Float!
  numberFieldNullList: [Float]
  numberFieldList: [Float!]!
  refFieldNull: Uuid
  refField: Uuid!
  dateFieldNull: DateTime
  enumField: Stocks!
}

input UpdateFullTestInventoryInput {
  dynamicItemId: Uuid!
  numberFieldNull: Float
  boolFieldNull: Boolean
  boolField: Boolean
  enumFieldList: [Stocks]
  dateField: DateTime
  enumFieldNull: Stocks
  dateFieldList: [DateTime]
  dateFieldNullList: [DateTime]
  stringFieldNullList: [String]
  boolFieldNullList: [Boolean]
  boolFieldList: [Boolean]
  refFieldList: [Uuid]
  stringFieldList: [String]
  enumFieldNullList: [Stocks]
  refFieldNullList: [Uuid]
  stringFieldNull: String
  stringField: String
  numberField: Float
  numberFieldNullList: [Float]
  numberFieldList: [Float]
  refFieldNull: Uuid
  refField: Uuid
  dateFieldNull: DateTime
  enumField: Stocks
}

input UpsertFullTestInventoryInput {
  dynamicItemId: Uuid!
  numberFieldNull: Float
  boolFieldNull: Boolean
  boolField: Boolean!
  enumFieldList: [Stocks!]!
  dateField: DateTime!
  enumFieldNull: Stocks
  dateFieldList: [DateTime!]!
  dateFieldNullList: [DateTime]
  stringFieldNullList: [String]
  boolFieldNullList: [Boolean]
  boolFieldList: [Boolean!]!
  refFieldList: [Uuid!]!
  stringFieldList: [String!]!
  enumFieldNullList: [Stocks]
  refFieldNullList: [Uuid]
  stringFieldNull: String
  stringField: String!
  numberField: Float!
  numberFieldNullList: [Float]
  numberFieldList: [Float!]!
  refFieldNull: Uuid
  refField: Uuid!
  dateFieldNull: DateTime
  enumField: Stocks!
}

input CreateFullTestInventoryTopicInput {
  routingFields: [FullTestInventoryFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: FullTestInventoryTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateFullTestInventoryTopicInput {
  routingFields: [FullTestInventoryFields]
  routingFilter: FullTestInventoryTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateDispatcherMessagesInput {
  wohnungsGruppe: String
  temperatur: Float
  spannung: Float
}

input UpdateDispatcherMessagesInput {
  dynamicItemId: Uuid!
  wohnungsGruppe: String
  temperatur: Float
  spannung: Float
}

input UpsertDispatcherMessagesInput {
  dynamicItemId: Uuid!
  wohnungsGruppe: String
  temperatur: Float
  spannung: Float
}

input CreateDispatcherMessagesTopicInput {
  routingFields: [DispatcherMessagesFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: DispatcherMessagesTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateDispatcherMessagesTopicInput {
  routingFields: [DispatcherMessagesFields]
  routingFilter: DispatcherMessagesTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateUpperTestFieldNameInput {
  propField: String
}

input UpdateUpperTestFieldNameInput {
  dynamicItemId: Uuid!
  propField: String
}

input UpsertUpperTestFieldNameInput {
  dynamicItemId: Uuid!
  propField: String
}

input CreateUpperTestFieldNameTopicInput {
  routingFields: [UpperTestFieldNameFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: UpperTestFieldNameTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateUpperTestFieldNameTopicInput {
  routingFields: [UpperTestFieldNameFields]
  routingFilter: UpperTestFieldNameTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

input CreateDeleteMeInput {
  lalal: String
}

input UpdateDeleteMeInput {
  dynamicItemId: Uuid!
  lalal: String
}

input UpsertDeleteMeInput {
  dynamicItemId: Uuid!
  lalal: String
}

input CreateDeleteMeTopicInput {
  routingFields: [DeleteMeFields]
  "Default value: true"
  enabled: Boolean! = true
  routingFilter: DeleteMeTopicRoutingFilterInput
  displayName: String
  onSubscription: OnSubscription!
}

input UpdateDeleteMeTopicInput {
  routingFields: [DeleteMeFields]
  routingFilter: DeleteMeTopicRoutingFilterInput
  topicId: Uuid!
  displayName: String
  onSubscription: OnSubscription
  enabled: Boolean
}

type CreateHannasTSInPayload {
  concreteItems: [HannasTSIn]
  errors: [UserError!]
}

type UpdateHannasTSInPayload {
  concreteItems: [HannasTSIn]
  errors: [UserError!]
}

type CreateHannasTSInvPayload {
  concreteItems: [HannasTSInv]
  errors: [UserError!]
}

type UpdateHannasTSInvPayload {
  concreteItems: [HannasTSInv]
  errors: [UserError!]
}

type CreateHannasTSInventPayload {
  concreteItems: [HannasTSInvent]
  errors: [UserError!]
}

type UpdateHannasTSInventPayload {
  concreteItems: [HannasTSInvent]
  errors: [UserError!]
}

type CreateHannasTSInvenPayload {
  concreteItems: [HannasTSInven]
  errors: [UserError!]
}

type UpdateHannasTSInvenPayload {
  concreteItems: [HannasTSInven]
  errors: [UserError!]
}

type CreateHannasTSInventoPayload {
  concreteItems: [HannasTSInvento]
  errors: [UserError!]
}

type UpdateHannasTSInventoPayload {
  concreteItems: [HannasTSInvento]
  errors: [UserError!]
}

type CreateHannasTSInventory1Payload {
  concreteItems: [HannasTSInventory1]
  errors: [UserError!]
}

type UpdateHannasTSInventory1Payload {
  concreteItems: [HannasTSInventory1]
  errors: [UserError!]
}

type CreateHannasTSInventoryWithoutName1Payload {
  concreteItems: [HannasTSInventoryWithoutName1]
  errors: [UserError!]
}

type UpdateHannasTSInventoryWithoutName1Payload {
  concreteItems: [HannasTSInventoryWithoutName1]
  errors: [UserError!]
}

type CreateHannasInventoryWithPropertyNamePayload {
  concreteItems: [HannasInventoryWithPropertyName]
  errors: [UserError!]
}

type UpdateHannasInventoryWithPropertyNamePayload {
  concreteItems: [HannasInventoryWithPropertyName]
  errors: [UserError!]
}

type CreateHannasInventoryPayload {
  concreteItems: [HannasInventory]
  errors: [UserError!]
}

type UpdateHannasInventoryPayload {
  concreteItems: [HannasInventory]
  errors: [UserError!]
}

type CreateInventoryToUpdatePayload {
  concreteItems: [InventoryToUpdate]
  errors: [UserError!]
}

type UpdateInventoryToUpdatePayload {
  concreteItems: [InventoryToUpdate]
  errors: [UserError!]
}

type CreateInventoryToDeletePayload {
  concreteItems: [InventoryToDelete]
  errors: [UserError!]
}

type UpdateInventoryToDeletePayload {
  concreteItems: [InventoryToDelete]
  errors: [UserError!]
}

type CreateInventoryToTestPayload {
  concreteItems: [InventoryToTest]
  errors: [UserError!]
}

type UpdateInventoryToTestPayload {
  concreteItems: [InventoryToTest]
  errors: [UserError!]
}

type CreateInventoryToTest2Payload {
  concreteItems: [InventoryToTest2]
  errors: [UserError!]
}

type UpdateInventoryToTest2Payload {
  concreteItems: [InventoryToTest2]
  errors: [UserError!]
}

type CreateInventoryPropTypes3Payload {
  concreteItems: [InventoryPropTypes3]
  errors: [UserError!]
}

type UpdateInventoryPropTypes3Payload {
  concreteItems: [InventoryPropTypes3]
  errors: [UserError!]
}

type CreateInventoryPropTypesWithListTypeTruePayload {
  concreteItems: [InventoryPropTypesWithListTypeTrue]
  errors: [UserError!]
}

type UpdateInventoryPropTypesWithListTypeTruePayload {
  concreteItems: [InventoryPropTypesWithListTypeTrue]
  errors: [UserError!]
}

type CreateInventoryPropTypesWithListTypeTrueBoolPayload {
  concreteItems: [InventoryPropTypesWithListTypeTrueBool]
  errors: [UserError!]
}

type UpdateInventoryPropTypesWithListTypeTrueBoolPayload {
  concreteItems: [InventoryPropTypesWithListTypeTrueBool]
  errors: [UserError!]
}

type CreateReferencedInventoryPayload {
  concreteItems: [ReferencedInventory]
  errors: [UserError!]
}

type UpdateReferencedInventoryPayload {
  concreteItems: [ReferencedInventory]
  errors: [UserError!]
}

type CreateInventoryPropReferencedPayload {
  concreteItems: [InventoryPropReferenced]
  errors: [UserError!]
}

type UpdateInventoryPropReferencedPayload {
  concreteItems: [InventoryPropReferenced]
  errors: [UserError!]
}

type CreateUpdatedInventoryPayload {
  concreteItems: [UpdatedInventory]
  errors: [UserError!]
}

type UpdateUpdatedInventoryPayload {
  concreteItems: [UpdatedInventory]
  errors: [UserError!]
}

type CreateInvTestPayload {
  concreteItems: [InvTest]
  errors: [UserError!]
}

type UpdateInvTestPayload {
  concreteItems: [InvTest]
  errors: [UserError!]
}

type CreateInvTest2Payload {
  concreteItems: [InvTest2]
  errors: [UserError!]
}

type UpdateInvTest2Payload {
  concreteItems: [InvTest2]
  errors: [UserError!]
}

type CreateInvTest3Payload {
  concreteItems: [InvTest3]
  errors: [UserError!]
}

type UpdateInvTest3Payload {
  concreteItems: [InvTest3]
  errors: [UserError!]
}

type CreateInventoryRemovePropsTimeSeriesPayload {
  concreteItems: [InventoryRemovePropsTimeSeries]
  errors: [UserError!]
}

type UpdateInventoryRemovePropsTimeSeriesPayload {
  concreteItems: [InventoryRemovePropsTimeSeries]
  errors: [UserError!]
}

type CreateInventorySetDataPayload {
  concreteItems: [InventorySetData]
  errors: [UserError!]
}

type UpdateInventorySetDataPayload {
  concreteItems: [InventorySetData]
  errors: [UserError!]
}

type CreatePythonTimeseriesTestPayload {
  concreteItems: [PythonTimeseriesTest]
  errors: [UserError!]
}

type UpdatePythonTimeseriesTestPayload {
  concreteItems: [PythonTimeseriesTest]
  errors: [UserError!]
}

type CreateHannasQueryTestInventoryPayload {
  concreteItems: [HannasQueryTestInventory]
  errors: [UserError!]
}

type UpdateHannasQueryTestInventoryPayload {
  concreteItems: [HannasQueryTestInventory]
  errors: [UserError!]
}

type CreatePythonTimeseriesTTNTestPayload {
  concreteItems: [PythonTimeseriesTTNTest]
  errors: [UserError!]
}

type UpdatePythonTimeseriesTTNTestPayload {
  concreteItems: [PythonTimeseriesTTNTest]
  errors: [UserError!]
}

type CreateHannasTestUpdateInventoryPayload {
  concreteItems: [HannasTestUpdateInventory]
  errors: [UserError!]
}

type UpdateHannasTestUpdateInventoryPayload {
  concreteItems: [HannasTestUpdateInventory]
  errors: [UserError!]
}

type CreateHannasUpdatedInventarPayload {
  concreteItems: [HannasUpdatedInventar]
  errors: [UserError!]
}

type UpdateHannasUpdatedInventarPayload {
  concreteItems: [HannasUpdatedInventar]
  errors: [UserError!]
}

type CreateHannasTestValueTypeInventarPayload {
  concreteItems: [HannasTestValueTypeInventar]
  errors: [UserError!]
}

type UpdateHannasTestValueTypeInventarPayload {
  concreteItems: [HannasTestValueTypeInventar]
  errors: [UserError!]
}

type CreateHannasInventoryCreatePayload {
  concreteItems: [HannasInventoryCreate]
  errors: [UserError!]
}

type UpdateHannasInventoryCreatePayload {
  concreteItems: [HannasInventoryCreate]
  errors: [UserError!]
}

type CreateHannasInventoryCreate2Payload {
  concreteItems: [HannasInventoryCreate2]
  errors: [UserError!]
}

type UpdateHannasInventoryCreate2Payload {
  concreteItems: [HannasInventoryCreate2]
  errors: [UserError!]
}

type CreateMeterDataPayload {
  concreteItems: [MeterData]
  errors: [UserError!]
}

type UpdateMeterDataPayload {
  concreteItems: [MeterData]
  errors: [UserError!]
}

type CreateMeterData1Payload {
  concreteItems: [MeterData1]
  errors: [UserError!]
}

type UpdateMeterData1Payload {
  concreteItems: [MeterData1]
  errors: [UserError!]
}

type CreateMarktdatenPayload {
  concreteItems: [Marktdaten]
  errors: [UserError!]
}

type UpdateMarktdatenPayload {
  concreteItems: [Marktdaten]
  errors: [UserError!]
}

type CreateConcreteTimeSeriesInventoryPayload {
  concreteItems: [ConcreteTimeSeriesInventory]
  errors: [UserError!]
}

type UpdateConcreteTimeSeriesInventoryPayload {
  concreteItems: [ConcreteTimeSeriesInventory]
  errors: [UserError!]
}

type CreateTSInvPayload {
  concreteItems: [TSInv]
  errors: [UserError!]
}

type UpdateTSInvPayload {
  concreteItems: [TSInv]
  errors: [UserError!]
}

type CreateTestSelectionListTimeSeriesInventoryPayload {
  concreteItems: [TestSelectionListTimeSeriesInventory]
  errors: [UserError!]
}

type UpdateTestSelectionListTimeSeriesInventoryPayload {
  concreteItems: [TestSelectionListTimeSeriesInventory]
  errors: [UserError!]
}

type CreateTSInventoryPayload {
  concreteItems: [TSInventory]
  errors: [UserError!]
}

type UpdateTSInventoryPayload {
  concreteItems: [TSInventory]
  errors: [UserError!]
}

type CreateTimeSeries11Payload {
  concreteItems: [TimeSeries11]
  errors: [UserError!]
}

type UpdateTimeSeries11Payload {
  concreteItems: [TimeSeries11]
  errors: [UserError!]
}

type CreateTimeSeriesJuergenPayload {
  concreteItems: [TimeSeriesJuergen]
  errors: [UserError!]
}

type UpdateTimeSeriesJuergenPayload {
  concreteItems: [TimeSeriesJuergen]
  errors: [UserError!]
}

input CreateHannasTSInInput {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInInput {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasTSInvInput {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInvOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInvInput {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasTSInventInput {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInventOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInventInput {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasTSInvenInput {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInvenOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInvenInput {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasTSInventoInput {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInventoOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInventoInput {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasTSInventory1Input {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInventory1OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInventory1Input {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasTSInventoryWithoutName1Input {
  unit: String!
  resolution: ResolutionInput!
  numericProp: Float
}

input CreateHannasTSInventoryWithoutName1OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  numericProp: Float
}

input UpdateHannasTSInventoryWithoutName1Input {
  dynamicItemId: Uuid!
  numericProp: Float
}

input CreateHannasInventoryWithPropertyNameInput {
  unit: String!
  resolution: ResolutionInput!
  name: String
  prop1: Boolean
}

input CreateHannasInventoryWithPropertyNameOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  name: String
  prop1: Boolean
}

input UpdateHannasInventoryWithPropertyNameInput {
  dynamicItemId: Uuid!
  name: String
  prop1: Boolean
}

input CreateHannasInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  achteProperty: String
  sechsteProperty: String
  vierteProperty: String
  siebteProperty: Boolean!
  firstPropertyBool: Boolean!
  firstPropertyString: String!
  dritteProperty: Boolean!
  fuenfteProperty: Boolean!
}

input CreateHannasInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  achteProperty: String
  sechsteProperty: String
  vierteProperty: String
  siebteProperty: Boolean!
  firstPropertyBool: Boolean!
  firstPropertyString: String!
  dritteProperty: Boolean!
  fuenfteProperty: Boolean!
}

input UpdateHannasInventoryInput {
  dynamicItemId: Uuid!
  achteProperty: String
  sechsteProperty: String
  vierteProperty: String
  siebteProperty: Boolean
  firstPropertyBool: Boolean
  firstPropertyString: String
  dritteProperty: Boolean
  fuenfteProperty: Boolean
}

input CreateInventoryToUpdateInput {
  unit: String!
  resolution: ResolutionInput!
  firstUpdatedPropertyBool: Boolean!
  firstPropertyString: String!
}

input CreateInventoryToUpdateOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  firstUpdatedPropertyBool: Boolean!
  firstPropertyString: String!
}

input UpdateInventoryToUpdateInput {
  dynamicItemId: Uuid!
  firstUpdatedPropertyBool: Boolean
  firstPropertyString: String
}

input CreateInventoryToDeleteInput {
  unit: String!
  resolution: ResolutionInput!
  firstPropertyString: String!
}

input CreateInventoryToDeleteOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  firstPropertyString: String!
}

input UpdateInventoryToDeleteInput {
  dynamicItemId: Uuid!
  firstPropertyString: String
}

input CreateInventoryToTestInput {
  unit: String!
  resolution: ResolutionInput!
  firstPropertyBool: Boolean!
  firstPropertyString: String
}

input CreateInventoryToTestOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  firstPropertyBool: Boolean!
  firstPropertyString: String
}

input UpdateInventoryToTestInput {
  dynamicItemId: Uuid!
  firstPropertyBool: Boolean
  firstPropertyString: String
}

input CreateInventoryToTest2Input {
  unit: String!
  resolution: ResolutionInput!
  firstPropertyString: String
  firstPropertyBool: Boolean!
}

input CreateInventoryToTest2OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  firstPropertyString: String
  firstPropertyBool: Boolean!
}

input UpdateInventoryToTest2Input {
  dynamicItemId: Uuid!
  firstPropertyString: String
  firstPropertyBool: Boolean
}

input CreateInventoryPropTypes3Input {
  unit: String!
  resolution: ResolutionInput!
  firstPropertyBool: Boolean!
}

input CreateInventoryPropTypes3OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  firstPropertyBool: Boolean!
}

input UpdateInventoryPropTypes3Input {
  dynamicItemId: Uuid!
  firstPropertyBool: Boolean
}

input CreateInventoryPropTypesWithListTypeTrueInput {
  unit: String!
  resolution: ResolutionInput!
  firstPropertyBool: [Boolean!]!
}

input CreateInventoryPropTypesWithListTypeTrueOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  firstPropertyBool: [Boolean!]!
}

input UpdateInventoryPropTypesWithListTypeTrueInput {
  dynamicItemId: Uuid!
  firstPropertyBool: [Boolean]
}

input CreateInventoryPropTypesWithListTypeTrueBoolInput {
  unit: String!
  resolution: ResolutionInput!
  propBool: [Boolean!]!
}

input CreateInventoryPropTypesWithListTypeTrueBoolOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  propBool: [Boolean!]!
}

input UpdateInventoryPropTypesWithListTypeTrueBoolInput {
  dynamicItemId: Uuid!
  propBool: [Boolean]
}

input CreateReferencedInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  refProp: Uuid
}

input CreateReferencedInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  refProp: Uuid
}

input UpdateReferencedInventoryInput {
  dynamicItemId: Uuid!
  refProp: Uuid
}

input CreateInventoryPropReferencedInput {
  unit: String!
  resolution: ResolutionInput!
  referencedProp: Uuid
}

input CreateInventoryPropReferencedOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  referencedProp: Uuid
}

input UpdateInventoryPropReferencedInput {
  dynamicItemId: Uuid!
  referencedProp: Uuid
}

input CreateUpdatedInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  fieldUpdated: Uuid
}

input CreateUpdatedInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldUpdated: Uuid
}

input UpdateUpdatedInventoryInput {
  dynamicItemId: Uuid!
  fieldUpdated: Uuid
}

input CreateInvTestInput {
  unit: String!
  resolution: ResolutionInput!
  fieldName: [Boolean]
}

input CreateInvTestOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldName: [Boolean]
}

input UpdateInvTestInput {
  dynamicItemId: Uuid!
  fieldName: [Boolean]
}

input CreateInvTest2Input {
  unit: String!
  resolution: ResolutionInput!
  fieldName: Boolean
}

input CreateInvTest2OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldName: Boolean
}

input UpdateInvTest2Input {
  dynamicItemId: Uuid!
  fieldName: Boolean
}

input CreateInvTest3Input {
  unit: String!
  resolution: ResolutionInput!
  fieldName: Boolean
}

input CreateInvTest3OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldName: Boolean
}

input UpdateInvTest3Input {
  dynamicItemId: Uuid!
  fieldName: Boolean
}

input CreateInventoryRemovePropsTimeSeriesInput {
  unit: String!
  resolution: ResolutionInput!
  fieldName2: String
}

input CreateInventoryRemovePropsTimeSeriesOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldName2: String
}

input UpdateInventoryRemovePropsTimeSeriesInput {
  dynamicItemId: Uuid!
  fieldName2: String
}

input CreateInventorySetDataInput {
  unit: String!
  resolution: ResolutionInput!
  fieldName1: Boolean
}

input CreateInventorySetDataOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldName1: Boolean
}

input UpdateInventorySetDataInput {
  dynamicItemId: Uuid!
  fieldName1: Boolean
}

input CreatePythonTimeseriesTestInput {
  unit: String!
  resolution: ResolutionInput!
  dateTime: DateTime
}

input CreatePythonTimeseriesTestOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  dateTime: DateTime
}

input UpdatePythonTimeseriesTestInput {
  dynamicItemId: Uuid!
  dateTime: DateTime
}

input CreateHannasQueryTestInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  fieldName1: Boolean
}

input CreateHannasQueryTestInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fieldName1: Boolean
}

input UpdateHannasQueryTestInventoryInput {
  dynamicItemId: Uuid!
  fieldName1: Boolean
}

input CreatePythonTimeseriesTTNTestInput {
  unit: String!
  resolution: ResolutionInput!
  publicationDate: DateTime
  strikePrice: Float
}

input CreatePythonTimeseriesTTNTestOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  publicationDate: DateTime
  strikePrice: Float
}

input UpdatePythonTimeseriesTTNTestInput {
  dynamicItemId: Uuid!
  publicationDate: DateTime
  strikePrice: Float
}

input CreateHannasTestUpdateInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  bool: Boolean
  string: String!
}

input CreateHannasTestUpdateInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  bool: Boolean
  string: String!
}

input UpdateHannasTestUpdateInventoryInput {
  dynamicItemId: Uuid!
  bool: Boolean
  string: String
}

input CreateHannasUpdatedInventarInput {
  unit: String!
  resolution: ResolutionInput!
  updatedStringField: String!
  string: String!
}

input CreateHannasUpdatedInventarOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  updatedStringField: String!
  string: String!
}

input UpdateHannasUpdatedInventarInput {
  dynamicItemId: Uuid!
  updatedStringField: String
  string: String
}

input CreateHannasTestValueTypeInventarInput {
  unit: String!
  resolution: ResolutionInput!
  string: String!
  bool: Boolean
}

input CreateHannasTestValueTypeInventarOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  string: String!
  bool: Boolean
}

input UpdateHannasTestValueTypeInventarInput {
  dynamicItemId: Uuid!
  string: String
  bool: Boolean
}

input CreateHannasInventoryCreateInput {
  unit: String!
  resolution: ResolutionInput!
  bool: Boolean
  string: String!
}

input CreateHannasInventoryCreateOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  bool: Boolean
  string: String!
}

input UpdateHannasInventoryCreateInput {
  dynamicItemId: Uuid!
  bool: Boolean
  string: String
}

input CreateHannasInventoryCreate2Input {
  unit: String!
  resolution: ResolutionInput!
  string: String!
  bool: Boolean
}

input CreateHannasInventoryCreate2OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  string: String!
  bool: Boolean
}

input UpdateHannasInventoryCreate2Input {
  dynamicItemId: Uuid!
  string: String
  bool: Boolean
}

input CreateMeterDataInput {
  unit: String!
  resolution: ResolutionInput!
  fullName: String
  meterId: String
  object: String
  measure: String
  calculation: String
}

input CreateMeterDataOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  fullName: String
  meterId: String
  object: String
  measure: String
  calculation: String
}

input UpdateMeterDataInput {
  dynamicItemId: Uuid!
  fullName: String
  meterId: String
  object: String
  measure: String
  calculation: String
}

input CreateMeterData1Input {
  unit: String!
  resolution: ResolutionInput!
  calculation: String
  object: String
  fullName: String
  measure: String
  meterId: String
}

input CreateMeterData1OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  calculation: String
  object: String
  fullName: String
  measure: String
  meterId: String
}

input UpdateMeterData1Input {
  dynamicItemId: Uuid!
  calculation: String
  object: String
  fullName: String
  measure: String
  meterId: String
}

input CreateMarktdatenInput {
  unit: String!
  resolution: ResolutionInput!
  measure: String!
  seasonalDelivery: String
  instrument: String
  source: String
  provider: String
  commodity: String
  location_country: String
  ts_name: String!
}

input CreateMarktdatenOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  measure: String!
  seasonalDelivery: String
  instrument: String
  source: String
  provider: String
  commodity: String
  location_country: String
  ts_name: String!
}

input UpdateMarktdatenInput {
  dynamicItemId: Uuid!
  measure: String
  seasonalDelivery: String
  instrument: String
  source: String
  provider: String
  commodity: String
  location_country: String
  ts_name: String
}

input CreateConcreteTimeSeriesInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  stringProp: String
  numericProp: Float
}

input CreateConcreteTimeSeriesInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  stringProp: String
  numericProp: Float
}

input UpdateConcreteTimeSeriesInventoryInput {
  dynamicItemId: Uuid!
  stringProp: String
  numericProp: Float
}

input CreateTSInvInput {
  unit: String!
  resolution: ResolutionInput!
  bilanzkreis: String
  attribut: String
  messstelle: String
  netz: String
  name: String
}

input CreateTSInvOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  bilanzkreis: String
  attribut: String
  messstelle: String
  netz: String
  name: String
}

input UpdateTSInvInput {
  dynamicItemId: Uuid!
  bilanzkreis: String
  attribut: String
  messstelle: String
  netz: String
  name: String
}

input CreateTestSelectionListTimeSeriesInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  stringProp: String
  selectionProp: SelectionListHanna4!
  numProp: Float!
}

input CreateTestSelectionListTimeSeriesInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  stringProp: String
  selectionProp: SelectionListHanna4!
  numProp: Float!
}

input UpdateTestSelectionListTimeSeriesInventoryInput {
  dynamicItemId: Uuid!
  stringProp: String
  selectionProp: SelectionListHanna4
  numProp: Float
}

input CreateTSInventoryInput {
  unit: String!
  resolution: ResolutionInput!
  stringProp: String
}

input CreateTSInventoryOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  stringProp: String
}

input UpdateTSInventoryInput {
  dynamicItemId: Uuid!
  stringProp: String
}

input CreateTimeSeries11Input {
  unit: String!
  resolution: ResolutionInput!
  stringProp: String
  numProp: Float
}

input CreateTimeSeries11OfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  stringProp: String
  numProp: Float
}

input UpdateTimeSeries11Input {
  dynamicItemId: Uuid!
  stringProp: String
  numProp: Float
}

input CreateTimeSeriesJuergenInput {
  unit: String!
  resolution: ResolutionInput!
  stringProp: String
  dateProp: DateTime
  numProp: Float
}

input CreateTimeSeriesJuergenOfGroupInput {
  timeSeriesGroupInventoryId: Uuid!
  timeSeriesGroupItemId: Uuid!
  stringProp: String
  dateProp: DateTime
  numProp: Float
}

input UpdateTimeSeriesJuergenInput {
  dynamicItemId: Uuid!
  stringProp: String
  dateProp: DateTime
  numProp: Float
}

type CreatePythonTimeseriesGroupTestPayload {
  concreteItems: [PythonTimeseriesGroupTest]
  errors: [UserError!]
}

type UpdatePythonTimeseriesGroupTestPayload {
  concreteItems: [PythonTimeseriesGroupTest]
  errors: [UserError!]
}

type CreateGroupsPayload {
  concreteItems: [Groups]
  errors: [UserError!]
}

type UpdateGroupsPayload {
  concreteItems: [Groups]
  errors: [UserError!]
}

type CreateGroups1Payload {
  concreteItems: [Groups1]
  errors: [UserError!]
}

type UpdateGroups1Payload {
  concreteItems: [Groups1]
  errors: [UserError!]
}

type CreateGroups22Payload {
  concreteItems: [Groups22]
  errors: [UserError!]
}

type UpdateGroups22Payload {
  concreteItems: [Groups22]
  errors: [UserError!]
}

input CreatePythonTimeseriesGroupTestInput {
  timeSeriesInventoryId: Uuid!
  resolution: ResolutionInput!
  unit: String!
  region: String
  type: String
  measure: String
  source: String
  identification: String
}

input UpdatePythonTimeseriesGroupTestInput {
  dynamicItemId: Uuid!
  timeSeriesInventoryId: Uuid
  resolution: ResolutionInput
  unit: String
  region: String
  type: String
  measure: String
  source: String
  identification: String
}

input CreateGroupsInput {
  timeSeriesInventoryId: Uuid!
  resolution: ResolutionInput!
  unit: String!
  groupProp: Boolean
}

input UpdateGroupsInput {
  dynamicItemId: Uuid!
  timeSeriesInventoryId: Uuid
  resolution: ResolutionInput
  unit: String
  groupProp: Boolean
}

input CreateGroups1Input {
  timeSeriesInventoryId: Uuid!
  resolution: ResolutionInput!
  unit: String!
  groupProp: Boolean
}

input UpdateGroups1Input {
  dynamicItemId: Uuid!
  timeSeriesInventoryId: Uuid
  resolution: ResolutionInput
  unit: String
  groupProp: Boolean
}

input CreateGroups22Input {
  timeSeriesInventoryId: Uuid!
  resolution: ResolutionInput!
  unit: String!
  groupProp2: Boolean
  groupProp1: Boolean
  groupProp3: Boolean
}

input UpdateGroups22Input {
  dynamicItemId: Uuid!
  timeSeriesInventoryId: Uuid
  resolution: ResolutionInput
  unit: String
  groupProp2: Boolean
  groupProp1: Boolean
  groupProp3: Boolean
}

type Sub0Default implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  sub0Field: String
}

type OnItemDeletedMessage {
  dynamicItemId: Uuid!
  changeDate: DateTime!
  changeUser: String!
}

type HannasInventoryWithProperties implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop1: Boolean
}

type Wohnung implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  eigentuemer: String
  stocks: Stocks
  wohnflaeche: Float
}

type InventoryRemoveProps implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  fieldName2: String
}

type EmTestF implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  testProp1F: String
}

type EmTest1F implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  testProp11F: String
}

type EmTest4F implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  testProp41F: String
}

type InputClearingPositionTransaction implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  source_code: String
  nonclearingmember: String
  transaction_type: Float
  client: String
  clearingmember: String
  f_fct_onl_clrg_pos_trans_id: Float
  account_sponsor: String
  member: String
  fact_date: String
  fact_timestamp: String
  clearinghouse: String
  mifidmember: String
  transaction_stream_type: Float
  account_owner: String
  instrument_id: Float
  orig_id: String
  buy_sell_code: String
}

type InputTransitionTransaction implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  current_suffix: String
  mifidmember: String
  nonclearingmember: String
  its: String
  trade_rpt_type_code: String
  trade_handling_instr: String
  position_long: Float
  fact_timestamp: String
  order_qty: Float
  order_no: String
  designated_qty_long: Float
  clg_mbr_participant_code: String
  trader_code: String
  match_price: String
  currency_code: String
  trade_rpt_id: String
  customer: String
  clearingmember: String
  maintenance_event: String
  trade_rpt_ref_id: String
  market: String
  origin_trade_time_cet: String
  tran_adj_ind: String
  manual_trade_entry_flag: Float
  position_short: Float
  parent_suffix: String
  source_code: String
  account_type: String
  member: String
  trade_rpt_trans_type_code: String
  transaction_no: String
  origin_trade_date_cet: String
  adj_qty_long: Float
  mbr_participant_code: String
  origin_order_no: String
  clearinghouse: String
  user_order_no: String
  give_up_status_code: String
  instrument_id: String
  f_fct_onl_pos_trans_id: String
  exercised_allocated: Float
  orig_id: String
  trade_match_id: String
  trade_size: String
  client: String
  fact_date: String
  delta_qty_short: Float
  trade_type: String
  designated_qty_short: Float
  order_aggressor_flag: String
  transfer_reason: String
  pos_text: String
  open_close_flag: String
  buy_sell_ind: String
  adj_qty_short: Float
}

type InputTrade implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  match_price: Float
  orig_id: String
  its: String
  buy_sell_ind: String
  cancellation_type: String
  instrument_id: String
  currency_code: String
  fact_timestamp: String
  trade_group_id: String
  source_code: String
  trade_origin: String
  f_fct_order_quote_id: String
  on_bhlf_mbr_participant_code: String
  trade_id: String
  maintenance_event: String
  client: String
  user_code: String
  mbr_participant_code: String
  fact_date: String
  trade_size: Float
  exchange_ord_id: String
  backref: RemitTrade
  member: String
  f_fct_trade_id: String
  aggressor_ind: String
}

type RemitTrade implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  member: String
  notionalcontractquantityunit: String
  notionalamount: Float
  contractid: String
  aggressor: String
  voicebrokered: Boolean
  version: DateTime
  traderidtype: String
  client: String
  transactiontime: DateTime
  notionalamountcurrency: String
  pricecurrency: String
  actiontype: String
  buysellindicator: String
  inputpositiontransaction: InputTransitionTransaction
  marketparticipantid: String
  traderid: String
  price: Float
  orderstatus: String
  quantityunit: String
  tradingcapacity: String
  transactiontimenano: Float
  ordertype: String
  orderduration: String
  uniquetransactionidentifier: String
  displayValue2: String
  istTeuer: Boolean
  displayValue: String
  notionalcontractquantity: Float
  organisedmarketplaceidtype: String
  organisedmarketplaceid: String
  marketparticipantidtype: String
  inputclearingpositiontransaction: InputClearingPositionTransaction
  inputtrade: InputTrade
  quantity: Float
  discount: Float
}

type InternalDataSource implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  customId: String!
  title: String
  dataSourceType: String!
}

type Flats implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  tenant: String
  area: Float
}

type Test_delete implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  meterId: String
}

type Test_delete2 implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  meterId: String
  address: Sub0Default
}

type PropertyTest implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop2: Boolean
  prop1: Boolean
}

type PropertyTest2 implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop2: Boolean
}

type PropertyTest3 implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop2: Boolean
}

type PropertyTest4 implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop1: Boolean
  prop3: Boolean!
}

type TestHanna implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  propEins: String
}

type TestSelectionList implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  numProp: Float!
  selectionProp: SelectionListHanna!
  stringProp: String
}

type TestSelectionListAgain implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  selectionProp: SelectionListHanna!
  stringProp: String
  numProp: Float!
}

type TestSelectionListAgain3 implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringProp: String
  selectionProp: SelectionListHanna3!
  numProp: Float!
}

type TestSelectionListAgain4 implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringProp: String
  selectionProp: SelectionListHanna4!
  numProp: Float!
}

type BasicInventory implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringField: String
  numberField: Float
}

type FullTestInventory implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  numberFieldNull: Float
  boolFieldNull: Boolean
  boolField: Boolean!
  enumFieldList: [Stocks!]!
  dateField: DateTime!
  enumFieldNull: Stocks
  dateFieldList: [DateTime!]!
  dateFieldNullList: [DateTime!]
  stringFieldNullList: [String!]
  boolFieldNullList: [Boolean!]
  boolFieldList: [Boolean!]!
  refFieldList: [BasicInventory!]!
  stringFieldList: [String!]!
  enumFieldNullList: [Stocks!]
  refFieldNullList: [BasicInventory!]
  stringFieldNull: String
  stringField: String!
  numberField: Float!
  numberFieldNullList: [Float!]
  numberFieldList: [Float!]!
  refFieldNull: BasicInventory
  refField: BasicInventory!
  dateFieldNull: DateTime
  enumField: Stocks!
}

type DispatcherMessages implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  wohnungsGruppe: String
  temperatur: Float
  spannung: Float
}

type UpperTestFieldName implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  propField: String
}

type DeleteMe implements IItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  lalal: String
}

input Sub0DefaultTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  sub0Field: String
}

input HannasInventoryWithPropertiesTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  prop1: Boolean
}

input WohnungTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  eigentuemer: String
  stocks: Stocks
  wohnflaeche: Float
}

input InventoryRemovePropsTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  fieldName2: String
}

input EmTestFTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  testProp1F: String
}

input EmTest1FTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  testProp11F: String
}

input EmTest4FTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  testProp41F: String
}

input InputClearingPositionTransactionTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  source_code: String
  nonclearingmember: String
  transaction_type: Float
  client: String
  clearingmember: String
  f_fct_onl_clrg_pos_trans_id: Float
  account_sponsor: String
  member: String
  fact_date: String
  fact_timestamp: String
  clearinghouse: String
  mifidmember: String
  transaction_stream_type: Float
  account_owner: String
  instrument_id: Float
  orig_id: String
  buy_sell_code: String
}

input InputTransitionTransactionTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  current_suffix: String
  mifidmember: String
  nonclearingmember: String
  its: String
  trade_rpt_type_code: String
  trade_handling_instr: String
  position_long: Float
  fact_timestamp: String
  order_qty: Float
  order_no: String
  designated_qty_long: Float
  clg_mbr_participant_code: String
  trader_code: String
  match_price: String
  currency_code: String
  trade_rpt_id: String
  customer: String
  clearingmember: String
  maintenance_event: String
  trade_rpt_ref_id: String
  market: String
  origin_trade_time_cet: String
  tran_adj_ind: String
  manual_trade_entry_flag: Float
  position_short: Float
  parent_suffix: String
  source_code: String
  account_type: String
  member: String
  trade_rpt_trans_type_code: String
  transaction_no: String
  origin_trade_date_cet: String
  adj_qty_long: Float
  mbr_participant_code: String
  origin_order_no: String
  clearinghouse: String
  user_order_no: String
  give_up_status_code: String
  instrument_id: String
  f_fct_onl_pos_trans_id: String
  exercised_allocated: Float
  orig_id: String
  trade_match_id: String
  trade_size: String
  client: String
  fact_date: String
  delta_qty_short: Float
  trade_type: String
  designated_qty_short: Float
  order_aggressor_flag: String
  transfer_reason: String
  pos_text: String
  open_close_flag: String
  buy_sell_ind: String
  adj_qty_short: Float
}

input InputTradeTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  match_price: Float
  orig_id: String
  its: String
  buy_sell_ind: String
  cancellation_type: String
  instrument_id: String
  currency_code: String
  fact_timestamp: String
  trade_group_id: String
  source_code: String
  trade_origin: String
  f_fct_order_quote_id: String
  on_bhlf_mbr_participant_code: String
  trade_id: String
  maintenance_event: String
  client: String
  user_code: String
  mbr_participant_code: String
  fact_date: String
  trade_size: Float
  exchange_ord_id: String
  backref: Uuid
  member: String
  f_fct_trade_id: String
  aggressor_ind: String
}

input RemitTradeTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  member: String
  notionalcontractquantityunit: String
  notionalamount: Float
  contractid: String
  aggressor: String
  voicebrokered: Boolean
  version: DateTime
  traderidtype: String
  client: String
  transactiontime: DateTime
  notionalamountcurrency: String
  pricecurrency: String
  actiontype: String
  buysellindicator: String
  inputpositiontransaction: Uuid
  marketparticipantid: String
  traderid: String
  price: Float
  orderstatus: String
  quantityunit: String
  tradingcapacity: String
  transactiontimenano: Float
  ordertype: String
  orderduration: String
  uniquetransactionidentifier: String
  notionalcontractquantity: Float
  organisedmarketplaceidtype: String
  organisedmarketplaceid: String
  marketparticipantidtype: String
  inputclearingpositiontransaction: Uuid
  inputtrade: Uuid
  quantity: Float
}

input InternalDataSourceTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  customId: String
  title: String
  dataSourceType: String
}

input FlatsTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  tenant: String
  area: Float
}

input Test_deleteTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  meterId: String
}

input Test_delete2TopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  meterId: String
  address: Uuid
}

input PropertyTestTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  prop2: Boolean
  prop1: Boolean
}

input PropertyTest2TopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  prop2: Boolean
}

input PropertyTest3TopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  prop2: Boolean
}

input PropertyTest4TopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  prop1: Boolean
  prop3: Boolean
}

input TestHannaTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  propEins: String
}

input TestSelectionListTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  numProp: Float
  selectionProp: SelectionListHanna
  stringProp: String
}

input TestSelectionListAgainTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  selectionProp: SelectionListHanna
  stringProp: String
  numProp: Float
}

input TestSelectionListAgain3TopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  stringProp: String
  selectionProp: SelectionListHanna3
  numProp: Float
}

input TestSelectionListAgain4TopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  stringProp: String
  selectionProp: SelectionListHanna4
  numProp: Float
}

input BasicInventoryTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  stringField: String
  numberField: Float
}

input FullTestInventoryTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  numberFieldNull: Float
  boolFieldNull: Boolean
  boolField: Boolean
  enumFieldList: [Stocks]
  dateField: DateTime
  enumFieldNull: Stocks
  dateFieldList: [DateTime]
  dateFieldNullList: [DateTime]
  stringFieldNullList: [String]
  boolFieldNullList: [Boolean]
  boolFieldList: [Boolean]
  refFieldList: [Uuid]
  stringFieldList: [String]
  enumFieldNullList: [Stocks]
  refFieldNullList: [Uuid]
  stringFieldNull: String
  stringField: String
  numberField: Float
  numberFieldNullList: [Float]
  numberFieldList: [Float]
  refFieldNull: Uuid
  refField: Uuid
  dateFieldNull: DateTime
  enumField: Stocks
}

input DispatcherMessagesTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  wohnungsGruppe: String
  temperatur: Float
  spannung: Float
}

input UpperTestFieldNameTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  propField: String
}

input DeleteMeTopicRoutingValuesInput {
  dynamicItemId: Uuid
  changeUser: String
  lalal: String
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableGuidOperationFilterInput {
  eq: Uuid
  neq: Uuid
  in: [Uuid!]
  nin: [Uuid!]
  gt: Uuid
  ngt: Uuid
  gte: Uuid
  ngte: Uuid
  lt: Uuid
  nlt: Uuid
  lte: Uuid
  nlte: Uuid
}

input VariantOperationFilterInput {
  eq: Variant
  neq: Variant
  in: [Variant!]
  nin: [Variant!]
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type DynamicInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DynamicInventory
}

input ListFilterInputTypeOfSelectionItemFilterInput {
  all: SelectionItemFilterInput
  none: SelectionItemFilterInput
  some: SelectionItemFilterInput
  any: Boolean
}

type SelectionList implements Node {
  id: ID!
  selectionListId: Uuid!
  fieldName: String!
  displayName: String!
  selectionItems: [SelectionItem!]!
}

"An edge in a connection."
type SelectionListEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SelectionList
}

input RelationTypeOperationFilterInput {
  eq: RelationType
  neq: RelationType
  in: [RelationType!]
  nin: [RelationType!]
}

input DataFilterInput {
  and: [DataFilterInput!]
  or: [DataFilterInput!]
  resolution: ResolutionFilterInput
  unit: StringOperationFilterInput
  dataPoints: ListFilterInputTypeOfDataPointFilterInput
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input DataSortInput {
  resolution: ResolutionSortInput
  unit: SortEnumType
}

type TimeSeriesCollectionItem {
  data: Data
  itemId: Uuid!
  status: Int
}

"An edge in a connection."
type TimeSeriesCollectionItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimeSeriesCollectionItem
}

input ComparableNullableOfDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input NullableOfAggregationRuleOperationFilterInput {
  eq: AggregationRule
  neq: AggregationRule
  in: [AggregationRule]
  nin: [AggregationRule]
}

type Unit {
  name: String!
  baseUnit: String
  factor: Float
  aggregation: AggregationRule
}

"An edge in a connection."
type UnitEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Unit
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input OnSubscriptionOperationFilterInput {
  eq: OnSubscription
  neq: OnSubscription
  in: [OnSubscription!]
  nin: [OnSubscription!]
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ListComparableGuidOperationFilterInput {
  all: ComparableGuidOperationFilterInput
  none: ComparableGuidOperationFilterInput
  some: ComparableGuidOperationFilterInput
  any: Boolean
}

input StocksFilterInput {
  eq: Stocks
  neq: Stocks
  in: [Stocks]
  nin: [Stocks]
}

input ComparableDoubleOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float!]
  nin: [Float!]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input SelectionListHannaFilterInput {
  eq: SelectionListHanna
  neq: SelectionListHanna
  in: [SelectionListHanna]
  nin: [SelectionListHanna]
}

input SelectionListHanna3FilterInput {
  eq: SelectionListHanna3
  neq: SelectionListHanna3
  in: [SelectionListHanna3]
  nin: [SelectionListHanna3]
}

input SelectionListHanna4FilterInput {
  eq: SelectionListHanna4
  neq: SelectionListHanna4
  in: [SelectionListHanna4]
  nin: [SelectionListHanna4]
}

input ListCustomEnumOperationFilterInputTypeOfStocksFilterInput {
  all: StocksFilterInput
  none: StocksFilterInput
  some: StocksFilterInput
  any: Boolean
}

input ListComparableDateTimeOperationFilterInput {
  all: ComparableDateTimeOperationFilterInput
  none: ComparableDateTimeOperationFilterInput
  some: ComparableDateTimeOperationFilterInput
  any: Boolean
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ListBooleanOperationFilterInput {
  all: BooleanOperationFilterInput
  none: BooleanOperationFilterInput
  some: BooleanOperationFilterInput
  any: Boolean
}

input ListConcreteItemFilterInputTypeOfBasicInventoryFilterInput {
  all: BasicInventoryFilterInput
  none: BasicInventoryFilterInput
  some: BasicInventoryFilterInput
  any: Boolean
}

input ListComparableDoubleOperationFilterInput {
  all: ComparableDoubleOperationFilterInput
  none: ComparableDoubleOperationFilterInput
  some: ComparableDoubleOperationFilterInput
  any: Boolean
}

input ListConcreteHistoryItemFilterInputTypeOfBasicInventoryHistoryFilterInput {
  all: BasicInventoryHistoryHistoryFilterInput
  none: BasicInventoryHistoryHistoryFilterInput
  some: BasicInventoryHistoryHistoryFilterInput
  any: Boolean
}

"An edge in a connection."
type Sub0DefaultEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Sub0Default
}

type Sub0DefaultHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  sub0Field: String
}

"An edge in a connection."
type Sub0DefaultHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Sub0DefaultHistory
}

type Sub0DefaultTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [sub0DefaultFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type Sub0DefaultTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Sub0DefaultTopic
}

"An edge in a connection."
type HannasInventoryWithPropertiesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryWithProperties
}

type HannasInventoryWithPropertiesHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop1: Boolean
}

"An edge in a connection."
type HannasInventoryWithPropertiesHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryWithPropertiesHistory
}

type HannasInventoryWithPropertiesTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [HannasInventoryWithPropertiesFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type HannasInventoryWithPropertiesTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryWithPropertiesTopic
}

"An edge in a connection."
type WohnungEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Wohnung
}

type WohnungHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  eigentuemer: String
  wohnflaeche: Float
}

"An edge in a connection."
type WohnungHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: WohnungHistory
}

type WohnungTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [WohnungFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type WohnungTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: WohnungTopic
}

"An edge in a connection."
type InventoryRemovePropsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryRemoveProps
}

type InventoryRemovePropsHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  fieldName2: String
}

"An edge in a connection."
type InventoryRemovePropsHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryRemovePropsHistory
}

type InventoryRemovePropsTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [InventoryRemovePropsFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type InventoryRemovePropsTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryRemovePropsTopic
}

"An edge in a connection."
type EmTestFEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTestF
}

type EmTestFHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  testProp1F: String
}

"An edge in a connection."
type EmTestFHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTestFHistory
}

type EmTestFTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [EmTestFFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type EmTestFTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTestFTopic
}

"An edge in a connection."
type EmTest1FEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTest1F
}

type EmTest1FHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  testProp11F: String
}

"An edge in a connection."
type EmTest1FHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTest1FHistory
}

type EmTest1FTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [EmTest1FFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type EmTest1FTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTest1FTopic
}

"An edge in a connection."
type EmTest4FEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTest4F
}

type EmTest4FHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  testProp41F: String
}

"An edge in a connection."
type EmTest4FHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTest4FHistory
}

type EmTest4FTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [EmTest4FFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type EmTest4FTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmTest4FTopic
}

"An edge in a connection."
type InputClearingPositionTransactionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputClearingPositionTransaction
}

type InputClearingPositionTransactionHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  source_code: String
  nonclearingmember: String
  transaction_type: Float
  client: String
  clearingmember: String
  f_fct_onl_clrg_pos_trans_id: Float
  account_sponsor: String
  member: String
  fact_date: String
  fact_timestamp: String
  clearinghouse: String
  mifidmember: String
  transaction_stream_type: Float
  account_owner: String
  instrument_id: Float
  orig_id: String
  buy_sell_code: String
}

"An edge in a connection."
type InputClearingPositionTransactionHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputClearingPositionTransactionHistory
}

type InputClearingPositionTransactionTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [InputClearingPositionTransactionFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type InputClearingPositionTransactionTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputClearingPositionTransactionTopic
}

"An edge in a connection."
type InputTransitionTransactionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputTransitionTransaction
}

type InputTransitionTransactionHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  current_suffix: String
  mifidmember: String
  nonclearingmember: String
  its: String
  trade_rpt_type_code: String
  trade_handling_instr: String
  position_long: Float
  fact_timestamp: String
  order_qty: Float
  order_no: String
  designated_qty_long: Float
  clg_mbr_participant_code: String
  trader_code: String
  match_price: String
  currency_code: String
  trade_rpt_id: String
  customer: String
  clearingmember: String
  maintenance_event: String
  trade_rpt_ref_id: String
  market: String
  origin_trade_time_cet: String
  tran_adj_ind: String
  manual_trade_entry_flag: Float
  position_short: Float
  parent_suffix: String
  source_code: String
  account_type: String
  member: String
  trade_rpt_trans_type_code: String
  transaction_no: String
  origin_trade_date_cet: String
  adj_qty_long: Float
  mbr_participant_code: String
  origin_order_no: String
  clearinghouse: String
  user_order_no: String
  give_up_status_code: String
  instrument_id: String
  f_fct_onl_pos_trans_id: String
  exercised_allocated: Float
  orig_id: String
  trade_match_id: String
  trade_size: String
  client: String
  fact_date: String
  delta_qty_short: Float
  trade_type: String
  designated_qty_short: Float
  order_aggressor_flag: String
  transfer_reason: String
  pos_text: String
  open_close_flag: String
  buy_sell_ind: String
  adj_qty_short: Float
}

"An edge in a connection."
type InputTransitionTransactionHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputTransitionTransactionHistory
}

type InputTransitionTransactionTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [InputTransitionTransactionFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type InputTransitionTransactionTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputTransitionTransactionTopic
}

"An edge in a connection."
type InputTradeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputTrade
}

type InputTradeHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  match_price: Float
  orig_id: String
  its: String
  buy_sell_ind: String
  cancellation_type: String
  instrument_id: String
  currency_code: String
  fact_timestamp: String
  trade_group_id: String
  source_code: String
  trade_origin: String
  f_fct_order_quote_id: String
  on_bhlf_mbr_participant_code: String
  trade_id: String
  maintenance_event: String
  client: String
  user_code: String
  mbr_participant_code: String
  fact_date: String
  trade_size: Float
  exchange_ord_id: String
  backref: RemitTradeHistory
  member: String
  f_fct_trade_id: String
  aggressor_ind: String
}

"An edge in a connection."
type InputTradeHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputTradeHistory
}

type InputTradeTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [InputTradeFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type InputTradeTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InputTradeTopic
}

"An edge in a connection."
type RemitTradeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RemitTrade
}

type RemitTradeHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  member: String
  notionalcontractquantityunit: String
  notionalamount: Float
  contractid: String
  aggressor: String
  voicebrokered: Boolean
  version: DateTime
  traderidtype: String
  client: String
  transactiontime: DateTime
  notionalamountcurrency: String
  pricecurrency: String
  actiontype: String
  buysellindicator: String
  inputpositiontransaction: InputTransitionTransactionHistory
  marketparticipantid: String
  traderid: String
  price: Float
  orderstatus: String
  quantityunit: String
  tradingcapacity: String
  transactiontimenano: Float
  ordertype: String
  orderduration: String
  uniquetransactionidentifier: String
  displayValue2: String
  istTeuer: Boolean!
  displayValue: String
  notionalcontractquantity: Float
  organisedmarketplaceidtype: String
  organisedmarketplaceid: String
  marketparticipantidtype: String
  inputclearingpositiontransaction: InputClearingPositionTransactionHistory
  inputtrade: InputTradeHistory
  quantity: Float
  discount: Float!
}

"An edge in a connection."
type RemitTradeHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RemitTradeHistory
}

type RemitTradeTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [RemitTradeFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type RemitTradeTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RemitTradeTopic
}

"An edge in a connection."
type InternalDataSourceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InternalDataSource
}

type InternalDataSourceHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  customId: String
  title: String
  dataSourceType: String
}

"An edge in a connection."
type InternalDataSourceHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InternalDataSourceHistory
}

type InternalDataSourceTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [InternalDataSourceFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type InternalDataSourceTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InternalDataSourceTopic
}

"An edge in a connection."
type FlatsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Flats
}

type FlatsHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  tenant: String
  area: Float
}

"An edge in a connection."
type FlatsHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FlatsHistory
}

type FlatsTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [FlatsFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type FlatsTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FlatsTopic
}

"An edge in a connection."
type Test_deleteEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Test_delete
}

type Test_deleteHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  meterId: String
}

"An edge in a connection."
type Test_deleteHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Test_deleteHistory
}

type Test_deleteTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [Test_deleteFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type Test_deleteTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Test_deleteTopic
}

"An edge in a connection."
type Test_delete2Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Test_delete2
}

type Test_delete2History implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  meterId: String
  address: Sub0DefaultHistory
}

"An edge in a connection."
type Test_delete2HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Test_delete2History
}

type Test_delete2Topic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [Test_delete2Fields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type Test_delete2TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Test_delete2Topic
}

"An edge in a connection."
type PropertyTestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest
}

type PropertyTestHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop2: Boolean
  prop1: Boolean
}

"An edge in a connection."
type PropertyTestHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTestHistory
}

type PropertyTestTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [PropertyTestFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type PropertyTestTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTestTopic
}

"An edge in a connection."
type PropertyTest2Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest2
}

type PropertyTest2History implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop2: Boolean
}

"An edge in a connection."
type PropertyTest2HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest2History
}

type PropertyTest2Topic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [PropertyTest2Fields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type PropertyTest2TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest2Topic
}

"An edge in a connection."
type PropertyTest3Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest3
}

type PropertyTest3History implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop2: Boolean
}

"An edge in a connection."
type PropertyTest3HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest3History
}

type PropertyTest3Topic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [PropertyTest3Fields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type PropertyTest3TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest3Topic
}

"An edge in a connection."
type PropertyTest4Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest4
}

type PropertyTest4History implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  prop1: Boolean
  prop3: Boolean!
}

"An edge in a connection."
type PropertyTest4HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest4History
}

type PropertyTest4Topic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [PropertyTest4Fields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type PropertyTest4TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PropertyTest4Topic
}

"An edge in a connection."
type TestHannaEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestHanna
}

type TestHannaHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  propEins: String
}

"An edge in a connection."
type TestHannaHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestHannaHistory
}

type TestHannaTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [TestHannaFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type TestHannaTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestHannaTopic
}

"An edge in a connection."
type TestSelectionListEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionList
}

type TestSelectionListHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  numProp: Float!
  stringProp: String
}

"An edge in a connection."
type TestSelectionListHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListHistory
}

type TestSelectionListTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [TestSelectionListFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type TestSelectionListTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListTopic
}

"An edge in a connection."
type TestSelectionListAgainEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain
}

type TestSelectionListAgainHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringProp: String
  numProp: Float!
}

"An edge in a connection."
type TestSelectionListAgainHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgainHistory
}

type TestSelectionListAgainTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [TestSelectionListAgainFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type TestSelectionListAgainTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgainTopic
}

"An edge in a connection."
type TestSelectionListAgain3Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain3
}

type TestSelectionListAgain3History implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringProp: String
  numProp: Float!
}

"An edge in a connection."
type TestSelectionListAgain3HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain3History
}

type TestSelectionListAgain3Topic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [TestSelectionListAgain3Fields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type TestSelectionListAgain3TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain3Topic
}

"An edge in a connection."
type TestSelectionListAgain4Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain4
}

type TestSelectionListAgain4History implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringProp: String
  numProp: Float!
}

"An edge in a connection."
type TestSelectionListAgain4HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain4History
}

type TestSelectionListAgain4Topic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [TestSelectionListAgain4Fields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type TestSelectionListAgain4TopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListAgain4Topic
}

"An edge in a connection."
type BasicInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicInventory
}

type BasicInventoryHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  stringField: String
  numberField: Float
}

"An edge in a connection."
type BasicInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicInventoryHistory
}

type BasicInventoryTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [BasicInventoryFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type BasicInventoryTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BasicInventoryTopic
}

"An edge in a connection."
type FullTestInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FullTestInventory
}

type FullTestInventoryHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  numberFieldNull: Float
  boolFieldNull: Boolean
  boolField: Boolean!
  dateField: DateTime!
  dateFieldList: [DateTime!]
  dateFieldNullList: [DateTime!]
  stringFieldNullList: [String]
  boolFieldNullList: [Boolean!]
  boolFieldList: [Boolean!]
  refFieldList: [BasicInventoryHistory]
  stringFieldList: [String]
  refFieldNullList: [BasicInventoryHistory]
  stringFieldNull: String
  stringField: String
  numberField: Float!
  numberFieldNullList: [Float!]
  numberFieldList: [Float!]
  refFieldNull: BasicInventoryHistory
  refField: BasicInventoryHistory
  dateFieldNull: DateTime
}

"An edge in a connection."
type FullTestInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FullTestInventoryHistory
}

type FullTestInventoryTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [FullTestInventoryFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type FullTestInventoryTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: FullTestInventoryTopic
}

"An edge in a connection."
type DispatcherMessagesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DispatcherMessages
}

type DispatcherMessagesHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  wohnungsGruppe: String
  temperatur: Float
  spannung: Float
}

"An edge in a connection."
type DispatcherMessagesHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DispatcherMessagesHistory
}

type DispatcherMessagesTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [DispatcherMessagesFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type DispatcherMessagesTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DispatcherMessagesTopic
}

"An edge in a connection."
type UpperTestFieldNameEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UpperTestFieldName
}

type UpperTestFieldNameHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  propField: String
}

"An edge in a connection."
type UpperTestFieldNameHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UpperTestFieldNameHistory
}

type UpperTestFieldNameTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [UpperTestFieldNameFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type UpperTestFieldNameTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UpperTestFieldNameTopic
}

"An edge in a connection."
type DeleteMeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeleteMe
}

type DeleteMeHistory implements IItem & IHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  lalal: String
}

"An edge in a connection."
type DeleteMeHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeleteMeHistory
}

type DeleteMeTopic implements Node {
  id: ID!
  topicId: Uuid!
  routingFields: [DeleteMeFields]
  routingFilter: String
  dynamicInventoryId: Uuid!
  onSubscription: OnSubscription!
  enabled: Boolean!
  displayName: String
}

"An edge in a connection."
type DeleteMeTopicEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeleteMeTopic
}

input ResolutionFilterInput {
  and: [ResolutionFilterInput!]
  or: [ResolutionFilterInput!]
  timeUnit: TimeUnitOperationFilterInput
  factor: ComparableInt32OperationFilterInput
}

input ComparableNullableOfGuidOperationFilterInput {
  eq: Uuid
  neq: Uuid
  in: [Uuid]
  nin: [Uuid]
  gt: Uuid
  ngt: Uuid
  gte: Uuid
  ngte: Uuid
  lt: Uuid
  nlt: Uuid
  lte: Uuid
  nlte: Uuid
}

input ResolutionSortInput {
  timeUnit: SortEnumType
  factor: SortEnumType
}

type HannasTSIn implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSIn
}

type HannasTSInHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInHistory
}

type HannasTSInv implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInvEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInv
}

type HannasTSInvHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInvHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInvHistory
}

type HannasTSInvent implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInvent
}

type HannasTSInventHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInventHistory
}

type HannasTSInven implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInvenEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInven
}

type HannasTSInvenHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInvenHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInvenHistory
}

type HannasTSInvento implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventoEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInvento
}

type HannasTSInventoHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventoHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInventoHistory
}

type HannasTSInventory1 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventory1Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInventory1
}

type HannasTSInventory1History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventory1HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInventory1History
}

type HannasTSInventoryWithoutName1 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventoryWithoutName1Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInventoryWithoutName1
}

type HannasTSInventoryWithoutName1History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  numericProp: Float
}

"An edge in a connection."
type HannasTSInventoryWithoutName1HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTSInventoryWithoutName1History
}

type HannasInventoryWithPropertyName implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  name: String
  prop1: Boolean
}

"An edge in a connection."
type HannasInventoryWithPropertyNameEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryWithPropertyName
}

type HannasInventoryWithPropertyNameHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  name: String
  prop1: Boolean
}

"An edge in a connection."
type HannasInventoryWithPropertyNameHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryWithPropertyNameHistory
}

type HannasInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  achteProperty: String
  sechsteProperty: String
  vierteProperty: String
  siebteProperty: Boolean!
  firstPropertyBool: Boolean!
  firstPropertyString: String!
  dritteProperty: Boolean!
  fuenfteProperty: Boolean!
}

"An edge in a connection."
type HannasInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventory
}

type HannasInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  achteProperty: String
  sechsteProperty: String
  vierteProperty: String
  siebteProperty: Boolean!
  firstPropertyBool: Boolean!
  firstPropertyString: String
  dritteProperty: Boolean!
  fuenfteProperty: Boolean!
}

"An edge in a connection."
type HannasInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryHistory
}

type InventoryToUpdate implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  firstUpdatedPropertyBool: Boolean!
  firstPropertyString: String!
}

"An edge in a connection."
type InventoryToUpdateEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToUpdate
}

type InventoryToUpdateHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  firstUpdatedPropertyBool: Boolean!
  firstPropertyString: String
}

"An edge in a connection."
type InventoryToUpdateHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToUpdateHistory
}

type InventoryToDelete implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  firstPropertyString: String!
}

"An edge in a connection."
type InventoryToDeleteEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToDelete
}

type InventoryToDeleteHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  firstPropertyString: String
}

"An edge in a connection."
type InventoryToDeleteHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToDeleteHistory
}

type InventoryToTest implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  firstPropertyBool: Boolean!
  firstPropertyString: String
}

"An edge in a connection."
type InventoryToTestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToTest
}

type InventoryToTestHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  firstPropertyBool: Boolean!
  firstPropertyString: String
}

"An edge in a connection."
type InventoryToTestHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToTestHistory
}

type InventoryToTest2 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  firstPropertyString: String
  firstPropertyBool: Boolean!
}

"An edge in a connection."
type InventoryToTest2Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToTest2
}

type InventoryToTest2History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  firstPropertyString: String
  firstPropertyBool: Boolean!
}

"An edge in a connection."
type InventoryToTest2HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryToTest2History
}

type InventoryPropTypes3 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  firstPropertyBool: Boolean!
}

"An edge in a connection."
type InventoryPropTypes3Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropTypes3
}

type InventoryPropTypes3History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  firstPropertyBool: Boolean!
}

"An edge in a connection."
type InventoryPropTypes3HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropTypes3History
}

type InventoryPropTypesWithListTypeTrue implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  firstPropertyBool: [Boolean!]!
}

"An edge in a connection."
type InventoryPropTypesWithListTypeTrueEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropTypesWithListTypeTrue
}

type InventoryPropTypesWithListTypeTrueHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  firstPropertyBool: [Boolean!]
}

"An edge in a connection."
type InventoryPropTypesWithListTypeTrueHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropTypesWithListTypeTrueHistory
}

type InventoryPropTypesWithListTypeTrueBool implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  propBool: [Boolean!]!
}

"An edge in a connection."
type InventoryPropTypesWithListTypeTrueBoolEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropTypesWithListTypeTrueBool
}

type InventoryPropTypesWithListTypeTrueBoolHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  propBool: [Boolean!]
}

"An edge in a connection."
type InventoryPropTypesWithListTypeTrueBoolHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropTypesWithListTypeTrueBoolHistory
}

type ReferencedInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  refProp: InventoryToTest
}

"An edge in a connection."
type ReferencedInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ReferencedInventory
}

type ReferencedInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  refProp: InventoryToTestHistory
}

"An edge in a connection."
type ReferencedInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ReferencedInventoryHistory
}

type InventoryPropReferenced implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  referencedProp: InventoryToTest
}

"An edge in a connection."
type InventoryPropReferencedEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropReferenced
}

type InventoryPropReferencedHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  referencedProp: InventoryToTestHistory
}

"An edge in a connection."
type InventoryPropReferencedHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryPropReferencedHistory
}

type UpdatedInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldUpdated: InventoryToTest
}

"An edge in a connection."
type UpdatedInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UpdatedInventory
}

type UpdatedInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldUpdated: InventoryToTestHistory
}

"An edge in a connection."
type UpdatedInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UpdatedInventoryHistory
}

type InvTest implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldName: [Boolean!]
}

"An edge in a connection."
type InvTestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InvTest
}

type InvTestHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldName: [Boolean!]
}

"An edge in a connection."
type InvTestHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InvTestHistory
}

type InvTest2 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldName: Boolean
}

"An edge in a connection."
type InvTest2Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InvTest2
}

type InvTest2History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldName: Boolean
}

"An edge in a connection."
type InvTest2HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InvTest2History
}

type InvTest3 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldName: Boolean
}

"An edge in a connection."
type InvTest3Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InvTest3
}

type InvTest3History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldName: Boolean
}

"An edge in a connection."
type InvTest3HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InvTest3History
}

type InventoryRemovePropsTimeSeries implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldName2: String
}

"An edge in a connection."
type InventoryRemovePropsTimeSeriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryRemovePropsTimeSeries
}

type InventoryRemovePropsTimeSeriesHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldName2: String
}

"An edge in a connection."
type InventoryRemovePropsTimeSeriesHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventoryRemovePropsTimeSeriesHistory
}

type InventorySetData implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldName1: Boolean
}

"An edge in a connection."
type InventorySetDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventorySetData
}

type InventorySetDataHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldName1: Boolean
}

"An edge in a connection."
type InventorySetDataHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InventorySetDataHistory
}

type PythonTimeseriesTest implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  dateTime: DateTime
}

"An edge in a connection."
type PythonTimeseriesTestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PythonTimeseriesTest
}

type PythonTimeseriesTestHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  dateTime: DateTime
}

"An edge in a connection."
type PythonTimeseriesTestHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PythonTimeseriesTestHistory
}

type HannasQueryTestInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fieldName1: Boolean
}

"An edge in a connection."
type HannasQueryTestInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasQueryTestInventory
}

type HannasQueryTestInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fieldName1: Boolean
}

"An edge in a connection."
type HannasQueryTestInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasQueryTestInventoryHistory
}

type PythonTimeseriesTTNTest implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  publicationDate: DateTime
  strikePrice: Float
}

"An edge in a connection."
type PythonTimeseriesTTNTestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PythonTimeseriesTTNTest
}

type PythonTimeseriesTTNTestHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  publicationDate: DateTime
  strikePrice: Float
}

"An edge in a connection."
type PythonTimeseriesTTNTestHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PythonTimeseriesTTNTestHistory
}

type HannasTestUpdateInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  bool: Boolean
  string: String!
}

"An edge in a connection."
type HannasTestUpdateInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTestUpdateInventory
}

type HannasTestUpdateInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  bool: Boolean
  string: String
}

"An edge in a connection."
type HannasTestUpdateInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTestUpdateInventoryHistory
}

type HannasUpdatedInventar implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  updatedStringField: String!
  string: String!
}

"An edge in a connection."
type HannasUpdatedInventarEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasUpdatedInventar
}

type HannasUpdatedInventarHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  updatedStringField: String
  string: String
}

"An edge in a connection."
type HannasUpdatedInventarHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasUpdatedInventarHistory
}

type HannasTestValueTypeInventar implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  string: String!
  bool: Boolean
}

"An edge in a connection."
type HannasTestValueTypeInventarEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTestValueTypeInventar
}

type HannasTestValueTypeInventarHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  string: String
  bool: Boolean
}

"An edge in a connection."
type HannasTestValueTypeInventarHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasTestValueTypeInventarHistory
}

type HannasInventoryCreate implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  bool: Boolean
  string: String!
}

"An edge in a connection."
type HannasInventoryCreateEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryCreate
}

type HannasInventoryCreateHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  bool: Boolean
  string: String
}

"An edge in a connection."
type HannasInventoryCreateHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryCreateHistory
}

type HannasInventoryCreate2 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  string: String!
  bool: Boolean
}

"An edge in a connection."
type HannasInventoryCreate2Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryCreate2
}

type HannasInventoryCreate2History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  string: String
  bool: Boolean
}

"An edge in a connection."
type HannasInventoryCreate2HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HannasInventoryCreate2History
}

type MeterData implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  fullName: String
  meterId: String
  object: String
  measure: String
  calculation: String
}

"An edge in a connection."
type MeterDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MeterData
}

type MeterDataHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  fullName: String
  meterId: String
  object: String
  measure: String
  calculation: String
}

"An edge in a connection."
type MeterDataHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MeterDataHistory
}

type MeterData1 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  calculation: String
  object: String
  fullName: String
  measure: String
  meterId: String
}

"An edge in a connection."
type MeterData1Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MeterData1
}

type MeterData1History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  calculation: String
  object: String
  fullName: String
  measure: String
  meterId: String
}

"An edge in a connection."
type MeterData1HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MeterData1History
}

type Marktdaten implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  measure: String!
  seasonalDelivery: String
  instrument: String
  source: String
  provider: String
  commodity: String
  location_country: String
  ts_name: String!
}

"An edge in a connection."
type MarktdatenEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Marktdaten
}

type MarktdatenHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  measure: String
  seasonalDelivery: String
  instrument: String
  source: String
  provider: String
  commodity: String
  location_country: String
  ts_name: String
}

"An edge in a connection."
type MarktdatenHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MarktdatenHistory
}

type ConcreteTimeSeriesInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  stringProp: String
  numericProp: Float
}

"An edge in a connection."
type ConcreteTimeSeriesInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ConcreteTimeSeriesInventory
}

type ConcreteTimeSeriesInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  stringProp: String
  numericProp: Float
}

"An edge in a connection."
type ConcreteTimeSeriesInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ConcreteTimeSeriesInventoryHistory
}

type TSInv implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  bilanzkreis: String
  attribut: String
  messstelle: String
  netz: String
  name: String
}

"An edge in a connection."
type TSInvEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TSInv
}

type TSInvHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  bilanzkreis: String
  attribut: String
  messstelle: String
  netz: String
  name: String
}

"An edge in a connection."
type TSInvHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TSInvHistory
}

type TestSelectionListTimeSeriesInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  stringProp: String
  selectionProp: SelectionListHanna4!
  numProp: Float!
}

"An edge in a connection."
type TestSelectionListTimeSeriesInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListTimeSeriesInventory
}

type TestSelectionListTimeSeriesInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  stringProp: String
  numProp: Float!
}

"An edge in a connection."
type TestSelectionListTimeSeriesInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TestSelectionListTimeSeriesInventoryHistory
}

type TSInventory implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  stringProp: String
}

"An edge in a connection."
type TSInventoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TSInventory
}

type TSInventoryHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  stringProp: String
}

"An edge in a connection."
type TSInventoryHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TSInventoryHistory
}

type TimeSeries11 implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  stringProp: String
  numProp: Float
}

"An edge in a connection."
type TimeSeries11Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimeSeries11
}

type TimeSeries11History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  stringProp: String
  numProp: Float
}

"An edge in a connection."
type TimeSeries11HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimeSeries11History
}

type TimeSeriesJuergen implements IItem & ITimeSeriesConfig & ITimeSeriesData & ITimeSeriesItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
  stringProp: String
  dateProp: DateTime
  numProp: Float
}

"An edge in a connection."
type TimeSeriesJuergenEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimeSeriesJuergen
}

type TimeSeriesJuergenHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
  stringProp: String
  dateProp: DateTime
  numProp: Float
}

"An edge in a connection."
type TimeSeriesJuergenHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TimeSeriesJuergenHistory
}

type PythonTimeseriesGroupTest implements IItem & ITimeSeriesConfig & ITimeSeriesGroupItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  region: String
  type: String
  measure: String
  source: String
  identification: String
}

"An edge in a connection."
type PythonTimeseriesGroupTestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PythonTimeseriesGroupTest
}

type PythonTimeseriesGroupTestHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesGroupItem & ITimeSeriesGroupHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  region: String
  type: String
  measure: String
  source: String
  identification: String
}

"An edge in a connection."
type PythonTimeseriesGroupTestHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PythonTimeseriesGroupTestHistory
}

type Groups implements IItem & ITimeSeriesConfig & ITimeSeriesGroupItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  groupProp: Boolean
}

"An edge in a connection."
type GroupsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Groups
}

type GroupsHistory implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesGroupItem & ITimeSeriesGroupHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  groupProp: Boolean
}

"An edge in a connection."
type GroupsHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GroupsHistory
}

type Groups1 implements IItem & ITimeSeriesConfig & ITimeSeriesGroupItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  groupProp: Boolean
}

"An edge in a connection."
type Groups1Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Groups1
}

type Groups1History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesGroupItem & ITimeSeriesGroupHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  groupProp: Boolean
}

"An edge in a connection."
type Groups1HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Groups1History
}

type Groups22 implements IItem & ITimeSeriesConfig & ITimeSeriesGroupItem & Node {
  id: ID!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  groupProp2: Boolean
  groupProp1: Boolean
  groupProp3: Boolean
}

"An edge in a connection."
type Groups22Edge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Groups22
}

type Groups22History implements IItem & IHistoryItem & ITimeSeriesConfig & ITimeSeriesGroupItem & ITimeSeriesGroupHistoryItem & Node {
  id: ID!
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
  groupProp2: Boolean
  groupProp1: Boolean
  groupProp3: Boolean
}

"An edge in a connection."
type Groups22HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Groups22History
}

input UpdatePropertyDefinitionInput {
  key: Uuid!
  fieldName: String
  displayName: String
  valueType: PropertyValueType
  isList: Boolean
  optional: Boolean
  historyEnabled: Boolean
  selectionListId: Uuid
  referencedInventoryId: Uuid
  computedFieldType: ComputedFieldType
  formula: String
}

input AddSelectionItemInput {
  fieldName: String!
  displayName: String
  description: String
  color: ColorInput
}

input UpdateSelectionItemInput {
  selectionItemId: Uuid!
  fieldName: String
  displayName: String
  description: String
  color: ColorInput
}

input DataInput {
  dataPoints: [DataPointInput]
  resolution: ResolutionInput!
  unit: String!
}

enum sub0DefaultFields {
  SUB0_FIELD
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input Sub0DefaultTopicRoutingFilterInput {
  and: [Sub0DefaultTopicRoutingFilterInput!]
  or: [Sub0DefaultTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  sub0Field: StringOperationFilterInput
}

enum HannasInventoryWithPropertiesFields {
  PROP1
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input HannasInventoryWithPropertiesTopicRoutingFilterInput {
  and: [HannasInventoryWithPropertiesTopicRoutingFilterInput!]
  or: [HannasInventoryWithPropertiesTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
}

enum Stocks {
  NA
  TSLA
  GME
}

enum WohnungFields {
  EIGENTUEMER
  STOCKS
  WOHNFLAECHE
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input WohnungTopicRoutingFilterInput {
  and: [WohnungTopicRoutingFilterInput!]
  or: [WohnungTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  eigentuemer: StringOperationFilterInput
  stocks: StocksFilterInput
  wohnflaeche: ComparableDoubleOperationFilterInput
}

enum InventoryRemovePropsFields {
  FIELD_NAME2
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input InventoryRemovePropsTopicRoutingFilterInput {
  and: [InventoryRemovePropsTopicRoutingFilterInput!]
  or: [InventoryRemovePropsTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  fieldName2: StringOperationFilterInput
}

enum EmTestFFields {
  TEST_PROP1_F
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input EmTestFTopicRoutingFilterInput {
  and: [EmTestFTopicRoutingFilterInput!]
  or: [EmTestFTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp1F: StringOperationFilterInput
}

enum EmTest1FFields {
  TEST_PROP11_F
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input EmTest1FTopicRoutingFilterInput {
  and: [EmTest1FTopicRoutingFilterInput!]
  or: [EmTest1FTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp11F: StringOperationFilterInput
}

enum EmTest4FFields {
  TEST_PROP41_F
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input EmTest4FTopicRoutingFilterInput {
  and: [EmTest4FTopicRoutingFilterInput!]
  or: [EmTest4FTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  testProp41F: StringOperationFilterInput
}

enum InputClearingPositionTransactionFields {
  SOURCE_CODE
  NONCLEARINGMEMBER
  TRANSACTION_TYPE
  CLIENT
  CLEARINGMEMBER
  F_FCT_ONL_CLRG_POS_TRANS_ID
  ACCOUNT_SPONSOR
  MEMBER
  FACT_DATE
  FACT_TIMESTAMP
  CLEARINGHOUSE
  MIFIDMEMBER
  TRANSACTION_STREAM_TYPE
  ACCOUNT_OWNER
  INSTRUMENT_ID
  ORIG_ID
  BUY_SELL_CODE
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input InputClearingPositionTransactionTopicRoutingFilterInput {
  and: [InputClearingPositionTransactionTopicRoutingFilterInput!]
  or: [InputClearingPositionTransactionTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  source_code: StringOperationFilterInput
  nonclearingmember: StringOperationFilterInput
  transaction_type: ComparableDoubleOperationFilterInput
  client: StringOperationFilterInput
  clearingmember: StringOperationFilterInput
  f_fct_onl_clrg_pos_trans_id: ComparableDoubleOperationFilterInput
  account_sponsor: StringOperationFilterInput
  member: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  clearinghouse: StringOperationFilterInput
  mifidmember: StringOperationFilterInput
  transaction_stream_type: ComparableDoubleOperationFilterInput
  account_owner: StringOperationFilterInput
  instrument_id: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  buy_sell_code: StringOperationFilterInput
}

enum InputTransitionTransactionFields {
  CURRENT_SUFFIX
  MIFIDMEMBER
  NONCLEARINGMEMBER
  ITS
  TRADE_RPT_TYPE_CODE
  TRADE_HANDLING_INSTR
  POSITION_LONG
  FACT_TIMESTAMP
  ORDER_QTY
  ORDER_NO
  DESIGNATED_QTY_LONG
  CLG_MBR_PARTICIPANT_CODE
  TRADER_CODE
  MATCH_PRICE
  CURRENCY_CODE
  TRADE_RPT_ID
  CUSTOMER
  CLEARINGMEMBER
  MAINTENANCE_EVENT
  TRADE_RPT_REF_ID
  MARKET
  ORIGIN_TRADE_TIME_CET
  TRAN_ADJ_IND
  MANUAL_TRADE_ENTRY_FLAG
  POSITION_SHORT
  PARENT_SUFFIX
  SOURCE_CODE
  ACCOUNT_TYPE
  MEMBER
  TRADE_RPT_TRANS_TYPE_CODE
  TRANSACTION_NO
  ORIGIN_TRADE_DATE_CET
  ADJ_QTY_LONG
  MBR_PARTICIPANT_CODE
  ORIGIN_ORDER_NO
  CLEARINGHOUSE
  USER_ORDER_NO
  GIVE_UP_STATUS_CODE
  INSTRUMENT_ID
  F_FCT_ONL_POS_TRANS_ID
  EXERCISED_ALLOCATED
  ORIG_ID
  TRADE_MATCH_ID
  TRADE_SIZE
  CLIENT
  FACT_DATE
  DELTA_QTY_SHORT
  TRADE_TYPE
  DESIGNATED_QTY_SHORT
  ORDER_AGGRESSOR_FLAG
  TRANSFER_REASON
  POS_TEXT
  OPEN_CLOSE_FLAG
  BUY_SELL_IND
  ADJ_QTY_SHORT
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input InputTransitionTransactionTopicRoutingFilterInput {
  and: [InputTransitionTransactionTopicRoutingFilterInput!]
  or: [InputTransitionTransactionTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  current_suffix: StringOperationFilterInput
  mifidmember: StringOperationFilterInput
  nonclearingmember: StringOperationFilterInput
  its: StringOperationFilterInput
  trade_rpt_type_code: StringOperationFilterInput
  trade_handling_instr: StringOperationFilterInput
  position_long: ComparableDoubleOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  order_qty: ComparableDoubleOperationFilterInput
  order_no: StringOperationFilterInput
  designated_qty_long: ComparableDoubleOperationFilterInput
  clg_mbr_participant_code: StringOperationFilterInput
  trader_code: StringOperationFilterInput
  match_price: StringOperationFilterInput
  currency_code: StringOperationFilterInput
  trade_rpt_id: StringOperationFilterInput
  customer: StringOperationFilterInput
  clearingmember: StringOperationFilterInput
  maintenance_event: StringOperationFilterInput
  trade_rpt_ref_id: StringOperationFilterInput
  market: StringOperationFilterInput
  origin_trade_time_cet: StringOperationFilterInput
  tran_adj_ind: StringOperationFilterInput
  manual_trade_entry_flag: ComparableDoubleOperationFilterInput
  position_short: ComparableDoubleOperationFilterInput
  parent_suffix: StringOperationFilterInput
  source_code: StringOperationFilterInput
  account_type: StringOperationFilterInput
  member: StringOperationFilterInput
  trade_rpt_trans_type_code: StringOperationFilterInput
  transaction_no: StringOperationFilterInput
  origin_trade_date_cet: StringOperationFilterInput
  adj_qty_long: ComparableDoubleOperationFilterInput
  mbr_participant_code: StringOperationFilterInput
  origin_order_no: StringOperationFilterInput
  clearinghouse: StringOperationFilterInput
  user_order_no: StringOperationFilterInput
  give_up_status_code: StringOperationFilterInput
  instrument_id: StringOperationFilterInput
  f_fct_onl_pos_trans_id: StringOperationFilterInput
  exercised_allocated: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  trade_match_id: StringOperationFilterInput
  trade_size: StringOperationFilterInput
  client: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  delta_qty_short: ComparableDoubleOperationFilterInput
  trade_type: StringOperationFilterInput
  designated_qty_short: ComparableDoubleOperationFilterInput
  order_aggressor_flag: StringOperationFilterInput
  transfer_reason: StringOperationFilterInput
  pos_text: StringOperationFilterInput
  open_close_flag: StringOperationFilterInput
  buy_sell_ind: StringOperationFilterInput
  adj_qty_short: ComparableDoubleOperationFilterInput
}

enum InputTradeFields {
  MATCH_PRICE
  ORIG_ID
  ITS
  BUY_SELL_IND
  CANCELLATION_TYPE
  INSTRUMENT_ID
  CURRENCY_CODE
  FACT_TIMESTAMP
  TRADE_GROUP_ID
  SOURCE_CODE
  TRADE_ORIGIN
  F_FCT_ORDER_QUOTE_ID
  ON_BHLF_MBR_PARTICIPANT_CODE
  TRADE_ID
  MAINTENANCE_EVENT
  CLIENT
  USER_CODE
  MBR_PARTICIPANT_CODE
  FACT_DATE
  TRADE_SIZE
  EXCHANGE_ORD_ID
  BACKREF
  MEMBER
  F_FCT_TRADE_ID
  AGGRESSOR_IND
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input InputTradeTopicRoutingFilterInput {
  and: [InputTradeTopicRoutingFilterInput!]
  or: [InputTradeTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  match_price: ComparableDoubleOperationFilterInput
  orig_id: StringOperationFilterInput
  its: StringOperationFilterInput
  buy_sell_ind: StringOperationFilterInput
  cancellation_type: StringOperationFilterInput
  instrument_id: StringOperationFilterInput
  currency_code: StringOperationFilterInput
  fact_timestamp: StringOperationFilterInput
  trade_group_id: StringOperationFilterInput
  source_code: StringOperationFilterInput
  trade_origin: StringOperationFilterInput
  f_fct_order_quote_id: StringOperationFilterInput
  on_bhlf_mbr_participant_code: StringOperationFilterInput
  trade_id: StringOperationFilterInput
  maintenance_event: StringOperationFilterInput
  client: StringOperationFilterInput
  user_code: StringOperationFilterInput
  mbr_participant_code: StringOperationFilterInput
  fact_date: StringOperationFilterInput
  trade_size: ComparableDoubleOperationFilterInput
  exchange_ord_id: StringOperationFilterInput
  backref: ComparableGuidOperationFilterInput
  member: StringOperationFilterInput
  f_fct_trade_id: StringOperationFilterInput
  aggressor_ind: StringOperationFilterInput
}

enum RemitTradeFields {
  MEMBER
  NOTIONALCONTRACTQUANTITYUNIT
  NOTIONALAMOUNT
  CONTRACTID
  AGGRESSOR
  VOICEBROKERED
  VERSION
  TRADERIDTYPE
  CLIENT
  TRANSACTIONTIME
  NOTIONALAMOUNTCURRENCY
  PRICECURRENCY
  ACTIONTYPE
  BUYSELLINDICATOR
  INPUTPOSITIONTRANSACTION
  MARKETPARTICIPANTID
  TRADERID
  PRICE
  ORDERSTATUS
  QUANTITYUNIT
  TRADINGCAPACITY
  TRANSACTIONTIMENANO
  ORDERTYPE
  ORDERDURATION
  UNIQUETRANSACTIONIDENTIFIER
  DISPLAY_VALUE2
  IST_TEUER
  DISPLAY_VALUE
  NOTIONALCONTRACTQUANTITY
  ORGANISEDMARKETPLACEIDTYPE
  ORGANISEDMARKETPLACEID
  MARKETPARTICIPANTIDTYPE
  INPUTCLEARINGPOSITIONTRANSACTION
  INPUTTRADE
  QUANTITY
  DISCOUNT
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input RemitTradeTopicRoutingFilterInput {
  and: [RemitTradeTopicRoutingFilterInput!]
  or: [RemitTradeTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  member: StringOperationFilterInput
  notionalcontractquantityunit: StringOperationFilterInput
  notionalamount: ComparableDoubleOperationFilterInput
  contractid: StringOperationFilterInput
  aggressor: StringOperationFilterInput
  voicebrokered: BooleanOperationFilterInput
  version: ComparableDateTimeOperationFilterInput
  traderidtype: StringOperationFilterInput
  client: StringOperationFilterInput
  transactiontime: ComparableDateTimeOperationFilterInput
  notionalamountcurrency: StringOperationFilterInput
  pricecurrency: StringOperationFilterInput
  actiontype: StringOperationFilterInput
  buysellindicator: StringOperationFilterInput
  inputpositiontransaction: ComparableGuidOperationFilterInput
  marketparticipantid: StringOperationFilterInput
  traderid: StringOperationFilterInput
  price: ComparableDoubleOperationFilterInput
  orderstatus: StringOperationFilterInput
  quantityunit: StringOperationFilterInput
  tradingcapacity: StringOperationFilterInput
  transactiontimenano: ComparableDoubleOperationFilterInput
  ordertype: StringOperationFilterInput
  orderduration: StringOperationFilterInput
  uniquetransactionidentifier: StringOperationFilterInput
  notionalcontractquantity: ComparableDoubleOperationFilterInput
  organisedmarketplaceidtype: StringOperationFilterInput
  organisedmarketplaceid: StringOperationFilterInput
  marketparticipantidtype: StringOperationFilterInput
  inputclearingpositiontransaction: ComparableGuidOperationFilterInput
  inputtrade: ComparableGuidOperationFilterInput
  quantity: ComparableDoubleOperationFilterInput
}

enum InternalDataSourceFields {
  CUSTOM_ID
  TITLE
  DATA_SOURCE_TYPE
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input InternalDataSourceTopicRoutingFilterInput {
  and: [InternalDataSourceTopicRoutingFilterInput!]
  or: [InternalDataSourceTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  customId: StringOperationFilterInput
  title: StringOperationFilterInput
  dataSourceType: StringOperationFilterInput
}

enum FlatsFields {
  TENANT
  AREA
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input FlatsTopicRoutingFilterInput {
  and: [FlatsTopicRoutingFilterInput!]
  or: [FlatsTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  tenant: StringOperationFilterInput
  area: ComparableDoubleOperationFilterInput
}

enum Test_deleteFields {
  METER_ID
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input Test_deleteTopicRoutingFilterInput {
  and: [Test_deleteTopicRoutingFilterInput!]
  or: [Test_deleteTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  meterId: StringOperationFilterInput
}

enum Test_delete2Fields {
  METER_ID
  ADDRESS
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input Test_delete2TopicRoutingFilterInput {
  and: [Test_delete2TopicRoutingFilterInput!]
  or: [Test_delete2TopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  meterId: StringOperationFilterInput
  address: ComparableGuidOperationFilterInput
}

enum PropertyTestFields {
  PROP2
  PROP1
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input PropertyTestTopicRoutingFilterInput {
  and: [PropertyTestTopicRoutingFilterInput!]
  or: [PropertyTestTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
  prop1: BooleanOperationFilterInput
}

enum PropertyTest2Fields {
  PROP2
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input PropertyTest2TopicRoutingFilterInput {
  and: [PropertyTest2TopicRoutingFilterInput!]
  or: [PropertyTest2TopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
}

enum PropertyTest3Fields {
  PROP2
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input PropertyTest3TopicRoutingFilterInput {
  and: [PropertyTest3TopicRoutingFilterInput!]
  or: [PropertyTest3TopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop2: BooleanOperationFilterInput
}

enum PropertyTest4Fields {
  PROP1
  PROP3
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input PropertyTest4TopicRoutingFilterInput {
  and: [PropertyTest4TopicRoutingFilterInput!]
  or: [PropertyTest4TopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  prop1: BooleanOperationFilterInput
  prop3: BooleanOperationFilterInput
}

enum TestHannaFields {
  PROP_EINS
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input TestHannaTopicRoutingFilterInput {
  and: [TestHannaTopicRoutingFilterInput!]
  or: [TestHannaTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  propEins: StringOperationFilterInput
}

enum SelectionListHanna {
  NA
  BAYERN
  NRW
}

enum TestSelectionListFields {
  NUM_PROP
  SELECTION_PROP
  STRING_PROP
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input TestSelectionListTopicRoutingFilterInput {
  and: [TestSelectionListTopicRoutingFilterInput!]
  or: [TestSelectionListTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
  selectionProp: SelectionListHannaFilterInput
  stringProp: StringOperationFilterInput
}

enum TestSelectionListAgainFields {
  SELECTION_PROP
  STRING_PROP
  NUM_PROP
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input TestSelectionListAgainTopicRoutingFilterInput {
  and: [TestSelectionListAgainTopicRoutingFilterInput!]
  or: [TestSelectionListAgainTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  selectionProp: SelectionListHannaFilterInput
  stringProp: StringOperationFilterInput
  numProp: ComparableDoubleOperationFilterInput
}

enum SelectionListHanna3 {
  NA
  BAYERN
  NRW
}

enum TestSelectionListAgain3Fields {
  STRING_PROP
  SELECTION_PROP
  NUM_PROP
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input TestSelectionListAgain3TopicRoutingFilterInput {
  and: [TestSelectionListAgain3TopicRoutingFilterInput!]
  or: [TestSelectionListAgain3TopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  selectionProp: SelectionListHanna3FilterInput
  numProp: ComparableDoubleOperationFilterInput
}

enum SelectionListHanna4 {
  NA
  BAYERN
  NRW
}

enum TestSelectionListAgain4Fields {
  STRING_PROP
  SELECTION_PROP
  NUM_PROP
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input TestSelectionListAgain4TopicRoutingFilterInput {
  and: [TestSelectionListAgain4TopicRoutingFilterInput!]
  or: [TestSelectionListAgain4TopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringProp: StringOperationFilterInput
  selectionProp: SelectionListHanna4FilterInput
  numProp: ComparableDoubleOperationFilterInput
}

enum BasicInventoryFields {
  STRING_FIELD
  NUMBER_FIELD
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input BasicInventoryTopicRoutingFilterInput {
  and: [BasicInventoryTopicRoutingFilterInput!]
  or: [BasicInventoryTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  stringField: StringOperationFilterInput
  numberField: ComparableDoubleOperationFilterInput
}

enum FullTestInventoryFields {
  NUMBER_FIELD_NULL
  BOOL_FIELD_NULL
  BOOL_FIELD
  ENUM_FIELD_LIST
  DATE_FIELD
  ENUM_FIELD_NULL
  DATE_FIELD_LIST
  DATE_FIELD_NULL_LIST
  STRING_FIELD_NULL_LIST
  BOOL_FIELD_NULL_LIST
  BOOL_FIELD_LIST
  REF_FIELD_LIST
  STRING_FIELD_LIST
  ENUM_FIELD_NULL_LIST
  REF_FIELD_NULL_LIST
  STRING_FIELD_NULL
  STRING_FIELD
  NUMBER_FIELD
  NUMBER_FIELD_NULL_LIST
  NUMBER_FIELD_LIST
  REF_FIELD_NULL
  REF_FIELD
  DATE_FIELD_NULL
  ENUM_FIELD
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input FullTestInventoryTopicRoutingFilterInput {
  and: [FullTestInventoryTopicRoutingFilterInput!]
  or: [FullTestInventoryTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  numberFieldNull: ComparableDoubleOperationFilterInput
  boolFieldNull: BooleanOperationFilterInput
  boolField: BooleanOperationFilterInput
  enumFieldList: ListCustomEnumOperationFilterInputTypeOfStocksFilterInput
  dateField: ComparableDateTimeOperationFilterInput
  enumFieldNull: StocksFilterInput
  dateFieldList: ListComparableDateTimeOperationFilterInput
  dateFieldNullList: ListComparableDateTimeOperationFilterInput
  stringFieldNullList: ListStringOperationFilterInput
  boolFieldNullList: ListBooleanOperationFilterInput
  boolFieldList: ListBooleanOperationFilterInput
  refFieldList: ListComparableGuidOperationFilterInput
  stringFieldList: ListStringOperationFilterInput
  enumFieldNullList: ListCustomEnumOperationFilterInputTypeOfStocksFilterInput
  refFieldNullList: ListComparableGuidOperationFilterInput
  stringFieldNull: StringOperationFilterInput
  stringField: StringOperationFilterInput
  numberField: ComparableDoubleOperationFilterInput
  numberFieldNullList: ListComparableDoubleOperationFilterInput
  numberFieldList: ListComparableDoubleOperationFilterInput
  refFieldNull: ComparableGuidOperationFilterInput
  refField: ComparableGuidOperationFilterInput
  dateFieldNull: ComparableDateTimeOperationFilterInput
  enumField: StocksFilterInput
}

enum DispatcherMessagesFields {
  WOHNUNGS_GRUPPE
  TEMPERATUR
  SPANNUNG
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input DispatcherMessagesTopicRoutingFilterInput {
  and: [DispatcherMessagesTopicRoutingFilterInput!]
  or: [DispatcherMessagesTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  wohnungsGruppe: StringOperationFilterInput
  temperatur: ComparableDoubleOperationFilterInput
  spannung: ComparableDoubleOperationFilterInput
}

enum UpperTestFieldNameFields {
  PROP_FIELD
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input UpperTestFieldNameTopicRoutingFilterInput {
  and: [UpperTestFieldNameTopicRoutingFilterInput!]
  or: [UpperTestFieldNameTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  propField: StringOperationFilterInput
}

enum DeleteMeFields {
  LALAL
  CHANGE_USER
  DYNAMIC_ITEM_ID
}

input DeleteMeTopicRoutingFilterInput {
  and: [DeleteMeTopicRoutingFilterInput!]
  or: [DeleteMeTopicRoutingFilterInput!]
  dynamicInventoryId: ComparableGuidOperationFilterInput
  dynamicItemId: ComparableGuidOperationFilterInput
  changeDate: ComparableDateTimeOperationFilterInput
  changeUser: StringOperationFilterInput
  lalal: StringOperationFilterInput
}

interface IItem {
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
}

input SelectionItemFilterInput {
  and: [SelectionItemFilterInput!]
  or: [SelectionItemFilterInput!]
  selectionItemId: ComparableGuidOperationFilterInput
  fieldName: StringOperationFilterInput
  displayName: StringOperationFilterInput
  description: StringOperationFilterInput
  color: ColorFilterInput
}

input ListFilterInputTypeOfDataPointFilterInput {
  all: DataPointFilterInput
  none: DataPointFilterInput
  some: DataPointFilterInput
  any: Boolean
}

interface IHistoryItem {
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  dynamicHistoryItemId: Uuid!
}

input TimeUnitOperationFilterInput {
  eq: TimeUnit
  neq: TimeUnit
  in: [TimeUnit!]
  nin: [TimeUnit!]
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

interface ITimeSeriesConfig {
  resolution: Resolution!
  unit: String!
}

interface ITimeSeriesData {
  data(readDataInput: ReadDataInput): Data
  dataPeriod: DataPeriod
}

interface ITimeSeriesItem {
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  dataPeriod: DataPeriod
  data(readDataInput: ReadDataInput): Data
  timeSeriesGroupItemId: Uuid
}

type Resolution {
  timeUnit: TimeUnit!
  factor: Int!
}

interface ITimeSeriesHistoryItem {
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesGroupItemId: Uuid
}

interface ITimeSeriesGroupItem {
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
}

interface ITimeSeriesGroupHistoryItem {
  dynamicHistoryItemId: Uuid!
  dynamicItemId: Uuid!
  dynamicInventoryId: Uuid!
  changeDate: DateTime!
  changeUser: String!
  resolution: Resolution!
  unit: String!
  timeSeriesInventoryId: Uuid!
}

input DataPointInput {
  timestamp: DateTime!
  value: Float!
}

input ColorFilterInput {
  and: [ColorFilterInput!]
  or: [ColorFilterInput!]
  name: StringOperationFilterInput
  hexCode: StringOperationFilterInput
}

input DataPointFilterInput {
  and: [DataPointFilterInput!]
  or: [DataPointFilterInput!]
  timestamp: ComparableDateTimeOperationFilterInput
  value: ComparableDoubleOperationFilterInput
  flag: DataFlagOperationFilterInput
}

input DataFlagOperationFilterInput {
  eq: DataFlag
  neq: DataFlag
  in: [DataFlag!]
  nin: [DataFlag!]
}

type GraphQlMetaQueryType {
  topLevelFieldNames(operationType: OperationType! = QUERY): [String!]!
  typeDescription(typeName: String!): ITypeDescription
  query: GraphQlMetaQueryOperationsType!
  mutation: GraphQlMetaMutationQuery!
  schema: String!
  relations(where: RelationDefinitionTypeFilterInput): [RelationDefinitionType!]!
}

type GraphQlFieldDescription {
  name: String!
  type: ITypeDescription!
}

type RelationDefinitionType {
  fieldPath: String!
  name: String!
  topLevelField: String!
  type: RelationType!
}

type GraphQlMetaMutationType {
  invokeMutation(mutation: String! variables: [VariableValueInput!] pathsToExclude: [String!] nestingLevel: Int! = 2147483647 nestingPlusOneFields: [String!] listNestingLevel: Int! = 2147483647 addSelectVariables: Boolean! = false exposeArguments: Boolean! = true inputTypesToExpand: [String!]): GraphQlOperationResult!
}

type AddRelationResult {
  relation: RelationDefinitionType
}

type RemoveRelationResult {
  removed: Boolean!
}

input VariableWithPlaceholderInput {
  name: String!
  getValue: String!
}

enum ComputedFieldType {
  STRING
  INT
  FLOAT
  BOOLEAN
}

input AddPropertyDefinitionsInput {
  dynamicInventoryId: Uuid!
  propertyDefinitions: [AddPropertyDefinitionInput!]!
}

input RemovePropertyDefinitionsInput {
  dynamicInventoryId: Uuid!
  propertyKeys: [Uuid!]!
}

enum Variant {
  DEFAULT
  TIME_SERIES
  TIME_SERIES_GROUP
  VIRTUAL_TIME_SERIES
}

type ApplicationInfo {
  name: String!
  version: String
}

type DataPeriod {
  from: DateTime
  to: DateTime
}

type DataPoint {
  timestamp: DateTime!
  value: Float!
  flag: DataFlag!
}

enum TimeUnit {
  MILLISECOND
  SECOND
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum Aggregation {
  AVG
  SUM
  MIN
  MAX
}

type UserError {
  message: String!
  code: String!
}

input AddPropertyDefinitionInput {
  fieldName: String!
  displayName: String
  valueType: PropertyValueType!
  isList: Boolean
  optional: Boolean
  historyEnabled: Boolean
  selectionListId: Uuid
  referencedInventoryId: Uuid
  computedPropertyDefinition: ComputedFieldDefinitionInput
}

enum AggregationRule {
  NONE
  AVG
  SUM
}

enum OnSubscription {
  ON_ITEM_CREATED
  ON_ITEM_UPDATED
  ON_ITEM_UPSERT
  ON_ITEM_DELETED
}

input ResolutionInput {
  timeUnit: TimeUnit!
  factor: Int!
}

type SelectionItem {
  selectionItemId: Uuid!
  fieldName: String!
  displayName: String!
  description: String
  color: Color
}

enum RelationType {
  QUERY
  MUTATION
}

enum PropertyValueType {
  DATE_TIME
  NUMERIC
  STRING
  BOOLEAN
  DYNAMIC_INVENTORY
  SELECTION_LIST
  COMPUTED
}

input ColorInput {
  name: String!
  hexCode: String!
}

enum DataFlag {
  NO_VALUE
  MANUALLY_REPLACED
  FAULTY
  VALID
  SCHEDULE
  MISSING
  ACCOUNTED
  ESTIMATED
  INTERPOLATED
}

type GraphQlMetaQueryOperationsType {
  dynamicItem(topLevelField: String! pathsToExclude: [String!] nestingLevel: Int! = 3 nestingPlusOneFields: [String!] listNestingLevel: Int! = 1 addSelectVariables: Boolean! = false): GraphQlQueryOperation!
  topLevel(topLevelField: String! pathsToExclude: [String!] nestingLevel: Int! = 2147483647 nestingPlusOneFields: [String!] listNestingLevel: Int! = 2147483647 addSelectVariables: Boolean! = true exposeArguments: Boolean! = true inputTypesToExpand: [String!]): GraphQlQueryOperation!
  fromSource(source: String!): GraphQlQueryOperation!
}

type GraphQlMetaMutationQuery {
  topLevel(topLevelField: String! pathsToExclude: [String!] nestingLevel: Int! = 2147483647 nestingPlusOneFields: [String!] listNestingLevel: Int! = 2147483647 addSelectVariables: Boolean! = false exposeArguments: Boolean! = true inputTypesToExpand: [String!]): GraphQlMutationOperation!
}

enum OperationType {
  QUERY
  MUTATION
}

type GraphQlOperationResult {
  grid: Grid!
  plain: String!
}

input VariableValueInput {
  name: String!
  value: String!
}

input ComputedFieldDefinitionInput {
  fieldType: ComputedFieldType!
  formula: String!
}

type Color {
  name: String!
  hexCode: String!
}

type GraphQlQueryOperation {
  result(variables: [VariableValueInput!]): GraphQlOperationResult!
  plain: String!
  variableInfos: [GraphQlVariableInfo!]!
}

type GraphQlMutationOperation {
  plain: String!
  variableInfos: [GraphQlVariableInfo!]!
}

type Grid {
  relations: [GraphQlRelation!]!
  operations: [GraphQlRelation!]!
  columns: [GridColumn!]!
  rows: [GridRow!]!
}

type GraphQlVariableInfo {
  name: String!
  type: ITypeDescription!
  columnName: String!
  kind: VariableKind!
}

type GraphQlRelation {
  name: String!
  link: GraphQlLink!
}

type GridColumn {
  name: String!
  type: ITypeDescription!
  displayName: String!
  kind: GridColumnKind!
}

type GridRow {
  relations: [GraphQlRelation!]!
  operations: [GraphQlRelation!]!
  values: [ICellValue!]!
}

enum VariableKind {
  EXPOSED_ARGUMENT
  SELECT
  OTHER
}

type GraphQlLink {
  variables: [VariableValue!]!
  topLevelField: String!
  listNestingLevel: Int!
  nestingLevel: Int!
}

enum GridColumnKind {
  STANDARD
  TS_TIMESTAMP
  TS_VALUE
  TS_VALUE_FLAG
  PAGING
}

type VariableValue {
  name: String!
  value: String!
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION